<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>人生就是干</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 28 May 2022 13:20:56 +0000</pubDate>
    <lastBuildDate>Sat, 28 May 2022 13:20:56 +0000</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>Keep Health</title>
        <description>
&lt;hr /&gt;
&lt;p&gt;layout: post
title: “39 - 保持健康”
subtitle: ‘2022-05-20’ 
author: “叉叉敌”
header-style: text
tags:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;我经常不知道如何写newsletter的开头，有时候就写最近的天气，或者最近的热点。&lt;/p&gt;

&lt;p&gt;你没看错，都是最近相关的。但是有个问题，我们大部分国人都没有养成看邮件的习惯，所以一般不是每天都会去看邮箱里面的邮件，就会导致看到这一篇newsletter，有可能已经是过了一段时间了，有可能是一个月，有可能是几个礼拜。&lt;/p&gt;

&lt;p&gt;没用太大的意义，除了字数。&lt;/p&gt;

&lt;p&gt;我后面就不写最近相关的，或者是就写自己的一些感悟。&lt;/p&gt;

&lt;p&gt;为了排版，这里本来应该有一张tech相关的图片，由于我的文章会通过github-actions，自动推送到微信公众号平台。图片用的github的图床，cdn用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdn.jsdelivr.net&lt;/code&gt;，但是国内最近屏蔽了这个网址，导致获取图片内容失败了，所以没有图片，抱歉，就是这么一段话了，后续钱足够的话，准备用其他云服务器的图床 。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h2 id=&quot;保持健康&quot;&gt;保持健康&lt;/h2&gt;

&lt;p&gt;上周老婆诊断胆结石，做了手术，就等着恢复吧。&lt;/p&gt;

&lt;p&gt;看了网上的介绍，胆结石大概有2个成因，一个是遗传，这个也是我们没法改变的，还有大概率原因一个是摄入高蛋白、高脂肪，缺乏运动。&lt;/p&gt;

&lt;p&gt;所以身体要紧，锻炼最好时机是几年前，还有就是现在 ~， 跟着刘畊宏跳起来。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;胆囊结石形成的原因目前大家没有一个定论，其中最主要的还是一个叫胆固醇过多的一个理论。大家知道胆囊胆汁里头有三个主要的成分，当然最主要的还是水，其次就是胆固醇、胆汁酸和卵磷脂。那么当这三种物质的配比达到一定配比的时候，胆固醇的这个溶解度是相对是最大的。当然胆固醇增多或者其它的配置失衡，会导致胆固醇从这个液态变成小的结晶体，然后慢慢形成一个胆囊结石的状态。那么这个是大家现在比较公认的一个理论。另外呢，还有一个就是说咱们的这个胆囊功能的问题，比如说胆囊排空功能的有问题了，胆囊长期处于这种淤胀状态，胆囊内的胆汁没法排出，这种状态下淤滞的胆汁也容易形成结石，这是目前比较常见的一些原因。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;给我有2个启发&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;第一个是健康，尽早、多做对身体有好处的运动，保持健康&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;第二个是有病，尽早去能力范围内，医资力量好一点的地方&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最开始在我们小县城，也是三甲医院，那边的医生诊断就是胆囊炎，没有结石，就是输消炎的药，结果输了就是完全效果。&lt;/p&gt;

&lt;p&gt;来成都这边之后，重新检查之后，发现是结石掉到胆管里面了，已经堵塞胆管了……&lt;/p&gt;

&lt;h2 id=&quot;搞钱的目的&quot;&gt;搞钱的目的&lt;/h2&gt;

&lt;p&gt;你心中或者是你的经历中，有没有用钱非常愉快的时刻，可以分享一下么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;钱只是我们改善生活的一种桥梁，一种途径，如果是钱是合理合法的，那我们就尽情的去搞，但是千万不要做违法的事情。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先我来分享一次，最近用钱用的非常爽的时刻。&lt;/p&gt;

&lt;p&gt;记得我用钱最愉快的时刻，就是前段时间(快一年了吧)去广西涠洲岛，那里的海鲜。&lt;/p&gt;

&lt;p&gt;我们当时去还不是丰收期，就是说海鲜和内地比起来，价格差不了多少，也不便宜。&lt;/p&gt;

&lt;p&gt;吹着温热的海风，听着海水拍打海岸的声音，偶尔也听到几声海鸥的叫声，同时也闻到椒盐味的那种鲜香，能大快朵颐，不像平时在家，海鲜的量不太多，也没那么好。&lt;/p&gt;

&lt;p&gt;而且它的海鲜非常的新鲜而且非常饱满，个头也非常大，特别是皮皮虾，总体下来就是吃的爽，吃的非常的痛快&lt;/p&gt;

&lt;h2 id=&quot;旅行的目的&quot;&gt;旅行的目的&lt;/h2&gt;

&lt;p&gt;做一次长途旅行。这种旅行的目的不是为了玩，而是为了增加认知。&lt;strong&gt;最好的旅行会让你领悟到，世界之外还有世界，生活总是有其他可能，人类社会长期中总是服从熵增原理。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我之前大部分旅行都是国内。&lt;/p&gt;

&lt;p&gt;如果只考虑开拓见闻、增广心灵，国外旅行要比国内旅行的收获更大，更能让你感受世界的多样性。&lt;/p&gt;

&lt;p&gt;穷国比富国有意思，我去过东南亚小国家，城里的交通工具大部分都是吐吐车&lt;/p&gt;

&lt;h2 id=&quot;感悟&quot;&gt;感悟&lt;/h2&gt;

&lt;p&gt;摆脱坏习惯之后省下来的时间，可以用来做你喜欢的事，也可以用来提升工作效率，还可以用来加深人际关系，或是拓展一个新身份。&lt;/p&gt;

&lt;p&gt;具体如何做，一部分取决于你自己的选择，一部分则取决于你身边的人。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/-jtyEYul-d1PIfrrJBUqRg&quot;&gt;经济高速公路上，突然经过的鸭子&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;假设一条高速公路上，所有车都维持在 100 公里每小时的速度，稳定运行。&lt;/p&gt;

&lt;p&gt;忽然一只鸭子冲到路上，吓得司机拼命踩刹车，停了下来。后面的第二辆车也急刹车，后面一辆一辆车都急刹车，还好都没有追尾。之后，鸭子仓皇逃窜，离开高速公路。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://alt-tab-macos.netlify.app/&quot;&gt;https://alt-tab-macos.netlify.app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实现跟 Windows 窗口管理器一样的窗口切换，同时在窗口里显示该窗口的名字，如果一个 App 有多个窗口，那就全都展示出来&lt;/p&gt;

&lt;p&gt;相见恨晚呐！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tomverbeure.github.io/2022/02/20/GDBWave-Post-Simulation-RISCV-SW-Debugging.html&quot;&gt;调试FPGA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tom Verbeure深入将GDB服务器与RISC-V CPU连接起来，使调试FPGA变得更容易。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://0xax.gitbooks.io/linux-insides/content&quot;&gt;关于Linux内核&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这本书是关于Linux内核及其内部的。它涵盖了Linux内核的工作原理和其他低级主题。主题包括启动、初始化、中断、系统调用、同步原语和内存管理。这本书仍在进行中。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;p&gt;写了篇关于llvm和cuda 的基础知识，但是图床用的cdn，被禁用了，还没有推上去。&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书最重要的就是定好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;固定的时间&lt;/code&gt;，比如每天早起20分钟，那这个时间就可以用阅读，可以做自己喜欢事情，就可以避免日后每天纠结到底啥时候读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;福格行为模型 - 100%&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最近买了一本 莫言的书 那些奇奇怪怪的故事&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;喜欢作家这种风趣幽默的风格，同时有可能幽默和风趣不是你这个人本身的特质，但一定是作者的劳动成果。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;技术相关的书，大部分是电子书，因为可以随时的show me code。&lt;/li&gt;
  &lt;li&gt;方法、理论类的书籍，一般会停下来思考，提出问题、或者沉淀为自己的知识。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/28/keep-health/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/28/keep-health/</guid>
        
        
      </item>
    
      <item>
        <title>38 - 小习惯</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;今天是520，我想是一个美好的日子，祝大家节日快乐~&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;p&gt;今天老婆大人的胆囊炎犯了，还在急诊室输液喃，我就趁这个时间更新一篇来自医院的 Newsletter， 今天的内容就将就看一些呀 ~&lt;/p&gt;

&lt;p&gt;最近看的技术书籍比较多，所以个人成长之类的书就比较少了。输入的知识少了也比较好，同时自己也有时间来消化这些信息。&lt;/p&gt;

&lt;h2 id=&quot;行为设计&quot;&gt;行为设计&lt;/h2&gt;

&lt;p&gt;你有什么小的行为、或者改变可以分享的么？&lt;/p&gt;

&lt;p&gt;家里有一个地方看上去有点脏，就随手打扫干净，这样就不用等到特别脏的时候再去打扫，同时也很难等到有这样的场景。&lt;/p&gt;

&lt;p&gt;最近看福格行为这本书的时候，发现有一个小改变，生活中有很多这样的小改变，小改变也许没那么吸引人，但它是一种可持续的成功。在人们想做出的大多数人生改变中，有时采取小行为也许会比大胆的行为更有效。&lt;/p&gt;

&lt;p&gt;还有一个小习惯，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;我就是每天坚持给手机充电，基本上365天不间断。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个就是行为设计的力量，让你拥有了极大的改变潜力。无论你追求的是大改变还是小改变，从小事做起都是一个绝佳选择。&lt;/p&gt;

&lt;p&gt;下面是找出生活中，有哪些可以做到的行为设计：
·　你是否有足够的时间？
·　你是否有足够的资金？
·　你是否有足够的体力？
·　这个行为是否需要许多创意或脑力？
·　这个行为符合你现在的日程吗？还是需要做出调整？&lt;/p&gt;

&lt;p&gt;入门步骤是一种心理柔术，一个很小的动作却能带来极大的影响，它所创造的冲力往往能推动你在阻力极小的情况下向前迈进，而其中的关键就是不要抬高门槛。每完成一个入门步骤就是一次成功。每一次成功，都能让你继续坚持，增加养成习惯的可能性。&lt;/p&gt;

&lt;p&gt;迈出第一步，无论多么微小，都能让大脑活跃起来。完成任务不仅有助于增强信心，而且能让完成完整行为的动机高涨。&lt;/p&gt;

&lt;p&gt;庆祝是一种特殊的技巧，既能为人们带来行为改变，也能让他们产生心理转变。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jasont.co/ennui/&quot;&gt;如何保持在工作中的激情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者例举了4个技巧，生命是短暂的，有了这四个技巧，你就不必痛苦了。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tinylab.org/open-c-book/&quot;&gt;一本透视 C 语言开发过程的开源书籍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一本透视 C 语言开发过程的开源书籍，如果你在学习C，或者深入学习C，亦或是编译器、汇编等，比较底层的知识，这个电子书籍是不错的选择。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cuda-tutorial.readthedocs.io/en/latest/tutorials/tutorial01/&quot;&gt;CUDA 入门教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也是我最近学习cuda，看的一本基础的电子书，通过一个hello cuda来入门，简单易懂，适合新手。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;更新了5篇学习文档，由于都比较基础，就不用贴链接了&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书最重要的就是定好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;固定的时间&lt;/code&gt;，比如每天早起20分钟，那这个时间就可以用阅读，可以做自己喜欢事情，就可以避免日后每天纠结到底啥时候读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;福格行为模型 - 60%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;符合自己的心灵的感受，就是最好的，这样也能做的更久。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;技术相关的书，大部分是电子书，因为可以随时的show me code。&lt;/li&gt;
  &lt;li&gt;方法、理论类的书籍，一般会停下来思考，提出问题、或者沉淀为自己的知识。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天是坚持周更分享：第 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;38/60&lt;/code&gt; 期。&lt;/p&gt;

</description>
        <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/21/small-behavior/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/21/small-behavior/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>CUDA 入门教程</title>
        <description>&lt;p&gt;可以用 CUDA 创建大规模并行处理机应用程序的方法之一。它允许您使用强大的 c++ 编程语言来开发高性能算法，这些算法由运行在 GPU 上的数千个并行线程加速。&lt;/p&gt;

&lt;p&gt;许多开发人员已经通过这种方式加速了他们计算和带宽需求量巨大的应用程序，包括支持深度学习这一人工智能革命的库和框架。&lt;/p&gt;

&lt;p&gt;需要有NV显卡的电脑，环境准备，我用的thinkpad，装的windows，在wsl下面安装cuda，参考官方的文档：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin
&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda-repo-wsl-ubuntu-11-7-local_11.7.0-1_amd64.deb
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; cuda-repo-wsl-ubuntu-11-7-local_11.7.0-1_amd64.deb
&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /var/cuda-repo-wsl-ubuntu-11-7-local/cuda-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-keyring&lt;/span&gt;.gpg /usr/share/keyrings/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cuda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面用c代码和cuda来比较下.&lt;/p&gt;

&lt;p&gt;C 代码&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CUDA 代码&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__global__&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cuda_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World from GPU!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cuda_hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要上面的 cuda代码里面，有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__global__&lt;/code&gt;，global指的是在GPU device侧运行， &lt;strong&gt;global&lt;/strong&gt; 函数就是kernel.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;device和host的区别：分别是GPU，一个是CPU.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要在 GPU 上计算，需要分配 GPU 可访问的内存。CUDA 中的统一内存通过提供一个单一的内存空间容易访问所有的 gpu 和 cpu 。要在统一内存中分配数据，请调用 cudaMallocManaged() ，它返回一个指针，可以通过主机(CPU)代码或设备(GPU)代码访问该指针。&lt;/p&gt;

&lt;p&gt;要释放数据，只需传递指针到 cudaFree()。&lt;/p&gt;

&lt;p&gt;再回到上面的代码中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cuda_hello&amp;lt;&amp;lt;&amp;lt;1,1&amp;gt;&amp;gt;&amp;gt;(); &lt;/code&gt;，这里的«&amp;lt;»&amp;gt;这个是特殊语法，cuda_hello是kernel函数，里面有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1,1&lt;/code&gt;，第一个1的含义是：block的数量， 一群这样的block称为grid（网格），并行的线程集合称为block.&lt;/p&gt;

&lt;p&gt;上面的第一个和第二个分别可以，像下面这么定义：&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numBlocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cuda_hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numBlocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CUDA gpu 有许多并行处理器组成流多处理器，或者SM（shared memeory）。每个 SM 可以运行多个并发线程块。例如，一个基于 Pascal GPU 架构的 Tesla P100 GPU 有56 SM，每SM最多可支持2048个活动线程。为了充分利用所有这些线程，我应该启动带有多个线程块的内核。&lt;/p&gt;

&lt;p&gt;第二个1的意思是多少个线程，这个数是32的倍数，在cuda里面，可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockDim.x&lt;/code&gt;获取线程的数量，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threadIdx.x&lt;/code&gt;这个获取当前线程的index.
cuda 还提供了用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockIdx.x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gridDim.x&lt;/code&gt;,分别获取block的index和块的数量.&lt;/p&gt;

&lt;p&gt;所以就可以通过上面内置的函数获取偏移量&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__global__&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockDim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockDim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridDim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比如下面就是求第三个黄色区域值的index.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/20220519193219.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/20220519193219.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/20220519193219.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win202220220526112647.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220526112725.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;分配主机内存和初始化的主机数据&lt;/li&gt;
  &lt;li&gt;分配设备内存&lt;/li&gt;
  &lt;li&gt;将输入数据从主机传输到设备存储器&lt;/li&gt;
  &lt;li&gt;执行内核&lt;/li&gt;
  &lt;li&gt;将输出从设备存储器传输到主机&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://www.nvidia.com/docs/IO/116711/sc11-cuda-c-basics.pdf&lt;/p&gt;

&lt;p&gt;https://cuda-tutorial.readthedocs.io/en/latest/tutorials/tutorial01/&lt;/p&gt;

&lt;p&gt;https://developer.nvidia.com/blog/even-easier-introduction-cuda/&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/19/CUDA-beginner-guider/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/19/CUDA-beginner-guider/</guid>
        
        <category>cuda</category>
        
        
      </item>
    
      <item>
        <title>LLVM 外部项目 2</title>
        <description>&lt;p&gt;最近在github上发现一个&lt;a href=&quot;https://getting-started-with-llvm-core-libraries-zh-cn.readthedocs.io/zh_CN/latest/ch02.html&quot;&gt;不错的翻译文档&lt;/a&gt;，关于llvm的，虽然文档是2014.08年，但是对于用来了解llvm也是足够了.&lt;/p&gt;

&lt;p&gt;对于英文文档，&lt;a href=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/llvm.pdf&quot;&gt;可以下载&lt;/a&gt;这里.&lt;/p&gt;

&lt;h2 id=&quot;关于-clang&quot;&gt;关于 Clang&lt;/h2&gt;

&lt;p&gt;Clang不仅将C和C++转换为LLVM IR，而且能够监督整个编译过程，作为一个灵活的编译器驱动器，努力与GCC兼容共处。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/ZcAYPM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clang看作一个前端编译器，而不是一个编译器驱动器，它负责将C和C++程序翻译为LLVM IR。&lt;/p&gt;

&lt;h2 id=&quot;什么是-compiler-rt&quot;&gt;什么是 Compiler-RT&lt;/h2&gt;

&lt;p&gt;Compiler-RT（runtime）项目为硬件不支持的低级功能提供目标特定的支持。举例来说，32位目标通常缺少64位除法指令。Compiler-RT提供一个目标特定的优化的函数，它用32位指令实现64位除法，从而解决这个问题。&lt;/p&gt;

&lt;p&gt;比如c文件&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0ULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0ULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%ld %ld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64-bit division is %lu&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行汇编&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang-12 -S compiler-rt.c -o test.S&lt;/code&gt;，然后可以看到下面一个test.S的文件，里面的内容如下. 参数-S指示编译器生成x86汇编语言.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
# %bb.0:
        pushq   %rbp
        .cfi_def_cfa_offset 16
        .cfi_offset %rbp, -16
        movq    %rsp, %rbp
        .cfi_def_cfa_register %rbp
        subq    $32, %rsp
        movl    $0, -4(%rbp)
        movq    $0, -16(%rbp)
        movq    $0, -24(%rbp)
        movabsq $.L.str, %rdi
        leaq    -16(%rbp), %rsi
        leaq    -24(%rbp), %rdx
        movb    $0, %al
        callq   __isoc99_scanf
        movq    -16(%rbp), %rax
        xorl    %ecx, %ecx
        movl    %ecx, %edx
        divq    -24(%rbp)
        movq    %rax, %rsi
        movabsq $.L.str.1, %rdi
        movb    $0, %al
        callq   printf
        xorl    %eax, %eax
        addq    $32, %rsp
        popq    %rbp
        .cfi_def_cfa %rsp, 8
        retq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dragonegg&quot;&gt;dragonegg&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dragonegg.llvm.org/&quot;&gt;DragonEgg&lt;/a&gt; 是一个 GCC 插件，它用 LLVM 项目中的代码生成器替代了 GCC 的优化器和代码生成器。它适用于 gcc-4.5或更高版本，可以针对 x86-32/x86-64和 ARM 处理器系列，并已成功地应用于 Darwin、 FreeBSD、 KFreeBSD、 Linux 和 OpenBSD 平台。它完全支持 Ada、 c、 c + + 和 Fortran。它对 Go、 Java、 Obj-C 和 Obj-C + + 有部分支持。&lt;/p&gt;

&lt;p&gt;目前llvm3.3 之后就没有发布过了，所以直接用G++就可以.&lt;/p&gt;

&lt;p&gt;比如一个简单的cpp文件&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后用gcc编译为汇编&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc test.cpp &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; -
        .file   &lt;span class=&quot;s2&quot;&gt;&quot;test.cpp&quot;&lt;/span&gt;
        .text
        .globl  main
        .type   main, @function
main:
.LFB0:
        .cfi_startproc
        movl    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, %eax
        ret
        .cfi_endproc
.LFE0:
        .size   main, .-main
        .ident  &lt;span class=&quot;s2&quot;&gt;&quot;GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&quot;&lt;/span&gt;
        .section        .note.GNU-stack,&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,@progbits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;
微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/17/external-project/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/17/external-project/</guid>
        
        <category>llvm</category>
        
        
      </item>
    
      <item>
        <title>LLVM 安装和编译 1</title>
        <description>&lt;p&gt;LLVM基础设施适用于若干 Unix 系统（GNU/Linux，FreeBSD ，Mac OS）和 Windows 系统。我们一步一步地说明如何让LLVM在这些系统上工作。某些系统可获得LLVM和Clang的预编译安装包，但是也可以从源代码编译得到它们。&lt;/p&gt;

&lt;p&gt;获取LLVM预编译安装包有两种通常的方法；你可以从官方网站获取二进制文件，也可以从第三方获取GNU/Linux发布的安装包和Windows的安装文件。&lt;/p&gt;

&lt;p&gt;目前最新的版本是LLVM 14.0.0，&lt;a href=&quot;https://releases.llvm.org/download.html&quot;&gt;LLVM Download Page&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ubuntu安装llvm&quot;&gt;Ubuntu安装LLVM&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://apt.llvm.org/&quot;&gt;参考这个 LLVM Debian/Ubuntu nightly packages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1， 自动安装脚本， 有3种方式，人选一种即可&lt;/p&gt;

&lt;p&gt;首先是下载shell脚本，然后执行&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
wget https://apt.llvm.org/llvm.sh
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x llvm.sh
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./llvm.s 12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash -c &quot;$(wget -O - https://apt.llvm.org/llvm.sh)&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/bFevQC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了用二进制包安装之外，还可以用&lt;a href=&quot;https://github.com/llvm/llvm-project&quot;&gt;源代码编译安装&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;安装好了之后，可以查看版本：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ clang-12 --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/MipMAY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以用一个cpp文件验证一下编译.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang++-12 test.cpp&lt;/code&gt; 来编译文件, 编译之后执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./a.out&lt;/code&gt;，就可以看到结果了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/zGAFTH.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/4LLVMIRandTransformPipeline.pdf&quot;&gt;4LLVMIRandTransformPipeline.pdf&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;
微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/17/LLVM-install-and-compiler/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/17/LLVM-install-and-compiler/</guid>
        
        <category>llvm</category>
        
        
      </item>
    
      <item>
        <title>LLVM IR转换</title>
        <description>&lt;h2 id=&quot;什么是-llvm--ir&quot;&gt;什么是 LLVM  IR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;⽆限制的单分配寄存器机器指令集&lt;/li&gt;
  &lt;li&gt;强类型&lt;/li&gt;
  &lt;li&gt;三种常⻅表⽰形式：
1， ⼈类可读的 LLVM 程序集（.ll ⽂件） 
2， 密集的 bitcode ⼆进制表⽰（.bc ⽂件） 
3,  C++ 类&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ssa&quot;&gt;SSA&lt;/h2&gt;

&lt;p&gt;Static Single Assignment, 我理解的是单一静态赋值，寄存器可能只分配一次.&lt;/p&gt;

&lt;p&gt;与之对应的就是多赋值，下面就是一个变量a，被赋值2次.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somefunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;既然是2次，那下面的%a 用这样表示.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; call i32 @somefunction&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
%a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add i32 %a, 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用llc编译的时候，看到会报错的，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/7oBE4O.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error: multiple definition of &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;value named ’a’
%a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add i32 %a, 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正确的应该是，2个不同的变量，或者标识，不一定是%a&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; call i32 @somefunction&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
%a2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add i32 %a, 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;前端必须跟踪哪个寄存器在代码的任何一位置保存的值.&lt;/p&gt;

&lt;p&gt;上面的代码是如何跟踪到新的值， 分号是注释， 下面的%0,1,2必须是连续的，中间少了一个会提示不连续.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alloca&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;somefunction&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;somefunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;寄存器的值是自动分配，上面的表达式是自动llc等翻译的，不过也可以手动写， 可以看出在llvm内存中，不是SSA.&lt;/p&gt;

&lt;p&gt;上面看出来有2次store，实际中好像有点冗余，&lt;a href=&quot;https://docs.hdoc.io/hdoc/llvm-project/r50EDE61A175ADB39.html&quot;&gt;SROA&lt;/a&gt;或者寄存器会自动清除这些冗余的步骤，&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;SROA：scalar replacement of aggregates 如果可能的话，这个转换将聚合类型(结构或数组)的 alloca 指令分解为每个成员的单个 alloca 指令。然后，如果可能的话，它将单个 alloca 指令转换为简洁的纯标量 SSA 形式.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就是下面的样子.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@someFunction()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;控制流&quot;&gt;控制流&lt;/h2&gt;

&lt;p&gt;IR的控制流通过jump、branches来实现. 分支为条件和无条件分支，&lt;/p&gt;

&lt;h3 id=&quot;条件&quot;&gt;条件&lt;/h3&gt;

&lt;p&gt;先来看看条件&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;控制流请求一个基础的块，每一次循环路径， 当循环路径指定的时候，就执行条件分支.&lt;/p&gt;

&lt;p&gt;φ -phi， 念/fi/， φ 节点是SSA构造中使⽤的特殊指令.&lt;/p&gt;

&lt;p&gt;IR的入口大概是下面这个样子，可以看到最后一行有2个标识符，
br 是branch，lable是跳转到这个命名的块.分别为then和end&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;entry:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;alloca&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(a)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;icmp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ne&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%then&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then块的内容如下，调用了end块，负责b++&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;then:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;b++&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;end块的内容如下，return b&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;end:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;加入φ之后，就成了这样了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/5YsuxP.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;简化后的CFG， 就一个select指令.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;entry:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%tobool&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;icmp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ne&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%a,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%tobool&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;

&lt;p&gt;LLVM函数包含至少一个基础块，&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;@hello&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@main(i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%argc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%argv)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;entry:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;getelementptr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@hello&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@puts(i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ir如何转化为本地code&quot;&gt;IR如何转化为本地code&lt;/h2&gt;
&lt;h3 id=&quot;selection-dag&quot;&gt;Selection DAG&lt;/h3&gt;
&lt;p&gt;1, 转换&lt;a href=&quot;https://llvm.org/doxygen/classllvm_1_1SelectionDAG.html&quot;&gt;(SelectionDAG)&lt;/a&gt;
2, 映射到指令(Machine IR)
3, 流到汇编&lt;/p&gt;

&lt;h3 id=&quot;instruction-selection&quot;&gt;Instruction Selection&lt;/h3&gt;

&lt;h3 id=&quot;register-allocation&quot;&gt;Register allocation&lt;/h3&gt;

&lt;h3 id=&quot;mc-streamer&quot;&gt;MC Streamer&lt;/h3&gt;

&lt;h2 id=&quot;llvm重要的几个类&quot;&gt;LLVM重要的几个类&lt;/h2&gt;

&lt;h3 id=&quot;module&quot;&gt;Module&lt;/h3&gt;

&lt;p&gt;是所有其他 LLVM 中间表示(IR)对象的顶级容器。每个模块直接包含全局变量列表、函数列表、该模块所依赖的库(或其他模块)列表、符号表以及关于目标特征的各种数据。&lt;/p&gt;

&lt;h3 id=&quot;function&quot;&gt;Function&lt;/h3&gt;

&lt;p&gt;函数基本上由一个基本块列表、一个参数列表,和一个符号表。&lt;/p&gt;

&lt;h3 id=&quot;basicblock&quot;&gt;BasicBlock&lt;/h3&gt;

&lt;p&gt;这表示 LLVM 中的一个基本块。基本块仅仅是一个指令的容器，这些指令按顺序执行。基本块是Value，因为它们被诸如branch和switch表之类的指令引用。BasicBlock 的类型是“ Type::Label_type”，因为基本块表示分支可以跳转到的标签。&lt;/p&gt;

&lt;h3 id=&quot;globalvariable&quot;&gt;GlobalVariable&lt;/h3&gt;

&lt;p&gt;全局变量是常量指针，指向一个大空间，由 VM 或静态编译器中的链接器分配一个全局variable 可能有一个初始值，这个初始值被复制到 executables. dataarea. 需要全局常量才能有初始化器。&lt;/p&gt;

&lt;h3 id=&quot;irbuilder&quot;&gt;IRBuilder&lt;/h3&gt;

&lt;p&gt;这提供了一个统一的 API，用于创建指令并将它们插入到基本块中: 或者在 BasicBlock 的末尾，或者在块中的特定迭代器位置。&lt;/p&gt;

&lt;h3 id=&quot;type&quot;&gt;Type&lt;/h3&gt;

&lt;p&gt;Type 类的实例是不可变的: 它们一旦被创建，就不会被更改。&lt;/p&gt;

&lt;h3 id=&quot;constantexpr&quot;&gt;ConstantExpr&lt;/h3&gt;

&lt;p&gt;用表达式使用其他常量值初始化的常量值。&lt;/p&gt;

&lt;h3 id=&quot;passmanagerbuilder&quot;&gt;PassManagerBuilder&lt;/h3&gt;

&lt;p&gt;这个类用于为 c 和 c++ 等语言建立一个标准的优化序列，允许一些 api 以各种方式自定义传递序列&lt;/p&gt;

&lt;h3 id=&quot;executionengine&quot;&gt;ExecutionEngine&lt;/h3&gt;

&lt;p&gt;用于执行 LLVM 模块的抽象接口，设计用于支持解释器和实时(JIT)编译器实现。&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://llvm.org/doxygen/classllvm_1_1Module.html&lt;/p&gt;

&lt;p&gt;https://www.cnblogs.com/Five100Miles/p/12824942.html&lt;/p&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/52724656&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/4LLVMIRandTransformPipeline.pdf&quot;&gt;4LLVMIRandTransformPipeline.pdf&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/17/LLVM-IR-transform/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/17/LLVM-IR-transform/</guid>
        
        <category>llvm</category>
        
        
      </item>
    
      <item>
        <title>37 - 产品是什么</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;成都的天气确实有点异常，前几天都快 30+ 度了，短裤、短袖都搞起了，从昨天开始突然降温，真的是满减活动不落伍，随时搞起来 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/TYfe8H.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/SOoFSj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;改变&quot;&gt;改变&lt;/h2&gt;

&lt;p&gt;有人说减肥、运动、锻炼是非常愉悦的，我想大部分人是感受不到的这份愉快的。&lt;/p&gt;

&lt;p&gt;我自己也经常跑步，跑步的时候，特别是开始到15分钟左右的时候，那段时间，乳酸上来之后，有点痛苦，我想这个痛苦至少不是愉快的。&lt;/p&gt;

&lt;p&gt;我在沙发上，吃着薯片，看着电影，不是更爽么，更愉悦吗？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;所以只有在感觉良好的状态下进行改变，效果最佳。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如何改进这个习惯，看了一本书，书上大概提到了这么一个步骤和练习：&lt;/p&gt;

&lt;p&gt;1， 写下3个你想要停止的习惯。尽量写得具体一些。比如，要写“终止午餐时买汽水”，而不是“终止喝汽水”。
2， 对每一个习惯，想出3种可以消除（或避免）提示的方法。如果什么都想不出来也没关系，继续下一步即可。
3， 对每一个习惯，思考可以增加难度（能力）的方法。
4， 对每一个习惯，思考可以削弱动机的方法。
5， 对每一个习惯，从步骤2到步骤4里选出你的最佳解决方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/GwKx2D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我之前特别爱看Dota2的比赛视频，为了戒掉这个爱好，我给自己家的路由器设置了这个限制，任何时段都不能访问斗鱼网站了，这下好了，反正已经很久没有打开够斗鱼了 ~&lt;/p&gt;

&lt;p&gt;你有没有看到一部电视剧，特别想看到结局是什么？如果有机会能能完一次就看完，我想没有人会拒绝这个机会。&lt;/p&gt;

&lt;p&gt;一个电视剧一般长的有50多集，短的有9~10来集，基本上1.5倍速度，也要好几个小时才能看完，专注到一个事情上，还是几个小时，这个也算困难的事情了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;这个就是强烈的动机。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;强烈的动机非常适合去做一次就能完成的真正困难的事情，再比如，在危急时刻救孩子、辞职、扔掉家里的所有垃圾食品、踩点冲到机场搭飞机、首次参加匿名戒酒会、给编辑写信、一天内履行10项新年计划。&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;h2 id=&quot;产品&quot;&gt;产品&lt;/h2&gt;

&lt;p&gt;作为一个程序员，非常有必要了解产品是什么。最近看到&lt;a href=&quot;https://mp.weixin.qq.com/s/L1EMRae-16nTDeV43O2DIQ&quot;&gt;池老师的公众号&lt;/a&gt;的写的这篇文章，关于产品的说法，看完之后，自己非常的认同。&lt;/p&gt;

&lt;p&gt;如果你也在学习产品，建议可以看看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/269E4A39-74DB-488B-A9FA-C3264D1AF2F6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;01好的产品富有创意，必须是一个创新的东西 
02好的产品是有用的 
03好的产品是美的 
04好的产品是容易使用的
05好的产品是很含蓄不招摇的 
06好的产品是诚实的 
07好的产品经久不衰，不会随着时间而过时 
08好的产品不会放过任何细节 
09好产品是环保的，不浪费任何资源的 
10好产品遵循少即是多&lt;/p&gt;

&lt;p&gt;产品需要有交易和商品的属性，才有可能变为商业。&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;今天就到这里吧。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://12101111.github.io/xbox-security/&quot;&gt;xbox安全介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文将翻译Xbox Live团队Xbox One安全系统架构师Tony Chen在2019年平台安全峰会(Platform Security Summit 2019, PSEC 2019)上的演讲&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.nvidia.com/blog/nvidia-releases-open-source-gpu-kernel-modules/&quot;&gt;地表最强的GPU公司开源了,他们的GPU内核&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为Linux社区首次开源版本的GPU内核模块有助于提高 NVIDIA GPU驱动程序的质量和安全性。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.menuetos.net&quot;&gt;纯汇编写的操作系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/eKLRhC.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MenuetOS是一个PC操作系统，完全用汇编语言（64位和32位）编写。功能包括先发制人和实时多任务处理，支持多处理器和图形用户界面。Menuet64根据许可证发布，Menuet32根据GPL发布。Menuet支持64位和32位x86汇编编程，适用于更小、更快、资源消耗更少的应用程序。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;p&gt;本周的思考时刻：如何计划自己的行动？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写下自己要完成的计划&lt;/li&gt;
  &lt;li&gt;在自己放松的时候就嫩刚看到的这个提醒(比如设置为屏保，当玩耍手机的是就可以看到)&lt;/li&gt;
  &lt;li&gt;然后每天进步一点，给自己一个反馈，有多巴胺更能坚持下去&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下周思考：NA&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书最重要的就是定好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;固定的时间&lt;/code&gt;，比如每天早起20分钟，那这个时间就可以用阅读，可以做自己喜欢事情，就可以避免日后每天纠结到底啥时候读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;福格行为模型 - 20%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;已经开始。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;技术相关的书，大部分是电子书，因为可以随时的show me code。&lt;/li&gt;
  &lt;li&gt;方法、理论类的书籍，一般会停下来思考，提出问题、或者沉淀为自己的知识。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天是坚持周更分享：第 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;37/60&lt;/code&gt; 期。&lt;/p&gt;

</description>
        <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/14/what-is-product/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/14/what-is-product/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>使用 GDB 进行调试</title>
        <description>&lt;p&gt;经常我们使用的vscode、pycharm等等ide，都带有断点设置，参数检查等，但是GDB就没有这些，那我们能不能通过设置，把gdb用起来更简单喃？
比如，如果你知道这些的话，可以跳过了.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;gdb 脚本配合–batch&lt;/li&gt;
  &lt;li&gt;gdb .gdbinit  文件&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;使用-gdb-进行调试&quot;&gt;使用 GDB 进行调试&lt;/h2&gt;

&lt;p&gt;在过去的几年里，我大部分时间都在用 Python 工作，而且我非常喜欢用 Python 进行调试。您只需将断点()函数调用放入代码中的某个位置，然后将其重新放入程序。我想看看在 c 语言中，我能接近到什么程度。由于 c 语言不是直译语言，我的期望不是很高，但是结果证明用 c 语言调试是相当舒服的。作为奖励，您可以使用 GDB 不仅调试 c 和 c + + ，还可以调试 Rust、 Nim，可能还有任何 C-ABI 的语言。&lt;/p&gt;

&lt;h2 id=&quot;gdb-基础&quot;&gt;GDB 基础&lt;/h2&gt;

&lt;p&gt;首先，我们需要一个程序来调试:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// program.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Product: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要调试程序，包含调试符号非常重要。使用 gcc 编译时添加调试符号，请添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-g&lt;/code&gt; 标志。所以让我们编译这个程序:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -g -o program program.c

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在我们可以通过运行以下命令来调试这个程序:&lt;/p&gt;

&lt;h2 id=&quot;使用-gdb-脚本&quot;&gt;使用 gdb 脚本&lt;/h2&gt;

&lt;p&gt;了解GDB脚本功能&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://www.adacore.com/gems/gem-119-gdb-scripting-part-1&lt;/p&gt;

  &lt;p&gt;https://www.adacore.com/gems/gem-120-gdb-scripting-part-2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但这仍然不是很好，现在我们必须在重新启动调试会话时反复输入所有断点。但是有一种方法可以解决这个问题: gdb 脚本。如果使用-x 选项调用 gdb，则可以传递一个包含 gdb 命令的文件给它，它应该执行这个文件。&lt;/p&gt;

&lt;p&gt;现在我们可以将断点写入脚本，例如。&lt;/p&gt;

&lt;p&gt;现在，我们的断点被存储了。但是还有更多的原因。通常我想检查一些变量。目前希望看到所有循环的乘积变量的值，而不关心其余的:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# gdbscript
b 6
commands
    p product
    c
end

run

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后用这样的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--batch&lt;/code&gt;运行 gdb:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb -x gdbscript program --batch

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，gdb 将快速打印出所有迭代的产品值，然后再次退出。断点后的命令语句将在命中断点后执行所有包含的命令。最后一个命令 c 表示 continue 并将继续程序流，直到命中下一个断点，一旦上次命中了断点，gdb 将通过 – batch 参数结束执行。&lt;/p&gt;

&lt;p&gt;另一个很酷的例子: 让我们假设，不管出于什么原因，我们只对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print_ product() &lt;/code&gt;的第三次调用中的product的值感兴趣。(这当然很傻，因为程序无论如何都会打印它，但在现实调试中，可能会出现这种情况)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set $n = 0

b 6
commands
    set $n = $n + 1
    if $n == 3
        printf &quot;Product is: %d\n&quot;, product
    else
        c
    end
end

run

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正如您所看到的，我们定义了一个变量 $n，并使用它来计数，然后在第三轮中打印所需的信息。第三轮之后，gdb 会自动退出，退出的原因是 – batch。&lt;/p&gt;

&lt;h2 id=&quot;gdbinit--文件&quot;&gt;.gdbinit  文件&lt;/h2&gt;

&lt;p&gt;有一个脚本，如果它存在，gdb 将始终隐式加载它: ~/.gdbinit ，你可以把你经常使用的函数放在那里，或者配置。我的是这样的:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set width 0
set height 0
set print pretty on
set confirm off

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置 width 和 height 为0，将防止 gdb 分页长输出，第三行使 gdb 美化输出，最后一行防止它询问我们是否真的想退出。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;经常我们使用的vscode、pycharm等等ide，都带有断点设置，参数检查等，但是对于gdb来说就没有GUI来设置这些东西了，难免有点不习惯，但是对于经常使用linux开发者的用户来说，掌握gdb是一个必须的技能。下面这个命令，可以简单地将它们附加到调试器调用中:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb -x gdbscript --batch --args program --flags and some args

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此外，如果您需要更复杂的调试设置，例如，因为您还必须启动其他程序，那么可以将所有这些组合在一个 shell 脚本中。&lt;/p&gt;

&lt;p&gt;当然，还有很多关于 gdb 的内容需要了解，而这仅仅是一个介绍。&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://www.adacore.com/gems/gem-119-gdb-scripting-part-1&lt;/p&gt;

&lt;p&gt;https://felix-knorr.net/posts/2022-02-27-direct-gdb.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;
微信公众号：chasays， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」互吹。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/12/gdb-user-guide/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/12/gdb-user-guide/</guid>
        
        <category>gdb</category>
        
        
      </item>
    
      <item>
        <title>腾讯云配置二级域名到Github pages，并用 cloudflare 加速</title>
        <description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;为什么要使用独立的域名，第一个，首先是独立的域名可以使用提高自己的权重以及引用，那能使提高&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;自己网站的流量&lt;/code&gt;；第2个是自己&lt;a href=&quot;https://chiphub.top/&quot;&gt;注册了一个域名&lt;/a&gt;，然后没有使用二级域域名，这个时候开通，那使用起来也非常方便，而且还是免费的。&lt;/p&gt;

&lt;p&gt;本人也是第一次走完整个流程，github pages当然一直有使用，创建也很简单，并且网上教程也比较多；然后是关于自定义域名的问题，自己以前使用过国外的免费域名，然后是直接修改就ok了，然后这次使用了从腾讯云注册的域名，中间会麻烦一些，然后网上也没看到能够特别匹配的教程；最后就是cloudflare的免费CDN加速了，对于github pages的访问来说，CDN加速是非常必要的了。&lt;/p&gt;

&lt;h2 id=&quot;一创建github-pages&quot;&gt;一、创建GitHub pages&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里网上教程很多，就不过多介绍了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在的GitHub pages和以前有一点不太一样，现在是在setting里面单独有一个pages的设置界面，然后可以在里面设置静态页面要访问的文件目录，创建过程比较简单，而且像我使用pages是用于个人博客的搭建。&lt;/p&gt;

&lt;p&gt;我采用的是 jekyll。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/cMlxMb.png&quot; alt=&quot;cMlxMb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成创建后，你会得到一个GitHub pages默认的域名，就像这样：用户名.github.io，像我的就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chasays.github.io&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;二自定义域名&quot;&gt;二、自定义域名&lt;/h2&gt;

&lt;h3 id=&quot;1-域名注册&quot;&gt;1. 域名注册&lt;/h3&gt;

&lt;p&gt;这里我选择的是腾讯云注册的域名，就10几块钱买了一年，还挺不错的，如果同样选择腾讯的域名注册的话可以和我进行一样的操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/mq03JC.png&quot; alt=&quot;mq03JC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里直接按照要求购买就可以，不过要提前进行实名后才可以进行购买，这里要注意一下。买完后它应该会提示你进行域名解析啥的，可以先不用管，之后再搞。&lt;/p&gt;

&lt;h3 id=&quot;2-github-pages绑定自定义域名&quot;&gt;2. GitHub pages绑定自定义域名&lt;/h3&gt;

&lt;p&gt;现在可以到GitHub去绑定自己的域名，像下面这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/wfQ1WK.png&quot; alt=&quot;wfQ1WK&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入https://console.dnspod.cn/dns，在这个界面里可以选择你的域名，DNS解析&amp;gt;我的域名，然后选择快速添加解析，添加一个二级域名, 解析到对应的github.io 地址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/VIvbbo.png&quot; alt=&quot;VIvbbo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成以上的步骤后，过1分钟左右，就&lt;strong&gt;已经可以通过你自己的域名去访问&lt;/strong&gt;你的静态网站了，像现在就可以通过 &lt;a href=&quot;http://blog.chiphub.top&quot;&gt;http://blog.chiphub.top&lt;/a&gt; 去访问我的个人博客了，不过此时&lt;strong&gt;还只能使用http进行访问，还不能够通过https进行访问&lt;/strong&gt;，不过不急，我们在完成cloudflare的CDN加速的步骤中就可以完成https的设置。&lt;/p&gt;

&lt;h2 id=&quot;三cloudflare进行cdn加速&quot;&gt;三、cloudflare进行CDN加速&lt;/h2&gt;

&lt;h3 id=&quot;1-注册cloudflare账号&quot;&gt;1. 注册cloudflare账号&lt;/h3&gt;

&lt;p&gt;点击 https://dash.cloudflare.com/ 进行账号注册或登录&lt;/p&gt;

&lt;p&gt;然后就会马上出现一个输入你自己域名的界面，输入完成域名后就会看到一个选择计划的界面，当然，这里果断免费，反正是自己用，而且白嫖就是爽。（ps：这里的过程忘记截图了）&lt;/p&gt;

&lt;p&gt;会自动扫描所有的DNS配置。&lt;/p&gt;

&lt;h3 id=&quot;2-更改dns服务器至cloudflare&quot;&gt;2. 更改DNS服务器至cloudflare&lt;/h3&gt;

&lt;p&gt;这里就需要回到腾讯云，将原来的DNS服务器（指向DNSPOD的）改为cloudflare。&lt;/p&gt;

&lt;p&gt;进入你的域名管理，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/SxlgG7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在域名信息里面就可以看到修改你的DNS服务器，这里直接把原来的两个替换掉就好了，替换的内容在cloudflare的步骤里面其实有详细的说明（至于为什么没有截图，当然又是忘记截图了😢，绝望，好在cloudflare是有详细的步骤过程的。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/IMG_7959.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，就完成了到 cloudflare 的绑定，后面cloudflare就会提示你要不要使用ssl证书，开启http跳转https之类的，直接按照提示下一步下一步就完事了。&lt;/p&gt;

&lt;p&gt;然后回到GitHub pages的设置界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/tJVNfA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就可以顺利的开启你的enforece https了，愉快而且快速地访问你的网站了，这里贴一下我自己的：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.chiphub.top/&quot;&gt;https://blog.chiphub.top/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前还没什么笔记，以前很早就打算弄的，但最后都没搞下来，这一次一定坚持下来，都搞了这么多准备工作，不坚持下来着实说不太过去了。&lt;/p&gt;

&lt;h2 id=&quot;四总结&quot;&gt;四、总结&lt;/h2&gt;

&lt;p&gt;不是很复杂，就是访问 cloudflare，提示链接被reset，关了梯子也不行，后来用手机操作搞定了。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/&lt;/p&gt;

&lt;p&gt;https://www.pianshen.com/article/8089379345/&lt;/p&gt;

&lt;p&gt;https://www.yixuebiancheng.com/article/90005.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;
微信公众号：chasays， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」互吹。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/11/tencent-cloud-subdomain-config-githubpages/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/11/tencent-cloud-subdomain-config-githubpages/</guid>
        
        <category>github</category>
        
        <category>cloudflare</category>
        
        
      </item>
    
      <item>
        <title>向 Docker 容器复制文件和从 Docker 容器复制文件</title>
        <description>&lt;p&gt;在处理 Docker 项目时，可能需要在 Docker 容器和本地计算机之间复制文件。&lt;/p&gt;

&lt;p&gt;Docker 为我们提供了非常有用的复制命令，使我们能够无缝地从 Docker 容器和本地机器复制文件。在本文中，我们将使用实例讨论如何使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; docker cp&lt;/code&gt; 命令。除了用到cp命令外， 还有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec&lt;/code&gt;常见的命令.&lt;/p&gt;

&lt;p&gt;下面是已经有启动docker镜像的情况下，docker镜像的名字为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_copy&lt;/code&gt;，容器id为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456&lt;/code&gt;，一般情况取前6位即可，不用取全， 这里名字随便取的，根据实际情况为准.&lt;/p&gt;

&lt;h2 id=&quot;将文件从-docker-容器复制到本地计算机&quot;&gt;将文件从 Docker 容器复制到本地计算机&lt;/h2&gt;

&lt;p&gt;按照下面的步骤将文件从 docker 容器复制到本地机器:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;进入到docker容器里面&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; test_copy  /bin/bash 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行后，可以看到已经进入到容器里面.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在容器里面创建一个文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.file&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;test.file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;可以看到当前目录下有一个， test.file的文件名.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;复制到本地机器&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;123456:/test.file ~/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;复制容器id为123456，根目录下面的test.file，到本机的家目录下面.
退出容器，可以在当前机器家目录看到test.file这个文件.&lt;/p&gt;

&lt;h2 id=&quot;将文件从本地系统复制到-docker-容器&quot;&gt;将文件从本地系统复制到 Docker 容器&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;本地创建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local.file&lt;/code&gt;文件名，然后传到容器里面去
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;local.file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;可以看到当前目录下有一个， local.file的文件名.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;复制到容器里面&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ~/local.file 123456:/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;复制容器id为123456，根目录下面的local.file，到容器的家目录下面.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;验证是否存在&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; test_copy /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;进入容器，执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, 可以在机器根目录看到local.file这个文件.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;
微信公众号：chasays， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」互吹。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/11/dokcer-copy-files/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/11/dokcer-copy-files/</guid>
        
        <category>docker</category>
        
        
      </item>
    
  </channel>
</rss>
