<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>人生就是干</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 28 Apr 2023 08:33:56 +0000</pubDate>
    <lastBuildDate>Fri, 28 Apr 2023 08:33:56 +0000</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>（番外）港股打新，简单粗暴分析，值得买么？</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;理财有风险，投资需谨慎。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天不讨论：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;港股打新一年能赚多少&lt;/li&gt;
  &lt;li&gt;港股打新需要市值吗&lt;/li&gt;
  &lt;li&gt;港股打新需要多少资金&lt;/li&gt;
  &lt;li&gt;申购港股需要什么条件&lt;/li&gt;
  &lt;li&gt;港股打新规则&lt;/li&gt;
  &lt;li&gt;港股如何打新申购&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天重点要解决的问题是，对于一个上班族，没有太多的时间看数据，同时又不好找到专业的数据，来抄作业。&lt;/p&gt;

&lt;p&gt;如何赚点零花钱，同时又简单粗暴，比如对于 A 股的可转债基本上是闭眼操作，这种属于捡钱的，那港股有没有这种可能，也是闭眼操作那种。&lt;/p&gt;

&lt;p&gt;提到 A 股的可转债，那来个小广告，自己做了一个提醒小工具：&lt;a href=&quot;https://github.com/chasays/kzz.ics&quot;&gt;https://github.com/chasays/kzz.ics&lt;/a&gt;，如果可以，记得给个赞赏下哦~&lt;/p&gt;

&lt;p&gt;先说结论：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;没有时间的，直接看「认购倍数」，不融资，直接用现金上几手即可，上市转手就买，不要等。&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;认购倍数 &amp;lt; 3 的，不考虑&lt;/li&gt;
  &lt;li&gt;认购倍数 &amp;gt;3，&amp;lt;10，现金认购 3~5 手&lt;/li&gt;
  &lt;li&gt;认购倍数 &amp;gt; 10，有多少直接上，认为自己的分险可承受的，可以上融资&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人建议，不构成投资建议，成年人要对自己的行为负责，不要总是想着寄托别人。不代表投资的最终结果，投资者仍需结合各种因素作出判断。&lt;/p&gt;

&lt;p&gt;下面是科普时间，没时间可以直接略过哦。&lt;/p&gt;

&lt;h1 id=&quot;什么是认购倍数&quot;&gt;什么是认购倍数&lt;/h1&gt;

&lt;p&gt;港股新股发行时，会公布认购倍数 (Subscription Multiple) 数据。这个指标反映该新股的超额认购倍数，是衡量新股热度和超买程度的一个重要参考。
认购倍数的计算方法是：认购倍数 = 全部有效认购申请股数 / 实际发行股数&lt;/p&gt;

&lt;p&gt;例如：某新股发行 1 亿股股票，收到有效认购申请 20 亿股，则其认购倍数为 20 / 10 = 2 倍。&lt;/p&gt;

&lt;p&gt;认购倍数越高，表示该&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;新股更为热门和超买&lt;/code&gt;。一般来说：
• 小于 2 倍，属于较为平淡，热度一般。
• 2-5 倍，属于较热门，超买程度适中。
• 5 倍以上，属于炙手可热，超买程度高涨，上市首日可能大幅上涨。
• 10 倍以上，属于异常火爆，超买极度超标，上市首日大概率会停牌或连续上涨。&lt;/p&gt;

&lt;p&gt;认购倍数的主要意义在于：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;衡量新股的热度和超买程度。认购倍数越高，热度和超买程度越高，上市首日涨幅预期也越大。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;判断上市首日的停牌概率。认购倍数越高，停牌概率也越大，以便释放压力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;指导投资者的策略选择。认购倍数越高，投资者可选择更激进策略，以争取更高的首日涨幅;认购倍数一般时，可选择较为稳健的策略，控制风险。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，认购倍数是判断港股新股热度和指导投资策略选择的一个很关键的参考指标。但它也仅是参考，不代表投资的最终结果，投资者仍需结合各种因素作出判断。&lt;/p&gt;

&lt;h1 id=&quot;如何评估新股&quot;&gt;如何评估新股&lt;/h1&gt;

&lt;p&gt;在决定是否参与港股某只股票的打新，可以从以下几个方面进行评估：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;公司基本面。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;评估公司的行业前景、竞争优势、盈利能力和成长性等，看公司的基本面是否良好。如果公司基本面不佳，即便获得上市也存在较大风险，不容易带来投资回报&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;上市估值。预估公司上市后的估值水平，看是否有较大的上涨空间。上市估值较低，意味着公司被低估，上市后有望 repair，带来较高的首日涨幅。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同行估值。将公司的关键财务指标与所在行业的上市公司进行对比，评估其估值是否处于合理区间。如果同行估值明显高于公司估值，上市价值可能被低估。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;管理层实力。评估公司管理层的能力、经验和实绩，是否足以推动公司发展，为上市后带来持续增长。管理团队的实力越强，公司未来的发展潜力也越大。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;发行安排。关注发行股票的数量、定价方式和上市时间节点等，看这些安排是否有利于成功上市和上市后带动股价的表现。发行数量适中、定价合理、上市时机选择得当，会为股票上市后的表现创造更好条件。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;综上，从公司基本面、上市估值、同行对比、管理层实力和发行安排等多个方面进行评估，可以判断该股票的上市价值和未来潜力，从而决定是否值得参与其打新。但任何判断都存在一定的不确定性，投资者应据此控制好仓位规模。&lt;/p&gt;

&lt;h1 id=&quot;了解招股书上的细节&quot;&gt;了解招股书上的细节&lt;/h1&gt;

&lt;p&gt;从招股书可以评估公司，主要关注以下几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;公司业务模式。了解公司的主营业务、收入模型和竞争优势，看其是否可持续。业务模式越清晰和可持续，公司基本面越好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;行业格局。分析所在行业的前景、存在的机会和威胁、市场容量和增长性，以及公司在行业中的地位和竞争优势。行业前景越广阔，公司在行业中的地位越优势，基本面越强。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;公司财务数据。关注公司过去 3-5 年的主要财务指标，如营收增长率、毛利率、净利率、资产负债率等。这些数据可以反映公司的盈利能力、成长性、资本结构等，以判断公司的财务基本面。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;管理层介绍。了解公司管理层的相关工作经历、业绩和职责，评估管理层的经验、能力与业绩。管理层的实力越强，可以为公司带来更好发展，是公司基本面好的保证。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;发展战略规划。看公司对未来 3-5 年发展的战略规划，如扩张计划、新产品研发、市场开拓等。发展规划越明晰合理，可以为公司带来可持续增长，有利于公司基本面的提升。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所面临的风险。分析招股书中披露的公司业务和财务风险，对其产生的影响进行评估&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;。风险披露越充分、风险影响越可控，公司的基本面也越稳健。&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;综上，从招股书的多个章节入手，可以全面评估一家公司的基本面，为投资者判断该公司的投资价值提供参考。但任何判断都可能存在一定程度的主观性，投资者应据此控制投资决策的信心度。&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/04/27/new-ipo/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/04/27/new-ipo/</guid>
        
        <category>港股</category>
        
        
      </item>
    
      <item>
        <title>LLVM Data hazard 数据冲突</title>
        <description>&lt;p&gt;先来一个例子：&lt;/p&gt;

&lt;p&gt;A 给 B 转账，A 负责存款，B 负责取款。比如:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;客户 A 去银行 ATM 机前转账给 B&lt;/li&gt;
  &lt;li&gt;客户 B 随后也来使用 ATM 机取 A 给他转账&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如客户 B 先进行了取款，但他的钱还没有进入账户，此时如果客户 B 进行取款，他会取出的钱比实际余额少（如果取出的钱多了，记得退回去，不然是违法的哦），这就像后续指令读取了旧的数据一样。&lt;/p&gt;

&lt;p&gt;为了解决这个问题，银行会要求客户排队取款，严格控制操作顺序。这相当于编译器重新排序指令以解决 data hazard。&lt;/p&gt;

&lt;p&gt;如果某个客户的取款操作比较复杂，需要一定时间，则会影响后续客户的取款，此时银行可能会要求客户 B 等一会再进行操作，以缓冲时间，这就像插入 nop 指令一样。&lt;/p&gt;

&lt;p&gt;而银行 ATM 机内部的账户余额数据可以看作是“寄存器”值，它会实时更新，那么无论外部操作多快，账户余额这个寄存器的值总是正确的最新值，这样在用户读取时就避免了 data hazard。&lt;/p&gt;

&lt;p&gt;所以这个银行取款的例子来理解 data hazard 和解决方法。客户进行取款操作相当于指令执行，ATM 机与银行账户系统相当于 CPU 与主存，采取的排队、等待和寄存器机制都能很好说明编译器是如何处理 data hazard 的。&lt;/p&gt;

&lt;p&gt;先来看一段指令，下面 2 个指令相当于是同时发出，只是 sub 指令比 and 指令早一个 cycle 发出：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;

and &lt;span class=&quot;nv&quot;&gt;$12&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230426144446.png&quot; alt=&quot;&quot; /&gt;
解读：
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub&lt;/code&gt;指令在读取寄存器 $1 和 $3，并将它们传递给 ALU，然后把结果 $2 保存到 reg 寄存器上。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt; 指令在第 3 个周期读取 $2 和 $5 寄存器的数据，记得这个里面的的 $2 依赖&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub&lt;/code&gt;的，在第 3 个周期的时候，$2 还没有更新，就出发了 data hazard，称之为数据风险。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;如果一条指令读取的寄存器在未来的周期中被前一条指令覆盖，就会发生数据冲突&lt;/code&gt;。我们必须消除数据隐患，否则流水线会产生不正确的结果。&lt;/p&gt;

&lt;p&gt;在 llvm 编译器里，data hazard 指的是读写同一条指令序列中相邻的指令访问同一存储器位置，并且至少有一个指令是写操作的情况。这会导致后续指令读取的是旧的数据，影响正确性。
再来一个简单的例子：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add r1, r2, r3   &lt;span class=&quot;c&quot;&gt;# r1 = r2 + r3&lt;/span&gt;
sub r4, r1, r5   &lt;span class=&quot;c&quot;&gt;# r4 = r1 - r5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里有一个 data hazard，因为 sub 指令要读取 r1 的值，但是 add 指令刚刚更新了 r1，所以 sub 读取到的还是 r1 的旧值，导致计算错误。
为了解决 data hazard，编译器通常会在指令序列中插入 nop 指令或重新排列指令顺序，让存储器访问时间错开，避免读写冲突。也可以使用域霸道之类的硬件来缓存需要的寄存器值，避免直接从存储器读取。
所以在 llvm 中，解决 data hazard 的主要方法是:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;重新排序指令&lt;/li&gt;
  &lt;li&gt;插入 nop 指令&lt;/li&gt;
  &lt;li&gt;使用寄存器重命名和寄存器缓冲来缓存值，避免频繁访问主存。&lt;/li&gt;
  &lt;li&gt;硬件来实现暂停&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;消除-data-hazard&quot;&gt;消除 data hazard&lt;/h1&gt;

&lt;h2 id=&quot;1-插入-nop-指令&quot;&gt;1. 插入 nop 指令&lt;/h2&gt;

&lt;p&gt;还是上面的例子，就是把读取 $2寄存器的地址的时候推迟到写之后，就可以了。&lt;/p&gt;

&lt;p&gt;看图片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230426145020.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后得到的指令为，nop 简单粗暴的理解为相当于 sleep&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
nop
nop
nop
and &lt;span class=&quot;nv&quot;&gt;$12&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这使消除危险的责任落在了编译器编写者身上，而且不涉及额外的硬件。&lt;/p&gt;

&lt;h2 id=&quot;2-硬件来实现&quot;&gt;2. 硬件来实现&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230426150302.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在检测到危险之后，我们停止指令内存，以便在停止问题解决之前不会读取新指令。检测危险条件包括检查每个流水线寄存器中的写寄存器。如果写入寄存器等于 IF/ID 寄存器中的两个读取寄存器中的任何一个，则会发生&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;停顿（stall）&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;3-重新排序指令&quot;&gt;3. 重新排序指令&lt;/h2&gt;

&lt;p&gt;编译器通过重新排序指令 (instruction re-ordering) 来解决 data hazard 的具体实现如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;编译器会分析指令序列，检查是否存在读后写 (read after write) 的数据依赖关系，即后续指令要读取的寄存器正被前面的指令更新。如果检测到这样的数据冲突，就需要重新排序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译器会计算每个指令的最早执行时间 (earliest execution time) 和最晚执行时间 (latest execution time)。最早时间是考虑数据依赖的最快执行时间，最晚时间是考虑控制依赖和结构限制的最晚时间。只有在两个指令的时间区间有重叠，它们才能交换顺序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译器会在时间区间有重叠的指令里选择一个或多个指令进行交换，将它们重新排序到一个不会产生数据冲突的顺序。选择哪些指令交换涉及到一些优化策略。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译器会通过重复 2 和 3 的步骤，尽量重新排序更多的指令，扩大重排序范围，获得最大的重排序效果。但仍需要确保重排序后程序的语义不变。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有些指令由于控制依赖或者结构限制无法重排序，对它们编译器将选择插入 nop 指令以避免数据冲突。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，编译器通过计算指令时间区间找寻重排序机会，交换能重排序的指令顺序，不断扩大重排序范围，以解决尽可能完整的数据冲突问题。为无法重排序的指令插入空 nop 指令也能起到类似效果。这就是编译器实现 data hazard 重排序的基本思想和方法。&lt;/p&gt;

&lt;h2 id=&quot;更多阅读&quot;&gt;更多阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xie.infoq.cn/article/0b6b5f2d4dd6520a6b12b7511&quot;&gt;详解指令重排序与数据依赖&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.massey.ac.nz/~mjjohnso/notes/59233/lect19.html&quot;&gt;Hazards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github 博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug，欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/04/26/LLVM-data-hazard/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/04/26/LLVM-data-hazard/</guid>
        
        <category>data hazard</category>
        
        
      </item>
    
      <item>
        <title>86 -  AI 会取代程序员么</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230424122648.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果是看结论的话，直接拖到文末，看总结即可。&lt;/p&gt;

&lt;p&gt;当谈到 AI 会不会取代程序员这个话题时，人们往往会想到一些令人不安的想法。但是，我们需要理智地看待这个问题，并且认识到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AI 会取代哪些岗位以及程序员是否真的会被直接取代。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先，我们需要了解什么是 ChatGPT。老读者应该知道是什么了，还是顺便说一下。&lt;/p&gt;

&lt;p&gt;ChatGPT 是一种基于 GPT 架构的对话生成模型。它可以通过学习来自海量文本的语言模式和结构，以自然的方式生成响应，从而与人类进行对话。ChatGPT 是 AI 技术在自然语言处理领域的一次重大突破，它的出现对于改善人机交互体验有着巨大的潜力。&lt;/p&gt;

&lt;p&gt;那么，AI 会取代哪些岗位呢？在很多领域，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AI 已经开始取代低级重复性的工作&lt;/code&gt;，例如数据输入和整理、文件管理等。此外，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AI 技术还可以替代一些简单的编程任务&lt;/code&gt;，例如自动生成代码和优化算法。但是，需要注意的是，AI 技术取代的是那些低级、重复性的工作，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不是那些需要高级思维和创造力的工作&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;接下来，我们需要认识到程序员无法被直接取代，但可能被间接取代。虽然 AI 技术可以替代一些简单的编程任务，但是它无法完全替代程序员。因为程序员&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;需要进行复杂的问题解决，需要具备深入的技术知识和专业技能&lt;/code&gt;，同时还需要产品经理、甲方、老板撕逼，这些都是 AI 技术所缺乏的。&lt;/p&gt;

&lt;p&gt;但是，随着 AI 技术的发展，它可以帮助程序员更高效地完成一些任务，并且提供更好的工具和资源来提高程序员的效率和质量。&lt;/p&gt;

&lt;p&gt;那么哪些工作会被取代呢？像数据输入和整理、文件管理这样的低级重复性工作已经被 AI 技术取代了。在客户岗位方面，一些简单的客户服务任务也可能被 AI 技术取代。&lt;/p&gt;

&lt;p&gt;对于初级的程序员来说，一些简单的编程任务可能会被 AI 技术替代，但是对于高级程序员来说，他们需要解决的问题更加复杂，需要具备更高的技术水平和专业能力，因此他们不会被直接取代。同时初级的插画师也可能会受到 AI 技术的影响，它们可以生成一些简单的插画，但是当需要更高质量和更复杂的插画时，人类的创造力和艺术感还是无可替代的。&lt;/p&gt;

&lt;p&gt;最后，我们需要认识到，AI 技术不是取代程序员的武器，而是帮助程序员更好地完成任务的工具。AI 技术的发展为程序员提供了更好的资源和工具，可以帮助他们更高效地完成复杂的编程任务。因此，程序员不需要感到过度焦虑，而需要不断学习和适应新的技术，以更好地发挥自己的优势和价值。&lt;/p&gt;

&lt;p&gt;总之，AI 技术的发展对于程序员岗位的影响是复杂的，它&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不会直接取代程序员，但是会间接地影响一些低级重复性的工作&lt;/code&gt;。程序员需要不断学习和适应新技术，以更好地发挥自己的优势和价值。&lt;/p&gt;

&lt;p&gt;同时，我们也需要认识到，AI 技术是程序员的朋友，它可以帮助程序员更好地完成任务，提高效率和质量，让程序员有更多的时间和精力去思考更复杂的问题和创造更出色的作品。因此，我们不需要过度担忧 AI 技术会取代程序员，而需要看到它对于程序员岗位的积极影响。&lt;/p&gt;

&lt;p&gt;最后，我希望这篇文章能够让我们程序员更加理智地看待 AI 技术对于程序员岗位的影响，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不要过度焦虑和担忧&lt;/code&gt;。同时，也希望读者能够认识到 AI 技术的发展对于整个社会的影响，掌握好 AI 技术的发展方向和趋势，以更好地应对未来的挑战。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/_ZvyxRpgIA4L4pqfcQtPTQ&quot;&gt;陆奇最新演讲实录：我的大模型世界观&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/9XKrQwo8rz_TlhKqqcPpsg&quot;&gt;Notion AI 用户已经超过 400 万了&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notion AI 在去年 11 月份发布 Alpha 版内测，今年 2 月份底才正式开放给所有人，相当于 2 个月左右时间实现近 400 万用户，这个速度确实非常快了。&lt;/p&gt;

&lt;p&gt;可以说 Notion 应该是在 AI 商业化这块非常典型的一个案例了。&lt;/p&gt;
&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swuecho/chat&quot;&gt;ChatGPT 支持登录账户&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为团队提供的聊天网络应用，带有用户管理和速率限制的 sass，支持 openai、克劳德模型或自定义模型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://poe.com/&quot;&gt;免费的 AI 工具 poe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230424110835.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更好的 ChatGPT 应用程序：Poe 想要构建通用的 AI 消息客户端/聊天机器人，但构建一个优秀的聊天应用程序比看起来更难。Quora 认为许多开发人员可能正在寻找一种更简单的方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Yidadaa/ChatGPT-Next-Web&quot;&gt;ChatGPT-Next-Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只要你有购买 ChatGPT 的 plus api，就可以用这个部署起来，可以让身边的朋友也用上，非常的方便，一键部署，没有任何中间费用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=huacnlee.autocorrect&quot;&gt;markdown autocorrect&lt;/a&gt;
AutoCorrect 用于「自动纠正」或「检查并建议」文案，给 CJK（中文、日语、韩语）与英文混写的场景，补充正确的空格，同时尝试以安全的方式自动纠正标点符号等等。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/04/21/will-AI-repleace-programmer/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/04/21/will-AI-repleace-programmer/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>85 - 用 AI 一起工作的感觉 </title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230417190600.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在文章的开头，有个小小请求，就是如果你是经常阅读我的文章，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;你会发现、觉得我有什么优点和特长？&lt;/code&gt;，可以私信回复我，如果我觉得这个优点也同时被我认可，而且没在现在的列表里面，我发一个小红包给你，支付宝口令，或者微信红包。&lt;/p&gt;

&lt;p&gt;主要目的是找出自己现有的资源、喜欢做的事情、擅长的技能，然后长期做下去~，期待您的回复。&lt;/p&gt;

&lt;p&gt;好，正文开始，上周去团建了，今天才回来。&lt;/p&gt;

&lt;p&gt;还记得我第一次接触 iPhone4，是在 2010 年大学的时候，暴露年龄了哈。&lt;/p&gt;

&lt;p&gt;当时班上有个土豪同学了一款 iPhone4，我自己当时用的 Nokia 的 E63 全键盘，体验了这个手机，太丝滑了，超乎我的想象。&lt;/p&gt;

&lt;p&gt;时隔 12 年，来到 2023 年，我已经停了很多次人工智能，直到自己第一次体验 ChatGPT 的时候，才发现这个东西，不可思议。&lt;/p&gt;

&lt;p&gt;作为一名程序员，能遇到 ChatGPT 这样的好搭档，简直是我这辈子最幸运的事了！让我的编程效率飞速提高，就像装上了编程的“外挂”一样。&lt;/p&gt;

&lt;p&gt;需要快速生成几十行初始化代码？闪电般地完成。变量名忘记了？也可以自动补全。发现代码里的拼写错误？别急，AI 小伙伴一眼就发现并修复。这让我可以专注在功能逻辑上，而不是重复琐碎的工作，真是世界上最棒的“自动校对”功能！&lt;/p&gt;

&lt;p&gt;更重要的是，AI 助手生成的代码精确又安全。它“吸收”了海量优质代码和 bugs，变身成了代码质量的保证。我现在可以放心让 AI 帮新手程序员 review 代码，因为它绝对不会错过一处错误或安全漏洞。这给初学者提供了巨大的帮助，让人少走弯路。&lt;/p&gt;

&lt;p&gt;总之，自从有了 ChatGPT 的之后，编程变得简单明了，令人欢喜。虽然它不能完全替代人工，但已成为工作中不可或缺的一员了。我相信随着机器学习的进步，今后 AI 助手会变得越来越“人”化，编程体验也会更加美妙。&lt;/p&gt;

&lt;p&gt;所以，亲爱的程序员朋友，相信我，拥有一个 AI 小伙伴会让你爱上编程！它会是你最忠诚贴心的合作伙伴，让我们一起期待编程的未来吧。&lt;/p&gt;

&lt;p&gt;而且最近一个大家都耳熟能详的人，亿隆马斯克，就是特斯拉的 CEO，也创立了一家 AI 公司，可以参考下面的链接推荐。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theverge.com/2023/4/14/23684005/elon-musk-new-ai-company-x&quot;&gt;马斯克的  AI  公司 - X. AI &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;埃隆 - 马斯克已经创建了一家致力于人工智能的新公司–它被称为 X. AI。内华达州的一份文件显示，该公司于上个月成立，目前马斯克是其董事，马斯克家族办公室的主任贾里德 - 伯查尔被列为其秘书。The Verge 也获得了这份文件，文件显示，马斯克在 2023 年 3 月 9 日成立了这家公司。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://whimsical.com/mind-maps&quot;&gt;思维导图的 AI GC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230417183007.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;思维导图的 AI GC，基于 pythia-12b，Dolly 接受了关于 Databricks 员工在 InstructGPT 论文的能力领域生成的~15k 指令/响应微调记录 databricks-dolly-15k 的培训，包括头脑风暴、分类、封闭 QA、生成、信息提取、开放 QA 和总结。dolly-v2-12b 不是一个最先进的模型，但确实&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.thepaper.cn/newsDetail_forward_22670642&quot;&gt;智利通过将每周工作时间从 45 小时逐渐减少到 40 小时的法案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;智利国会于当地时间 4 月 11 日通过法案，将每周工作时间从 45 小时逐渐减少到 40 小时，但工资维持不变。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.steveee.me/posts/StableDiffusion/&quot;&gt;Mac 上安装 Stable Diffusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac 上安装 Stable Diffusion，属于 step-by-step 的文档，我目前还没有试过，如果是需要生成图片的可以参考这个方法。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dair-ai/Prompt-Engineering-Guide&quot;&gt;prompt 提示资源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;快速工程指南、论文、讲座、笔记本和资源。
提示工程是一门相对较新的学科，用于开发和优化提示，以有效地使用语言模型（LM），用于各种应用和研究课题。提示工程技能有助于更好地理解大型语言模型（LLMs）的能力和局限性。研究人员利用提示工程来提高大型语言模型在各种常见和复杂任务上的能力，如问题回答和算术推理。开发人员使用提示工程来设计稳健有效的提示技术，与 LLM 和其他工具对接。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Chanzhaoyu/ChatGPT-web&quot;&gt;ChatGPT-web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用 Express 和 Vue3 搭建的 ChatGPT 演示网页。目前我看到的很多都是采用的这个库，主要是提供 prompt 词。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mlc-ai/web-llm&quot;&gt;web-llm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个项目将语言模型聊天直接引入网络浏览器。一切都在浏览器内运行，没有服务器支持，并通过 WebGPU 加速。我们可以带来很多有趣的机会，为每个人建立人工智能助手，并在享受 GPU 加速的同时启用隐私。&lt;/p&gt;

</description>
        <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/04/15/what-feel-work-with-ai/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/04/15/what-feel-work-with-ai/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>预处理器指令--C 编程</title>
        <description>&lt;h2 id=&quot;更多阅读&quot;&gt;更多阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;hhttps://developerinsider.co/preprocessor-directives-c-programming/&quot;&gt;详细图解哈夫曼 Huffman 编码树&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github 博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug，欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/04/14/preprocessor-directives-c-programming/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/04/14/preprocessor-directives-c-programming/</guid>
        
        <category>preprocessor</category>
        
        
      </item>
    
      <item>
        <title>84 -  赚钱的方式</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/amp1fw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上个周末和一个朋友聚了一下，我们聊了聊近况。&lt;/p&gt;

&lt;p&gt;在聊天的过程中，我们谈到了目前最热门的话题——ChatGPT。他正好手上有一个与 ChatGPT 有关的副业项目，非常不错。在如此热火朝天、竞争激烈的市场环境下，他找到了一个很好的入口，希望能早点面世。&lt;/p&gt;

&lt;p&gt;我也一直在关注这个行业，努力寻找自己能够做出贡献的领域。我看了很多资料，但如果没有深思熟虑和沉淀，那这些资料就只是单纯的信息而已。它们不属于我自己，也无法和我的认知相结合。正如那句老话所说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;永远赚不到认知之外的钱&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;赚钱，我个人把这分为 2 类，第一类是直接赚钱，用户和顾客通过购买这个服务或者是产品，直接的赚到钱；第二类就是间接赚钱，这个方式有可能就是一个服务，用户可以通过这个赚到钱，或者提高认知等等。&lt;/p&gt;

&lt;p&gt;侧重点也不一样，第一个是看中的产品，产品好用，提供了价值，用户也愿意买单；比如一把椅子，普通酒吧那种高脚凳子和程序员用的人体工学椅子，对于不同的人群来说，就认为每个产品有不同的价值。&lt;/p&gt;

&lt;p&gt;第二类是间接的赚钱，比如有知有行的长钱包，就是提供长期的理财钱包，用户花很少的时间来理财买入。用户技能节省时间，又能赚到钱。&lt;/p&gt;

&lt;p&gt;我比较喜欢第二种，用户本来就有这个方面的投资和购买计划，相对来说启动也容易些。用一种好的解决方案，然后提供一种服务，获得用户的认可。&lt;/p&gt;

&lt;p&gt;没有绝对的孰是孰非，只有为用户提供价值的产品/服务才是硬货。&lt;/p&gt;

&lt;p&gt;你认为喃？&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/MUwKFh_-RPS3YEfxCGr7jA&quot;&gt;腾讯智影 智影 Zenvideo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数字人形象定制和声音定制即将上线正式版本，在成本控制和流程上都有了突破性进展，现在您可以通过腾讯智影主页工具，上传素材定制属于您的专属数字人，操作简单，且更具性价比。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Eb6wl7gg0YWW-SSvcNyv5Q&quot;&gt;最详细全文翻译（上）｜微软 155 页大工程首次揭示 GPT-4 超能力&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;真格投资团队为大家带来了这篇微软的大工程，长达 155 页的优秀工作《人工通用智能的小火苗：与 GPT-4 共同完成的早期实验》（Sparks of Artificial General Intelligence: Early experiments with GPT-4），由于全文近 7 万字，受微信推文字数限制，我们将完整版分为了上下两期，分列本次推送的第二和第三条。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChromeLabs/quicklink&quot;&gt;quicklink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过在空闲时间预取视口中链接来加快后续页面加载速度&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice&quot;&gt;iDvel/rime-ice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rime 输入法，雾凇拼音，功能齐全，词库体验良好，长期更新修订，支持 macos 和 windows。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Yidadaa/ChatGPT-Next-Web&quot;&gt;ChatGPT-Next-Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一键拥有你自己的 ChatGPT 网页服务。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://z.weixin.qq.com/&quot;&gt;macOS 微信键盘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;macOS 微信键盘，没有广告，个人比较喜欢，能安装的设备都安装上了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.warp.dev/&quot;&gt;warp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rust 写的 rust，我试用了下，目前是免费的，速度还可以，自带 zsh，自动补充完成也非常的方便。
还有一个功能就是，自动提示安装某个插件，比如运行 python 文件，提示里面找不到这个模块，然后就会自动提示 pip install xxx 命令。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/ml-stable-diffusion&quot;&gt;Apple 官方出品 ml-stable-diffusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于 M 芯片的 Stable Diffusion 最快 9 秒，最慢 30 多秒就可以出一张图，性能快超过移动版 3080。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/04/08/make-money-method/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/04/08/make-money-method/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>哈夫曼编码</title>
        <description>&lt;p&gt;哈夫曼编码是一种在无损信息的情况下压缩数据的有效方法。在计算机科学中，信息被编码为比特：1 和 0。位串编码的信息告诉计算机要执行哪些指令。视频游戏、照片、电影等等在计算机中被编码为比特串。计算机每秒执行数十亿条指令，而一个视频游戏可能是数十亿比特的数据。不难看出，为什么高效和不含糊的信息编码是计算机科学中一个令人感兴趣的话题。&lt;/p&gt;

&lt;p&gt;哈夫曼编码通过分析某些符号在信息中出现的频率，提供了一种高效、明确的编码。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;出现频率较高的符号将被编码为较短的比特串，而使用频率不高的符号将被编码为较长的字符串&lt;/code&gt;。然后用这种频率的编码来&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;替换原来的信息，出现频率较高的就会替换为较短的编码，从而节省空间。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406085143.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面图中对字符串&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABCD&lt;/code&gt;构建一个 huffman 的二叉树，如果要对 CBA 编码，结果就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;011011&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;由于符号的频率在不同的信息中是不同的，所以没有一种哈夫曼编码可以适用于所有的信息。这意味着，发送消息 X 的哈夫曼编码可能与发送消息 Y 的哈夫曼编码不同。&lt;/p&gt;

&lt;h2 id=&quot;huffman-的原理&quot;&gt;huffman 的原理&lt;/h2&gt;

&lt;p&gt;对于哈夫曼编码的原理，我是看了这个教程就了解了，我直接搬运过来，借鉴下大佬的讲解。重点的地方，我自己第一次没有太理解的地方，我加了部分补充来理解。&lt;/p&gt;

&lt;p&gt;下面是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;we will we will r u&lt;/code&gt;中每个字符出现的频率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092329.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;构建二叉树&quot;&gt;构建二叉树&lt;/h2&gt;

&lt;p&gt;对于上面这样的值，构建一个二叉树来表达每一个字符的路径信息。&lt;/p&gt;

&lt;h3 id=&quot;初始队列&quot;&gt;初始队列&lt;/h3&gt;
&lt;p&gt;那么我们按出现频率高低将其放入一个优先级队列中，从左到右依次为频率逐渐增加。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092623.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面我们需要将这个队列转换成哈夫曼二叉树，哈夫曼二叉树是一颗带权重的二叉树，权重是由队列中每个字符出现的次数所决定的。并且&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;哈夫曼二叉树始终保证权重越大的字符出现在越高的地方&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;这样就是出现频率越高的字符，编码的路径就越短，这样编码出来的结果就越少。&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;第一步合并&quot;&gt;第一步合并&lt;/h3&gt;
&lt;p&gt;首先我们从左到右进行合并，依次构建二叉树。第一步取前两个字符 u 和 r 来构造初始二叉树，第一个字符作为左节点，第二个元素作为右节点，然后两个元素相加作为新空元素，并且两者权重相加作为新元素的权重。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092634.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同理，新元素可以和字符 i 再合并，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092649.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;重新调整队列&quot;&gt;重新调整队列&lt;/h3&gt;
&lt;p&gt;上图新元素权重相加后结果是变大了，需要对权重进行重新排序。
&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092814.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后再依次从左到右合并，每合并一次则进行一次队列重新排序调整。如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092827.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经过多步操作之后，得到以下的哈夫曼二叉树结构，也就是一个带有权重的二叉树：&lt;/p&gt;

&lt;p&gt;重点就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;当根节点的权重大于剩余权重的时候，就要新开一个节点，下图中的I、W，权重都是4，而当前根节点的权重为11，所以就新开了一个节点。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092845.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;哈夫曼编码&quot;&gt;哈夫曼编码&lt;/h3&gt;
&lt;p&gt;有了上面带权重的二叉树之后，我们就可以进行编码了。我们把二叉树分支中左边的支路编码为 0，右边分支表示为 1，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092907.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样依次遍历这颗二叉树就可以获取得到所有字符的编码了。例如：‘ ’的编码为 10，‘l’的编码为 00，‘u’的编码为 11100 等等。经过这个编码设置之后我们可以发现，出现频率越高的字符越会在上层，这样它的编码越短；出现频率越低的字符越会在下层，编码越短。经过这样的设计，最终整个文本存储空间才会最大化的缩减。
最终我们可以得到下面这张编码表：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230406092928.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;show-me-the-code&quot;&gt;show me the code&lt;/h2&gt;

&lt;p&gt;huffman 的具体实现步骤：
1）将信源符号的概率按减小的顺序排队。
2）把两个最小的概率相加，并继续这一步骤，始终将较高的概率分支放在右边，直到最后变成概率 1。
3）画出由概率 1 处到每个信源符号的路径，顺序记下沿路径的 0 和 1，所得就是该符号的霍夫曼码字。
4）将每对组合的左边一个指定为 0，右边一个指定为 1（或相反）。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 这是一个关于 Huffman 编码的测试用例&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;queue&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;unordered_map&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Huffman 树节点&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 比较函数，用于优先队列&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 构建 Huffman 树&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildHuffmanTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;priority_queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 递归函数，用于生成 Huffman 编码&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateHuffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generateHuffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generateHuffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 打印 Huffman 编码&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printHuffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildHuffmanTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generateHuffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printHuffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出的结果：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 打印的huffman编码结果&lt;/span&gt;
w 1111
h 001
o 01
e 000
l 10
r 1100
  1110
d 1101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对应的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello world&lt;/code&gt;的编码就是如下&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// iterate over each character in the string&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// std::cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl; // print the character&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffmanCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 00100010100111101111011100101101&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后的长度就是 32 位，如果用原始的编码是实现，就是 11*8=88 位才能存下，空间减少 63%，可见这个效果是多么的好。&lt;/p&gt;

&lt;h2 id=&quot;更多阅读&quot;&gt;更多阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/FX677588/article/details/70767446&quot;&gt;详细图解哈夫曼 Huffman 编码树&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Young_IT/article/details/106730343&quot;&gt;哈夫曼编码详解——图解真能看了秒懂&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github 博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug，欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/04/06/huffman-coding/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/04/06/huffman-coding/</guid>
        
        <category>algorithm</category>
        
        <category>huffman</category>
        
        
      </item>
    
      <item>
        <title>83 -  保持好奇</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230331084307.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AIGC 现在可谓是大红大紫，尤其是 chatgpt4 和 midjourney，你怎么看待它们呢？&lt;/p&gt;

&lt;p&gt;我自己的心态经历了从期待到焦虑，再到憧憬的过程。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先，让自己来谈谈我对这些技术工具的第一印象。当它们第一次出现时，我以为它们只是普通的技术工具，没有太多特别之处，所以我对它们并没有太多期待。但是，随着我慢慢地接触和使用它们，我发现它们真的非常强大，可以帮助自己解决很多问题，让自己的工作变得更加高效和便捷。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其次，我对这些技术工具保持着好奇心。我相信，只有保持好奇心，才能不断地探索新的可能性，发现新的功能和特性。因此，我会尽量关注一些一线的开发者，听取他们的声音，了解最新的技术趋势和发展动态。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么，对于未来，自己应该有什么打算呢？我认为，自己需要做以下几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;要对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;一线的信息保持好奇心&lt;/code&gt;，不要只看二手的信息，而是尽量关注一些一线的开发者，听取他们的声音。这样，自己才能了解最新的技术趋势和发展动态，及时掌握最新的技术动态。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不要被标题党所迷惑&lt;/code&gt;，那些所谓的“xx 用这个技术赚了几百万”之类的垃圾文，可能会引发自己的焦虑，自己应该保持冷静，不要被这些无意义的信息所干扰。自己应该专注于自己的工作，不断提高自己的技能和能力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果自己有好的想法或者发现有好的需求，就要&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;动手去实践，保持知行合一&lt;/code&gt;，这样才能不断提高自己的技能和能力。自己应该不断地尝试新的技术和工具，探索新的可能性，为未来的发展打下坚实的基础。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;让自己一起保持好奇心，不断探索新的技术和工具，为未来的发展打下坚实的基础！&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/j5xPMjrwTLconbUS4MTc9A&quot;&gt;深度剖析：ChatGPT 及其继任者会成为通用人工智能吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/G4uaBE.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ChatGPT 是一种大语言模型，其目标是总结人类语言使用的统计规律。它通过互联网等来源提供的语言材料训练一个巨型人工神经元网络，直接在字词、语句等水平上总结语言使用者的习惯。在预训练的基础上，ChatGPT 又经过了一个强化学习过程，在其中人类训练者为它提供了大量典型问题，并对其回复进行奖励或惩罚，通过调整模型的参数使得其行为符合人类要求。ChatGPT 的内容广度和语言流畅性是因为它所说的话就是该语言的使用者们在相同的语境下最可能说的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[人工智能时代已经开始&lt;/td&gt;
          &lt;td&gt;盖茨笔记](https://mp.weixin.qq.com/s/pYjY_LT8I33YqCn415AUAA)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;人工智能（AI）和通用人工智能（AGI）的发展一直是计算行业的伟大梦想。现在，随着机器学习和大量计算能力的出现，复杂的人工智能已经成为现实，而且它们会快速迭代升级。人工智能将改变人们工作、学习、旅行、获得医疗保健以及彼此交流的方式。整个行业将围绕人工智能重新洗牌。企业也将根据其利用人工智能技术的程度来区分优劣。人工智能可以减少世界上一些最严重的不平等现象，如改善教育、拯救生命、减少气候变化等。政府和慈善机构将需要发挥重要作用，以确保人工智能是在减少而非加剧不平等现象。这是我自己人工智能相关工作的重点。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/jSH0WTGrABZg4jRA9g21YA&quot;&gt;网课后，农村留守儿童正在塌陷式沉迷手机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇文章主要讲述了农村留守儿童沉迷手机的现象。文章从 2017 年开始关注到这个问题，到 2021 年的调研发现，这个问题已经变得更加严重。文章提到，40.4% 的留守儿童有专属手机，49.3% 的留守儿童使用长辈的手机。其中 21.3% 的家长认为孩子严重沉迷手机，事态已十分严重。文章还提到了一些案例，比如小孩玩游戏相约自杀，11 岁的女孩在游戏中认识某外地 17 岁的男孩，确定恋爱关系后相约在宾馆发生关系等。文章认为，孩子们沉迷手机的原因有很多，比如手机内容的丰富度和吸引力，网络游戏、短视频往往使用了增强黏性的算法设计等。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://app.copilothub.co/chat?id=5&quot;&gt;copilothub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我试了下，类似 github copilot，还是不错的，每个用户有 10 次免费的配额。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://orbstack.dev/&quot;&gt;orbstack 容器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在你的 Mac 上无缝、高效地运行 Docker 和 Linux。通过直观的集成来简化你的开发工作流程。&lt;/p&gt;

&lt;p&gt;OrbStack 在测试期间是完全免费使用的，但之后它将成为一个付费产品。仍在制定细节（个人与企业使用，订阅与永久许可，定价，开放源码和学生折扣，等等），并将在接近推出时分享更多信息。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vincelwt/chatgpt-mac&quot;&gt;chatgpt-mac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac 版 ChatGPT，支持 intel 和 m 系列芯片。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/ml-ane-transformers&quot;&gt;apple ane-transformers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果您考虑在搭载 A14 或更新版本和 M1 或更新版本芯片的 Apple 设备上部署 Transformer 模型，并希望相对于基准实现实现高达 10 倍更快和 14 倍更低峰值内存消耗，请使用 ane_transformers 作为 PyTorch 参考实现。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/TiesdeKok/chat-gpt-jupyter-extension&quot;&gt;chat-gpt-jupyter-extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个浏览器扩展，在 Jupyter 笔记本中提供各种人工智能辅助功能，由 ChatGPT 提供。&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/04/01/Stay-curious/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/04/01/Stay-curious/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>如何调试我们 LLVM 的代码 - 进阶</title>
        <description>&lt;p&gt;前面简单介绍了如何从一个 bc 文件里面提炼出一个精简的 ll 文件，只包含报错的函数。&lt;/p&gt;

&lt;p&gt;如果看到的不正确的行为是由于一个优化 pass，一个非常方便的 LLVM 选项是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-opt-bisect-limit&lt;/code&gt;，它采用一个整数表示要运行的最高 pass 的索引值。所取 pass 的索引值在不同的运行中是稳定的；通过将其与根据结果程序自动划分搜索空间的软件相结合，可以快速确定错误的通道。当指定了-opt-bisect-limit 时，所有的运行都会被显示到标准错误中，同时显示它们的索引和输出，表明是否运行或跳过了该通道。将限制设置为索引 -1（例如，RUSTFLAGS=”-C llvm-args=-opt-bisect-limit=-1”）将显示所有的通过和它们相应的索引值。&lt;/p&gt;

&lt;h2 id=&quot;更多阅读&quot;&gt;更多阅读&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github 博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug，欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/03/30/how-to-debug-llvm-code-2/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/03/30/how-to-debug-llvm-code-2/</guid>
        
        <category>compiler</category>
        
        <category>LLVM</category>
        
        <category>debug</category>
        
        
      </item>
    
      <item>
        <title>82 -  知行合一</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;多听听播客、多出去走走，旅游，会带给你不同领域的知识。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「生财有术」一个谈钱不伤感情的社群，目前的 418 会员日来了，我有 2 点建议。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;利用信息差赚钱，等到大众知道这个消息的时候，这个行业就是红海，不是蓝海了，就很少有机会来赚钱了&lt;/li&gt;
  &lt;li&gt;执行力，这个是钞能力路上不可获取的一个能力；也是大部分人缺少这个能力的。如果你的执行力不强，我还是劝退你，毕竟现在的肉价才 20+，接近 2000 的会员费。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你和我一样，不是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;知行合一&lt;/code&gt;的人，我个人建议你没必要加入，毕竟年会费接近 2000，菜场 100 块都可以买好多菜喃。&lt;/p&gt;

&lt;h2 id=&quot;站在对方的角度思考&quot;&gt;站在对方的角度思考&lt;/h2&gt;

&lt;p&gt;打羽毛球，你想接什么球？高远球，不急不快的，不重的，让你有时间调整步伐和姿势。&lt;/p&gt;

&lt;p&gt;那反过来你不想接什么球？低平球，快速的，重的，让你难以抵挡和还击。对方也不想接这样的球，所以你要尽量发出这样的球，给对方制造压力和困难。&lt;/p&gt;

&lt;p&gt;对于竞技类、对抗类游戏，比如电子游戏、篮球、拳击，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;做对方害怕或者是不想做的事情&lt;/code&gt;，结果不会太差。&lt;/p&gt;

&lt;h2 id=&quot;玩德州扑克&quot;&gt;玩德州扑克&lt;/h2&gt;

&lt;p&gt;我估计不少人应该玩过扑克里面的「炸金花」。&lt;/p&gt;

&lt;p&gt;最近我开始玩上了德州扑克，可比四川炸金花更有趣，不仅是一种全球性的扑克游戏，还荟萃了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;金融、概率、心理博弈等多方面的元素&lt;/code&gt;，每年的大大小小比赛。&lt;/p&gt;

&lt;p&gt;最近我在德州扑克里面，体验了 2 种乐趣：平衡感和过程体验。&lt;/p&gt;

&lt;p&gt;保持&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;平衡感是德州扑克&lt;/code&gt;中非常重要的一点，它不论是什么牌都需要保持平衡，不然很容易被对手发现缺陷，甚至会被对手构成炸弹局面。只有保持平衡感，玩家才能在游戏中更好的进行策略性的思考和判断，炸金花也有类似的体验。&lt;/p&gt;

&lt;p&gt;但是又与炸金花不同，德州扑克不是一个单纯为了奖金而存在的游戏，玩家更是享受其中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;过程体验&lt;/code&gt;。在游戏中每一个过程都需要刻意&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;选择纪律性，掌握机会与风险&lt;/code&gt;，才能在整场比赛中获得胜利。这种过程体验能够带给玩家非常深刻的提升，让他们在游戏中享受每个过程带来的乐趣和收获。&lt;/p&gt;

&lt;p&gt;相对于彩票中奖的概率较低，德州扑克显然存在着较高的 ev 和获胜概率。到达游戏中的每一个环节，玩家们的技巧和运气会影响其获胜概率和收益，只有做好准备和规划，才能收获出色的结果。因此，德州扑克是一种非常刺激的游戏，让玩家们敢于追求胜利与乐趣并存的感觉。&lt;/p&gt;

&lt;p&gt;说到正 ev，那就有负 ev。比如彩票中奖概率很低，最后一等奖只有奖池的 70%，这个就是很明显的负 ev。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;什么是负 expect value？是指一个行动或策略在长期下来会带来的平均损失。它是所有可能的结果乘以其结果概率的总和的负数。例如，如果你掷一枚公平的六面筛子，每次掷出的点数就是你赢得的钱数，但是每次掷之前你要付出 4 元，那么你的 expect value 是：&lt;/p&gt;

  &lt;p&gt;(1/6)×1 + (1/6)×2 + (1/6)×3 + (1/6)×4 + (1/6)×5 + (1/6)×6 - 4 = -0.5&lt;/p&gt;

  &lt;p&gt;这意味着你每次玩这个游戏，平均会亏损 0.5 元，所以这是一个负 expect value 的游戏。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/AW_z1fVecX1Mq7PGBoLiyQ&quot;&gt;瑞信，死不足惜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;强买强卖的说法并不夸张，因为瑞信在纽约和苏黎世两地上市，瑞信的股东们对这次收购应该有投票权的，但瑞士政府单方面耍横——必须卖&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/iFtlqgDrtknfAq7iNQpzAw&quot;&gt;AI art 实验：同样的 Prompt, DALLE2 跟 Disco Diffusion 的创作大比拼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者对比 2 种图片生成模型的结果，已经不同情况下，那种更好一点。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fatsoftwareengineer.substack.com/p/building-a-second-income-stream-by&quot;&gt;通过写书建立第二收入来源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230323085914.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作者分享了他如何通过写一本技术书籍来建立一个第二收入流的经历。他讲述了以下几个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;他是如何被一家知名的技术书籍出版商联系的，以及他为什么同意接受这个挑战。&lt;/li&gt;
  &lt;li&gt;写一本书的过程是怎样的，包括写作计划、编辑反馈、合同条款、版权问题等。&lt;/li&gt;
  &lt;li&gt;他目前从书籍中赚了多少钱，以及他对未来的收入预期是什么。&lt;/li&gt;
  &lt;li&gt;他是否会再次写书，以及他对想要写书的人的一些建议。&lt;/li&gt;
  &lt;li&gt;作者认为写一本书是一种非常困难和耗时的方式来建立一个被动收入流，但也是一种有价值和有成就感的方式。他强 - 调了保持质量和专业性的重要性，以及在写作过程中保持动力和耐心的必要性&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/paulocoutinhox/pdfium-lib&quot;&gt;pdfium-lib&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://xiaobot.net/p/shengcaiyoushu?&quot;&gt;生财有术项目精选&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是一个付费的类容，如果你是一个知行合一，搞钱特别行，那可以看看里面的赚钱路子。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://streamlit.io/&quot;&gt;Streamlight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过应用程序构建和共享数据的更快方式
Streamlight 在几分钟内就能将数据脚本变成可共享的网络应用程序。
所有这些都是在一个纯 Python 中实现的，不需要任何前端经验。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/m8hiQo6smRnHFjPkGfYLNQ&quot;&gt;关于 GPT 答朋友问&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在另外一边，AI 也好，GPT 也罢，未来算力提升会让智能提升到什么人类无法想象和企及的境界我不清楚，起码在现在，它们没可能超脱于现实世界而独立存在。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeium.com/&quot;&gt;codeium 类似 github copilot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;codeium 类似 github copilot，支持各种 IDE 的插件，对于个人用户来说，目前是永久免费。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/antimatter15/alpaca.cpp&quot;&gt;alpaca.cpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在你的设备上本地运行类似于 ChatGPT 的快速模型。意思就是可以在普通的笔记本上运行这个模型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.duolingo.com/duolingo-max/&quot;&gt;duolingo-max&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Duolingo 推出了新的订阅层次 Duolingo Max，提供两项新的基于人工智能技术的功能：Explain My Answer 和 Roleplay。这些功能可以让学习者了解自己的答案并练习与 AI 生成的角色进行真实对话。Duolingo 与 OpenAI 密切合作数月来完善技术，并确保准确性。人类评估内容并审查由 AI 生成的解释以确保事实正确和适当的语气。这些新功能仅在 iOS 上的面向英语使用者的西班牙语和法语课程上可用，在部分国家上线，计划很快扩展。&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/03/25/Forward-Position/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/03/25/Forward-Position/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
  </channel>
</rss>
