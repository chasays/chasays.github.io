<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>人生就是干</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 11 May 2022 15:08:41 +0000</pubDate>
    <lastBuildDate>Wed, 11 May 2022 15:08:41 +0000</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>腾讯云配置二级域名到Github pages，并用 cloudflare 加速</title>
        <description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;为什么要使用独立的域名，第一个，首先是独立的域名可以使用提高自己的权重以及引用，那能使提高&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;自己网站的流量&lt;/code&gt;；第2个是自己&lt;a href=&quot;https://chiphub.top/&quot;&gt;注册了一个域名&lt;/a&gt;，然后没有使用二级域域名，这个时候开通，那使用起来也非常方便，而且还是免费的。&lt;/p&gt;

&lt;p&gt;本人也是第一次走完整个流程，github pages当然一直有使用，创建也很简单，并且网上教程也比较多；然后是关于自定义域名的问题，自己以前使用过国外的免费域名，然后是直接修改就ok了，然后这次使用了从腾讯云注册的域名，中间会麻烦一些，然后网上也没看到能够特别匹配的教程；最后就是cloudflare的免费CDN加速了，对于github pages的访问来说，CDN加速是非常必要的了。&lt;/p&gt;

&lt;h2 id=&quot;一创建github-pages&quot;&gt;一、创建GitHub pages&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里网上教程很多，就不过多介绍了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在的GitHub pages和以前有一点不太一样，现在是在setting里面单独有一个pages的设置界面，然后可以在里面设置静态页面要访问的文件目录，创建过程比较简单，而且像我使用pages是用于个人博客的搭建。&lt;/p&gt;

&lt;p&gt;我采用的是 jekyll。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/cMlxMb.png&quot; alt=&quot;cMlxMb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成创建后，你会得到一个GitHub pages默认的域名，就像这样：用户名.github.io，像我的就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chasays.github.io&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;二自定义域名&quot;&gt;二、自定义域名&lt;/h2&gt;

&lt;h3 id=&quot;1-域名注册&quot;&gt;1. 域名注册&lt;/h3&gt;

&lt;p&gt;这里我选择的是腾讯云注册的域名，就10几块钱买了一年，还挺不错的，如果同样选择腾讯的域名注册的话可以和我进行一样的操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/mq03JC.png&quot; alt=&quot;mq03JC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里直接按照要求购买就可以，不过要提前进行实名后才可以进行购买，这里要注意一下。买完后它应该会提示你进行域名解析啥的，可以先不用管，之后再搞。&lt;/p&gt;

&lt;h3 id=&quot;2-github-pages绑定自定义域名&quot;&gt;2. GitHub pages绑定自定义域名&lt;/h3&gt;

&lt;p&gt;现在可以到GitHub去绑定自己的域名，像下面这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/wfQ1WK.png&quot; alt=&quot;wfQ1WK&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入https://console.dnspod.cn/dns，在这个界面里可以选择你的域名，DNS解析&amp;gt;我的域名，然后选择快速添加解析，添加一个二级域名, 解析到对应的github.io 地址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/VIvbbo.png&quot; alt=&quot;VIvbbo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成以上的步骤后，过1分钟左右，就&lt;strong&gt;已经可以通过你自己的域名去访问&lt;/strong&gt;你的静态网站了，像现在就可以通过 &lt;a href=&quot;http://blog.chiphub.top&quot;&gt;http://blog.chiphub.top&lt;/a&gt; 去访问我的个人博客了，不过此时&lt;strong&gt;还只能使用http进行访问，还不能够通过https进行访问&lt;/strong&gt;，不过不急，我们在完成cloudflare的CDN加速的步骤中就可以完成https的设置。&lt;/p&gt;

&lt;h2 id=&quot;三cloudflare进行cdn加速&quot;&gt;三、cloudflare进行CDN加速&lt;/h2&gt;

&lt;h3 id=&quot;1-注册cloudflare账号&quot;&gt;1. 注册cloudflare账号&lt;/h3&gt;

&lt;p&gt;点击 https://dash.cloudflare.com/ 进行账号注册或登录&lt;/p&gt;

&lt;p&gt;然后就会马上出现一个输入你自己域名的界面，输入完成域名后就会看到一个选择计划的界面，当然，这里果断免费，反正是自己用，而且白嫖就是爽。（ps：这里的过程忘记截图了）&lt;/p&gt;

&lt;p&gt;会自动扫描所有的DNS配置。&lt;/p&gt;

&lt;h3 id=&quot;2-更改dns服务器至cloudflare&quot;&gt;2. 更改DNS服务器至cloudflare&lt;/h3&gt;

&lt;p&gt;这里就需要回到腾讯云，将原来的DNS服务器（指向DNSPOD的）改为cloudflare。&lt;/p&gt;

&lt;p&gt;进入你的域名管理，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/SxlgG7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在域名信息里面就可以看到修改你的DNS服务器，这里直接把原来的两个替换掉就好了，替换的内容在cloudflare的步骤里面其实有详细的说明（至于为什么没有截图，当然又是忘记截图了😢，绝望，好在cloudflare是有详细的步骤过程的。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/IMG_7959.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，就完成了到 cloudflare 的绑定，后面cloudflare就会提示你要不要使用ssl证书，开启http跳转https之类的，直接按照提示下一步下一步就完事了。&lt;/p&gt;

&lt;p&gt;然后回到GitHub pages的设置界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/tJVNfA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就可以顺利的开启你的enforece https了，愉快而且快速地访问你的网站了，这里贴一下我自己的：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.chiphub.top/&quot;&gt;https://blog.chiphub.top/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前还没什么笔记，以前很早就打算弄的，但最后都没搞下来，这一次一定坚持下来，都搞了这么多准备工作，不坚持下来着实说不太过去了。&lt;/p&gt;

&lt;h2 id=&quot;四总结&quot;&gt;四、总结&lt;/h2&gt;

&lt;p&gt;不是很复杂，就是访问 cloudflare，提示链接被reset，关了梯子也不行，后来用手机操作搞定了。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/&lt;/p&gt;

&lt;p&gt;https://www.pianshen.com/article/8089379345/&lt;/p&gt;

&lt;p&gt;https://www.yixuebiancheng.com/article/90005.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;
微信公众号：chasays， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」互吹。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/11/tencent-cloud-subdomain-config-githubpages/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/11/tencent-cloud-subdomain-config-githubpages/</guid>
        
        <category>github</category>
        
        <category>cloudflare</category>
        
        
      </item>
    
      <item>
        <title>向 Docker 容器复制文件和从 Docker 容器复制文件</title>
        <description>&lt;p&gt;在处理 Docker 项目时，可能需要在 Docker 容器和本地计算机之间复制文件。&lt;/p&gt;

&lt;p&gt;Docker 为我们提供了非常有用的复制命令，使我们能够无缝地从 Docker 容器和本地机器复制文件。在本文中，我们将使用实例讨论如何使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; docker cp&lt;/code&gt; 命令。除了用到cp命令外， 还有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec&lt;/code&gt;常见的命令.&lt;/p&gt;

&lt;p&gt;下面是已经有启动docker镜像的情况下，docker镜像的名字为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_copy&lt;/code&gt;，容器id为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456&lt;/code&gt;，一般情况取前6位即可，不用取全， 这里名字随便取的，根据实际情况为准.&lt;/p&gt;

&lt;h2 id=&quot;将文件从-docker-容器复制到本地计算机&quot;&gt;将文件从 Docker 容器复制到本地计算机&lt;/h2&gt;

&lt;p&gt;按照下面的步骤将文件从 docker 容器复制到本地机器:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;进入到docker容器里面&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; test_copy  /bin/bash 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行后，可以看到已经进入到容器里面.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在容器里面创建一个文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.file&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;test.file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;可以看到当前目录下有一个， test.file的文件名.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;复制到本地机器&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;123456:/test.file ~/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;复制容器id为123456，根目录下面的test.file，到本机的家目录下面.
退出容器，可以在当前机器家目录看到test.file这个文件.&lt;/p&gt;

&lt;h2 id=&quot;将文件从本地系统复制到-docker-容器&quot;&gt;将文件从本地系统复制到 Docker 容器&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;本地创建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local.file&lt;/code&gt;文件名，然后传到容器里面去
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;local.file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;可以看到当前目录下有一个， local.file的文件名.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;复制到容器里面&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ~/local.file 123456:/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;复制容器id为123456，根目录下面的local.file，到容器的家目录下面.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;验证是否存在&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; test_copy /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;进入容器，执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, 可以在机器根目录看到local.file这个文件.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;
微信公众号：chasays， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」互吹。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/11/dokcer-copy-files/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/11/dokcer-copy-files/</guid>
        
        <category>docker</category>
        
        
      </item>
    
      <item>
        <title>36 - 35岁，程序员在做什么</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;今天下班之后，回老家了，走的比较匆忙，忘了带自己的电脑，用的是公司的电脑。 公司的电脑上好多软件没有安装，有些许的不方便~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220507213224.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;p&gt;我之前在互联网工作，由于互联网的性质，大家都知道，除了 996，还有比较有名气的就是「内卷」。&lt;/p&gt;

&lt;p&gt;当然也有好处，就是资本趋利，互联网的待遇，也是很少有其他行业比较的，这个就是所谓的行业势能。&lt;/p&gt;

&lt;p&gt;今年出现了一些比较特殊的情况。 互联网大厂每年都有裁员的比例，10%-20%是比较常见的，由于共同富裕话题、全球互联网行业增长都遇到了瓶颈的时候，今年大厂的裁员就更为猛烈，20%应该就是门槛，往上就不好说了。&lt;/p&gt;

&lt;p&gt;我也没有具体的数据，从我个人和身边的情况了解来看，总体来说，比往年都要严重一些。&lt;/p&gt;

&lt;h2 id=&quot;35岁&quot;&gt;35岁&lt;/h2&gt;

&lt;p&gt;一个普通的本科生毕业之后，工作到35岁，大概就是13年的职业生涯，如果是一直做程序员，13年不论做哪一个行业、哪一个岗位，都应该有一定的阅历、深度。&lt;/p&gt;

&lt;p&gt;实际上，资深确实是少数，也是紧缺货，稀有物种。 可以在招聘平台看到有些需要工作10年以上的专家等，这部分员工确实还是少见。&lt;/p&gt;

&lt;p&gt;我自己就是属于这一类，对自己的定位不太清晰，对每一个知识领域有所涉及，不深入。 这个也是我未来的对自己的要求，希望能在一个方向死磕到底，成为这个岗位有深度的人。&lt;/p&gt;

&lt;p&gt;一定是这个岗位，不是行业。 行业太泛了，不是观察员，没有必要把握整个行业，关注一个岗位即可。&lt;/p&gt;

&lt;p&gt;35岁，到底能不能失业？&lt;/p&gt;

&lt;p&gt;我想答案很明确，失不失业，取决于自己想要什么。&lt;/p&gt;

&lt;p&gt;有些互联网公司要求年轻化，有可能是为了更能加班，做一些重复性的工作吧。 遇到这种公司、这种领导，最好尽早的选择换个地方吧。&lt;/p&gt;

&lt;h2 id=&quot;真诚&quot;&gt;真诚&lt;/h2&gt;

&lt;p&gt;我听了许多的脱口秀，特别是「谐聊」这个节目，我最最大的收获，就是学会的真诚。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;谐星聊天会是由单立人喜剧出品的线上播客节目，每场邀请数十名观众与来自单立人的喜剧演员们一起，聊聊主题相关的故事与经历，用幽默开解生活中的沉杂琐事。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我来自农村，当时刚到镇里里面念书的时候，特别的自卑，怕别人瞧不起我。 越有这种心理，就越会撒谎。&lt;/p&gt;

&lt;p&gt;撒的慌多了，估计别人也不想给我争辩……&lt;/p&gt;

&lt;p&gt;慢慢的自己也意识到这个问题，撒谎并不能带给自己更多的优越感，同时也不能摆脱自己乡下人的身份。&lt;/p&gt;

&lt;p&gt;最近看一本书的时候，发现一个亮点，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;要想设计出成功的习惯并改变自身行为&lt;/code&gt;，需要做到3件事：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;停止自我批评；&lt;/li&gt;
  &lt;li&gt;把你的愿望拆解成微行为；&lt;/li&gt;
  &lt;li&gt;将每一次错误当成是一种新发现，并利用它们不断改进。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;请记住，只有在感觉良好而不是感觉糟糕时，才能达到最好的改变效果。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;这个感觉就是真诚的面对自己。&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://arstechnica.com/gadgets/2022/05/apple-google-and-microsoft-want-bluetooth-proximity-to-replace-the-passwor&quot;&gt;密码放在云上&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;国外的就是各种合作，各占据一方，我们不仅和国外的技术差别大，连格局也大呀.&lt;/p&gt;

&lt;p&gt;苹果、谷歌和微软发起了一项联合努力，以密码替换为密码标准。密码标准允许用户通过发送到用户手机的身份验证请求登录应用程序和网站。它将使用蓝牙来验证物理距离。密码可以备份到云服务，以便轻松验证新设备和跨设备同步密码。用户可以将多台设备设置为身份验证器。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pyscript.net/&quot;&gt;pyscript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;少花钱多办事，一个python程序员搞定前后端😂&lt;/p&gt;

&lt;p&gt;PyScript是一个框架，允许用户使用HTML的界面在浏览器中创建丰富的Python应用程序。PyScript旨在为用户提供一流的编程语言，具有一致的样式规则，更具表现力，更容易学习。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://geekplux.zhubai.love/&quot;&gt;geekplux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;商业、技术、财富、个人提升等，Always Exploring。付费订阅每两周一篇科技公司分析。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作者今年开始写newsletter，之前维护的一个同名的博客，今年开始写，目前是#16期，已经突破了2000订阅了，我到目前#34了，都不到1k订阅, 由于可以表明大佬的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;干货十足&lt;/code&gt;，订阅起来.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;p&gt;本周的思考时刻：35岁，焦虑么？&lt;/p&gt;

&lt;p&gt;说实在的，焦虑肯定是有的，但是焦虑完了，生活还是这样，我们要去面对，少一些焦虑，多一点实际行动.&lt;/p&gt;

&lt;p&gt;下周思考：如何计划自己的行动？&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书最重要的就是定好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;固定的时间&lt;/code&gt;，比如每天早起20分钟，那这个时间就可以用阅读，可以做自己喜欢事情，就可以避免日后每天纠结到底啥时候读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;福格行为模型 - 20%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;已经开始。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;待读的书还有：启示录(产品相关)、财富自由之路-李笑来&lt;/li&gt;
  &lt;li&gt;技术相关的书，大部分是电子书，因为可以随时的show me code。&lt;/li&gt;
  &lt;li&gt;方法、理论类的书籍，一般会停下来思考，提出问题、或者沉淀为自己的知识。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天是坚持周更分享：第 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;36/60&lt;/code&gt; 期。&lt;/p&gt;

</description>
        <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/07/35-old-year-for-programmer/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/07/35-old-year-for-programmer/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>Git 常用命令 pull、cherry-pick、fetch 有什么区别？</title>
        <description>&lt;h1 id=&quot;cherry-pick&quot;&gt;Cherry-pick&lt;/h1&gt;

&lt;p&gt;使用场景：假设您正在与一组开发人员一起开发一个中型到大型的项目。由另一个团队成员提出的一些更改，您希望将其中的一些更改应用于您的主项目，而不是全部。因为管理几个 Git 分支之间的更改可能成为一项复杂的任务，您不希望将整个分支合并到另一个分支中。你只需要&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;选择一个或两个特定的commit。从其他分支中挑选一些变更到您的主项目分支中&lt;/code&gt;，这被称为“cherry-pick”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/qj4c4O.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;语法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick commit_id&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;fetch&quot;&gt;Fetch&lt;/h1&gt;

&lt;p&gt;Git fetch 是一个命令，它告诉本地 git 从原始数据中检索最新的元数据信息(但不进行任何文件传输)，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;这更像是检查是否有任何可用的更改)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/XA15iz.png&quot; alt=&quot;XA15iz&quot; /&gt;&lt;/p&gt;

&lt;p&gt;语法： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch&amp;lt; repository Url&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;也可以指定分支名称&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch &amp;lt;branch URL&amp;gt;&amp;lt;branch name&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;或者是所有的分支&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch -all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;pull&quot;&gt;Pull&lt;/h1&gt;

&lt;p&gt;先fetch，更改并将它们merge到同名的本地分支中。&lt;/p&gt;

&lt;p&gt;git pull可以实现并从远程存储库中复制那些更改,有一个merge的动作.
实际&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; git pull = git fetch + git merge&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;用法最也简单&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull &amp;lt;option&amp;gt; [&amp;lt;repository URL&amp;gt;&amp;lt;refspec&amp;gt;...]l&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;git fetch&lt;/th&gt;
      &lt;th&gt;git pull&lt;/th&gt;
      &lt;th&gt;cherry-pick&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;只从远程存储库中下载新数据&lt;/td&gt;
      &lt;td&gt;用于使用来自远程最新更改更新本地当前的 HEAD 分支&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;用于获取远程存储库中发生的所有事情的新的信息&lt;/td&gt;
      &lt;td&gt;下载新的数据，并直接集成到您当前的工作，merge文件&lt;/td&gt;
      &lt;td&gt;拉取并把改commit置位第一个&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;从不操纵或破坏数据&lt;/td&gt;
      &lt;td&gt;拉下载数据并将其与当前工作文件merge&lt;/td&gt;
      &lt;td&gt;会merge文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;代码不受合并冲突的影响&lt;/td&gt;
      &lt;td&gt;有代码冲突，肯定会受到merge conflict&lt;/td&gt;
      &lt;td&gt;有代码冲突，肯定会受到merge conflict&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;最好使用 git fetch 命令和 git merge 命令对一个已pull的存储库进行操作&lt;/td&gt;
      &lt;td&gt;有了仓库，建议不要这么用&lt;/td&gt;
      &lt;td&gt;有了仓库，建议不要这么用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这个网站的介绍非常好，也写的非常的详细，包括一些常见的使用场景都提到了.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://w3cschoool.com/git-fetch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;read-more&quot;&gt;read more&lt;/h1&gt;

&lt;p&gt;https://blog.osteele.com/2008/05/my-git-workflow/&lt;/p&gt;

&lt;p&gt;https://w3cschoool.com/git-cherry-pick&lt;/p&gt;

</description>
        <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/06/git-pull-cherrypick-fetch/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/06/git-pull-cherrypick-fetch/</guid>
        
        <category>git</category>
        
        
      </item>
    
      <item>
        <title>2022 5月重疾推荐</title>
        <description>&lt;h2 id=&quot;线上&quot;&gt;线上&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;重疾：以达尔文6号为单次重疾主推，慧馨安2022作为少儿重疾主推。中荷超越1号作为非标人群推荐，人保i无忧作为大品牌大保司重疾补充&lt;/li&gt;
  &lt;li&gt;储蓄：增额以长城司马台作为推荐，养老年金以金盈年年为主推，太平e养添年为大保司品牌产品推荐&lt;/li&gt;
  &lt;li&gt;定寿医疗及其他短险：大麦2022及定海柱2号作为定寿主推，e享护-医享无忧维持独家销售作为百万医疗主推，小蜜蜂2号超越版作为综合意外险主推，小医仙2号作为小额医疗主推&lt;/li&gt;
  &lt;li&gt;铁甲小保独家迭代重磅上线，责任费率都有大升级，跟慧馨安2022搭配为少儿方案&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;线下&quot;&gt;线下&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;重疾：单次重疾中复联的达尔文5号荣耀版，信泰的达尔文5号焕新版均已对接线下出单；昆仑的健康保普惠多倍版也已可以出单，补充不分组重疾；信泰的如意久久可做分组多次重疾主推，御护无忧补充不分组多次重疾；少儿重疾维持妈咪保贝（新生版）主推&lt;/li&gt;
  &lt;li&gt;储蓄：光明慧选及金满意足臻享转线下依旧作为主推储蓄，信泰如意尊系列也可出单（市场高声量增额寿）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;5月需要重点注意的事项&quot;&gt;5月需要重点注意的事项&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;金满意足臻享版计划在5月31日下架&lt;/li&gt;
  &lt;li&gt;全新定制重疾及定制教育金上线请关注&lt;/li&gt;
  &lt;li&gt;铁甲小保2号升级/定制百万医疗/中端医疗陆续上架将丰富医疗产品线&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/06/cgsx/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/06/cgsx/</guid>
        
        <category>保险</category>
        
        
      </item>
    
      <item>
        <title>PicGo 图床工具配置 Github 等</title>
        <description>&lt;h1 id=&quot;场景&quot;&gt;场景&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;程序员写博客、文章等，然后发现图上传和管理都不是特别的方便，还有就是服务器保存图片就很繁琐，建议使用PicGo、uPic等工具，支持把图片传到github、gitee、微信小程序云等机器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最近使用gitee的时候发现，上传失败了，又换到了github上.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://cdn.jsdelivr.net/gh/user/repo&lt;/code&gt;来替代官方的域名，访问也很快.&lt;/p&gt;

&lt;h1 id=&quot;配置&quot;&gt;配置&lt;/h1&gt;

&lt;p&gt;这本身是一个方便图床上传的GUI工具，但是我这里推荐使用它的vs code 插件版本。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在VS Code 当中，搜寻PicGo外挂并安装。&lt;/li&gt;
  &lt;li&gt;开启VS Code的设定介面，搜寻picGo。&lt;/li&gt;
  &lt;li&gt;只需要把 current 这里的下拉选项改为 github&lt;/li&gt;
  &lt;li&gt;把 Github:branch 这里改成 master&lt;/li&gt;
  &lt;li&gt;把 Github: Custom Url 这里改成使用 jsDelivr 分发的仓库地址。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;即https://cdn.jsdelivr.net/gh/你的github使用者名称/刚刚建的仓库名&lt;/code&gt;，这样子我们以后访问图片就可以加快啦！&lt;/li&gt;
  &lt;li&gt;把 Github: Repo 改为 github使用者名称/仓库名&lt;/li&gt;
  &lt;li&gt;把 Github: Token 改为刚刚在 Github 记录下来的 token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220418141638.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;token-生成&quot;&gt;token 生成&lt;/h1&gt;

&lt;p&gt;登录github的情况下， 访问这个网址&lt;a href=&quot;https://github.com/settings/tokens/new&quot;&gt;https://github.com/settings/tokens/new&lt;/a&gt;， 输入名称，勾选如下配合，然后其他要求，就点击底部的生成token即可.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220418141900.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/05/picgo-picbed-config/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/05/picgo-picbed-config/</guid>
        
        <category>github</category>
        
        
      </item>
    
      <item>
        <title>汇编基础指令 </title>
        <description>&lt;h1 id=&quot;汇编&quot;&gt;汇编&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/y1tME9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在计算机程序设计中，汇编语言，是任何一种低级语言语言中的指令和结构中的机器代码指令之间有很强的对应关系。汇编语言通常每个指令有一个语句，但是通常也支持常量、注释、汇编程序指令、象内存位置、寄存器和宏的符号标签。&lt;/p&gt;

&lt;p&gt;比如and 运算&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;             Operand1: 	0101
             Operand2: 	0011
&lt;span class=&quot;nt&quot;&gt;----------------------------&lt;/span&gt;
After AND -&amp;gt; Operand1:	0001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;常用的指令&quot;&gt;常用的指令&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;SHL  shift left (左移)指令对目标操作数执行逻辑左移，将最低位填充为0。SHR (右移)指令对目标操作数执行逻辑右移。最高位的位置填充为零。SAL (左移位算法)与 SHL 相同。&lt;/li&gt;
  &lt;li&gt;EAX  extended 它代表通用寄存器。16位 AX 寄存器可以寻址为 AH (高字节)和 AL (低字节)。EAX 寄存器是 AX 寄存器的32位版本。代表扩展。&lt;/li&gt;
  &lt;li&gt;MOV  数据移动指令 mov 指令将其第二个操作数(即寄存器内容、内存内容或常量值)引用的数据项复制到其第一个操作数引用的位置(即寄存器或内存)。&lt;/li&gt;
  &lt;li&gt;ECX  count register BX 被称为基寄存器，因为它可以用于索引寻址。CX 称为计数寄存器，因为 ECX、 CX 寄存器在迭代操作中存储循环计数。DX 被称为数据寄存器。它也用于输入/输出操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;分类&quot;&gt;分类&lt;/h1&gt;

&lt;h2 id=&quot;数据传输指令&quot;&gt;数据传输指令&lt;/h2&gt;
&lt;p&gt;它们在存贮器和寄存器、寄存器和输入输出端口之间传送数据.&lt;/p&gt;
&lt;h3 id=&quot;1-通用数据传送指令&quot;&gt;1. 通用数据传送指令.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;MOV    传送字或字节.&lt;/li&gt;
  &lt;li&gt;PUSH    把字压入堆栈.&lt;/li&gt;
  &lt;li&gt;POP    把字弹出堆栈.&lt;/li&gt;
  &lt;li&gt;BSWAP  交换32位寄存器里字节的顺序&lt;/li&gt;
  &lt;li&gt;XCHG    交换字或字节.( 至少有一个操作数为寄存器,段寄存器不可作为操作数)&lt;/li&gt;
  &lt;li&gt;XADD    先交换再累加.( 结果在第一个操作数里 )&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-输入输出端口传送指令&quot;&gt;2. 输入输出端口传送指令.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;IN      I/O端口输入. ( 语法: IN 累加器, {端口号│DX} )&lt;/li&gt;
  &lt;li&gt;OUT    I/O端口输出. ( 语法: OUT {端口号│DX},累加器 )&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-目的地址传送指令&quot;&gt;3. 目的地址传送指令.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LEA    装入有效地址.例: LEA DX,string  ;把偏移地址存到DX.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;LGS    传送目标指针,把指针内容装入GS.例: LGS DI,string  ;把段地址:偏移地址存到GS:DI.&lt;/li&gt;
  &lt;li&gt;LSS    传送目标指针,把指针内容装入SS.例: LSS DI,string  ;把段地址:偏移地址存到SS:DI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-标志传送指令&quot;&gt;4. 标志传送指令.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;LAHF    标志寄存器传送,把标志装入AH.&lt;/li&gt;
  &lt;li&gt;POPF    标志出栈.&lt;/li&gt;
  &lt;li&gt;PUSHD  32位标志入栈.&lt;/li&gt;
  &lt;li&gt;POPD    32位标志出栈.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;算术运算指令&quot;&gt;算术运算指令&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ADD    加法.
    ADC    带进位加法.
    SUB    减法.
    SBB    带借位减法.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;逻辑运算指令&quot;&gt;逻辑运算指令&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   AND    与运算.
    OR      或运算.
    XOR    异或运算.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;

&lt;p&gt;https://www.tutorialspoint.com/assembly_programming/assembly_logical_instructions.htm&lt;/p&gt;

&lt;p&gt;https://sites.google.com/site/huibianyuyanzaixianbangzhu/emu8086bang-zhu/hui-bian-zhi-ling&lt;/p&gt;
</description>
        <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/04/assembly-basic-instruction/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/04/assembly-basic-instruction/</guid>
        
        <category>LLVM</category>
        
        
      </item>
    
      <item>
        <title>git 2 个 commit 压缩为一个 commit</title>
        <description>&lt;h1 id=&quot;问题&quot;&gt;问题&lt;/h1&gt;
&lt;p&gt;在使用 Git 作为版本控制的时候，我们可能会由于各种各样的原因提交了许多临时的 commit(git add -m “xx”, 不是追加的–amend)，而这些 commit 拼接起来才是完整的任务。那么我们为了避免太多的 commit 而造成版本控制的混乱，通常我们推荐将这些 commit 合并成一个。&lt;/p&gt;

&lt;p&gt;这个情况下用rebase就可以登场了.&lt;/p&gt;

&lt;h1 id=&quot;rebase&quot;&gt;Rebase&lt;/h1&gt;

&lt;p&gt;Rebase 是在另一个基准提交之上重新应用提交的过程。它用于将不同分支的提交，合并到一个提交中。它是 git merge 命令的一种替代方法。&lt;/p&gt;

&lt;p&gt;在 Git 中，术语 rebase 指的是将一系列提交移动或合并到一个新的基本提交的过程。rebase是非常有用，它可视化了分支工作流环境中的过程。&lt;/p&gt;

&lt;p&gt;需要注意的是，最好在合并分支之前rebase。&lt;/p&gt;

&lt;h1 id=&quot;实战&quot;&gt;实战&lt;/h1&gt;

&lt;p&gt;比如首先用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m 'xx'&lt;/code&gt;来提交三次，然后把最佳的2次合并为一次.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220421125024.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到有三次提交，分别如图.&lt;/p&gt;

&lt;p&gt;现在需要把下面红色部分的，就是最近的提交的2次，合并为一条commit
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220421125107.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;重点，首先执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i HEAD~2&lt;/code&gt;, 这里这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2就是最近的2次的commit&lt;/code&gt;的意思，也可以用其他的放-i commit_id.&lt;/p&gt;

&lt;p&gt;执行后看到如下弹窗，commit前面默认是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick&lt;/code&gt;，对应的解释在下面，可以用全称，也可以用首字母，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220421125336.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我这里保留3的comment，把2压缩到3， 修改如下，类似 r -2 ， p -3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220421125739.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很多同学这里都会报错，理论上也是会报错.的， 因为s的原理是把当前的commit融合到前一个commit，3在2后面提交的，所以会报错.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error: cannot 'squash' without a previous commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220421130016.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照提示，执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --edit-todo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220421133940.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后再次&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --continue&lt;/code&gt;, 修改comment即可 ，为了区分，我修改如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220421134129.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后ctrl+X， 然后输入Y，可以看到已经rebase，合并为一条了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo/20220421134207.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后就可以提交到对于的分支上.&lt;/p&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;

&lt;p&gt;https://stackoverflow.com/questions/39595034/git-cannot-squash-without-a-previous-commit-error-while-rebase&lt;/p&gt;

</description>
        <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/03/squash-2-commit-to-1/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/03/squash-2-commit-to-1/</guid>
        
        <category>git</category>
        
        
      </item>
    
      <item>
        <title>LLVM intrinsic 介绍</title>
        <description>&lt;h1 id=&quot;什么是-llvm-intrinsic&quot;&gt;什么是 LLVM intrinsic&lt;/h1&gt;

&lt;p&gt;LLVM 支持“intrinsic function”的概念。这些函数具有众所周知的名称和语义，并且需要遵循某些限制。总的来说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;这些 intrinsic 代表 LLVM 语言的扩展机制&lt;/code&gt;，在添加到语言(或者位码读取器/写入器、解析器等)时不需要更改 LLVM 中的所有转换。&lt;/p&gt;

&lt;p&gt;Intrinsic函数是编译器内建的函数，由编译器提供，类似于内联函数。但与内联函数不同的是，因为Intrinsic函数是编译器提供，而编译器与硬件架构联系紧密，因此编译器知道如何利用硬件能力以最优的方式实现这些功能。&lt;/p&gt;

&lt;h2 id=&quot;命名格式&quot;&gt;命名格式&lt;/h2&gt;

&lt;p&gt;intrinsic名必须全部以“ llvm”开头前缀。这个前缀在 LLVM 中保留用于intrinsic名称; 因此，函数名称不能以这个前缀开头。intrinsic函数必须始终是外部函数: 你不能定义intrinsic函数体。intrinsic函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;只能用于调用或调用指令&lt;/code&gt;: 获取intrinsic函数的地址是非法的。此外，由于intrinsic函数是 LLVM 语言的一部分，如果添加了intrinsic函数，则需要对其更新文档。&lt;/p&gt;

&lt;h2 id=&quot;重载&quot;&gt;重载&lt;/h2&gt;

&lt;p&gt;一些intrinsic函数可以被重载，例如，intrinsic函数表示一组在不同数据类型上执行相同操作的函数。由于 LLVM 可以表示超过800万种不同的整数类型，因此通常使用重载来允许intrinsic函数对任何整数类型进行操作。可以重载一个或多个参数类型或结果类型以接受任何整数类型。也可以将参数类型定义为与前一个参数的类型或结果类型完全匹配。这允许一个intrinsic函数接受多个参数，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;但是需要所有参数都是同一类型的，只能对一个参数或结果进行重载&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;重载 intrinsic 将把它重载的参数类型的名称编码到它的函数名中，每个参数类型的前面都有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.点符号&lt;/code&gt;。只有那些重载的类型才会生成名称后缀。其类型与另一个类型匹配的参数则不会。例如，llvm.ctpop 函数可以获取任意宽度的整数，并返回完全相同整数宽度的整数。这导致了一系列函数，如 @llvm.ctpop.i8(i8 %val)和  i29 @llvm.ctpop.i29(i29 %val).只有一个类型(返回类型)被重载，并且只需要一个类型后缀。因为参数的类型与返回类型匹配，所以它不需要自己的名称后缀。&lt;/p&gt;

&lt;p&gt;未命名类型被编码为 s_s。依赖于其重载参数类型中的未命名类型的重载 intrinsic 将获得一个额外的 .&lt;number&gt;后缀。这允许将不同的未命名类型作为参数来区分 intrinsic。(例如: llvm.ssa.copy.p0s_s.2(%42*)), 这个数字在 LLVM 模块中被跟踪，并确保模块中的唯一名称。在将两个模块链接在一起时，仍然有可能出现名称冲突。在这种情况下，其中一个名称将通过获得一个新numver来区分。&lt;/number&gt;&lt;/p&gt;

&lt;p&gt;对于为后端codegen定义 intrinsic 的目标开发人员，不应该依赖任何仅基于整数或浮点类型之间区别的内部重载来生成代码。在这种情况下，开发人员在定义 intrinsic 时， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;推荐的方法是创建单独的整数和 浮点的 intrinsic，而不是依赖于重载&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如，如果 llvm.target.foo(&amp;lt;4 x i32&amp;gt;))和 llvm.target.foo(&amp;lt;4 x float&amp;gt;) 需要不同的 codegen，那么应该将它们分成不同的 intrinsic。&lt;/p&gt;

&lt;h2 id=&quot;变量参数处理&quot;&gt;变量参数处理&lt;/h2&gt;

&lt;p&gt;在 LLVM 中定义了变量参数支持，包括 va_arg 指令和三个内在函数。这些函数与 &lt;stdarg.h&gt; 头文件中定义的命名类似的宏相关。&lt;/stdarg.h&gt;&lt;/p&gt;

&lt;p&gt;所有这些函数都对使用特定于目标的值类型“ va_list”的参数进行操作。LLVM 汇编语言参考手册没有定义此类型是什么，因此无论使用何种类型，都应该准备好处理这些函数。&lt;/p&gt;

&lt;h2 id=&quot;举个例子&quot;&gt;举个例子&lt;/h2&gt;

&lt;p&gt;这个例子展示了如何使用 va_arg 指令和intrinsic 函数处理变量参数。&lt;/p&gt;

&lt;div class=&quot;language-armasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;; 定义一个test 函数，第一个i32是返回值， &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; 后面括号里面的是操作数 i32 %X&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;; 分配一个地址空间给变量，初始化va_list&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alloca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_list&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ap2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bitcast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ap&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ap2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;; va_arg= variable_argument &lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;; 这个指令用于访问传递的参数&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;va_arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ap2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i32&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;; 演示如何使用 llvm.va_copy 和 llvm.va_end&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;aq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alloca&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;aq2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bitcast&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aq2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ap2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aq2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;; 停止参数的处理&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ap2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tmp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; 声明方法，类似cpp里面的extern &lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*)&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*)&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;va_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;read-more&quot;&gt;Read more&lt;/h1&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/53659330&lt;/p&gt;

&lt;p&gt;https://docs.microsoft.com/en-us/cpp/cpp/extern-cpp?view=msvc-170&lt;/p&gt;

&lt;p&gt;https://llvm.org/docs/LangRef.html#intrinsic-functions&lt;/p&gt;

</description>
        <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/02/LLVM-intrinsic_introduce/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/02/LLVM-intrinsic_introduce/</guid>
        
        <category>LLVM</category>
        
        
      </item>
    
      <item>
        <title>Compare With Others</title>
        <description>
&lt;hr /&gt;
&lt;p&gt;layout: post
title: “35 - 和别人比较”
subtitle: ‘痛苦就是来源于此’ 
author: “叉叉敌”
header-style: text
tags:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;长假开始了，你准备好了么？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/OROSIV.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;p&gt;上周留了一个问题和大家一起交流，比较尴尬的是没有人回复，或者是我漏掉了……&lt;/p&gt;

&lt;p&gt;五一假期临近，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;你有什么计划需要分享的么？&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我来分享一部美剧，没有剧透，题材属于科幻、悬疑片，我看的时候采用的是1.5~2倍速度观看，不影响体验。&lt;/p&gt;

&lt;p&gt;片源的话，国内普通用户，基本上看不到，不过好在现在互联网的发达，网上基本上都能搜到免费的资源。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/nGiGro.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我最近才发现一个多年的秘密，就是运动减肥的时候，大部分人运动一般就在20分钟左右。但是实际上前20分钟，是大量消耗我们体内的糖，后面的20-30分钟才是消耗我们的脂肪，建议减肥运动的时候，时间控制在40-50分钟是比较理想的。&lt;/p&gt;

&lt;h2 id=&quot;比较&quot;&gt;比较&lt;/h2&gt;

&lt;p&gt;人生的大部分痛苦来自比较。&lt;/p&gt;

&lt;p&gt;其实，比成功更重要的是成长。如果“成功”是与他人比较的话，那么“成长”则是与自己比较——今天的我和昨天的我、明天的我和今天的我之间的比较。&lt;/p&gt;

&lt;p&gt;后一种比较显然比前一种对个体来说意义更大，也能够带来更加踏实的幸福感。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/9dkMzTjQhcu2VT-CsgyZwA&quot;&gt;我们终会找到意义。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;效率&quot;&gt;效率&lt;/h2&gt;

&lt;p&gt;每个人都想提高效率，可奇怪的是，那么多所谓的“专家”怎么会常常忽略一个很简单又很明显的事实：没有任何机器可以一直用100%的功率运转，人也一样。
记住，任何人都不可能100%地有效率，至少不可能总是100%地有效率。&lt;/p&gt;

&lt;p&gt;请再次拿出纸和笔，罗列一下那些尽管无趣，但实际上对你来说非常重要的事情吧！&lt;/p&gt;

&lt;p&gt;如果你是一名学生，那件事情可能是背英语单词；
如果你是一名教师，那件事情可能是给学生批改作文；
如果你是一名程序员，那件事情可能是给你的代码写详尽的注释；
如果你是一名业务经理，那件事情可能是给你那挑剔的上司写下一年度的预算…&lt;/p&gt;

&lt;p&gt;最初的时候，你可以参考“时间分割法”。比如，你需要专注于这件事情2小时，即120分钟，那你就应该把当天的任务分解成6块，每一块用20分钟去完成，再把20分钟当作专注的基本时间单位，在每个时间单位过后休息5分钟，想办法犒劳一下自己——喝杯咖啡或者牛奶。休息时间的最后1分钟，重新振作，试着恢复状态，进入下一个基本时间单位——另一个20分钟。&lt;/p&gt;

&lt;h2 id=&quot;奇怪的知识&quot;&gt;奇怪的知识&lt;/h2&gt;

&lt;p&gt;男人所谓的性能力，与其心肺功能紧密相关。&lt;/p&gt;

&lt;p&gt;如果一个男人在二十五六岁的时候不管从什么渠道得知了这一点的话，那么他就应该坚持每周至少3次有氧运动。几年之后，他就会发现，在他的朋友、同事都被工作压垮了身体、了无生活乐趣的时候，他竟然可以通过积累做到一枝独秀。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xiongyingfei.github.io/papers/FSE21a.pdf&quot;&gt;Probabilistic Delta Debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇文章的作者是北大教授熊教授。介绍了他们创建比当前流行选择（ddmin算法）更有效的增量调试（通过尝试和错误发现错误的行为）算法的工作。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/Amocy-Wang/ProbDD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除了paper之外，还有这里实现的工具等。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gradio.app/&quot;&gt;gradio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/LKd4mo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gradio使得用Python为机器学习模型创建用户界面变得很容易。它可以生成可共享的链接，并获得有关模型性能的反馈。Gradio具有用于调试的内置操作和解释工具。有一个GIF演示。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;p&gt;本周的思考时刻：如何更好的输出的看书的内容信息？&lt;/p&gt;

&lt;p&gt;在空闲的时间来思考问题，比如浴室沉思等，然后带着问题去看书，把书上的信息内化为自己的知识。&lt;/p&gt;

&lt;p&gt;下周思考：放松一下~&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书最重要的就是定好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;固定的时间&lt;/code&gt;，比如每天早起20分钟，那这个时间就可以用阅读，可以做自己喜欢事情，就可以避免日后每天纠结到底啥时候读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;李笑来「把时间当做朋友」 - 100%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中我收益最多的章节就是管理、交流、以及思考。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;福格行为模型 - 20%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;已经开始。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;待读的书还有：启示录(产品相关)、财富自由之路-李笑来&lt;/li&gt;
  &lt;li&gt;技术相关的书，大部分是电子书，因为可以随时的show me code。&lt;/li&gt;
  &lt;li&gt;方法、理论类的书籍，一般会停下来思考，提出问题、或者沉淀为自己的知识。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天是坚持周更分享：第 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;35/60&lt;/code&gt; 期。&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/04/30/compare-with-others/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/04/30/compare-with-others/</guid>
        
        
      </item>
    
  </channel>
</rss>
