<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>察说花园是一个关于我个人的学习记录过程，五花八门，关于互联网、TensorFlow、车载、安卓、音视频、存储、小程序和编译器的资讯和技术分享</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 31 May 2024 07:42:31 +0000</pubDate>
    <lastBuildDate>Fri, 31 May 2024 07:42:31 +0000</lastBuildDate>
    <generator>Jekyll v3.9.5</generator>
    
      <item>
        <title>LLVM 学习记录：编译器最佳实践 - 构建，Cmake 和 test</title>
        <description>&lt;p&gt;学习内容来自网络课程，这个基本上是针对有点经验的 llvm 开发者，前面的就是过一遍。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/PacktPublishing/LLVM-Techniques-Tips-and-Best-Practices-Clang-and-Middle-End-Libraries&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://books.google.com.tw/books?id=g_wqEAAAQBAJ&amp;amp;printsec=copyright&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-构建技巧&quot;&gt;1. 构建技巧&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;用 ninja 构建&lt;/li&gt;
  &lt;li&gt;指定 lld 或者是 gold 的链接器&lt;/li&gt;
  &lt;li&gt;用特定的 cmake 参数来构建&lt;/li&gt;
  &lt;li&gt;构建不同的类型；debug，release，RelWithDebInfo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个我试了，RelWithDebInfo 又慢又大
 release，又快又小，如果不 debug 的话，用这个不错；
 debug 编译慢，空间占用的也非常的大。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;构建指定的目标 target， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DLLVM_TARGETS_TO_BUILD=&quot;X86;AMDGPU&quot; …&lt;/code&gt; ,有针对性的编译，速度会快很多；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;构建动态库： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DBUILD_SHARED_LIBS=ON&lt;/code&gt; 链接静态库通常比链接动态库花费更多的时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用 gn 来编译，我没有成功；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LLVM 的 GN 支持位于 llvm/utils/gn 文件夹中。&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-llvm-里面-cmake-用法&quot;&gt;2. llvm 里面 Cmake 用法&lt;/h2&gt;

&lt;p&gt;lib 是 LLVM 框架的基本构建块。&lt;/p&gt;

&lt;h3 id=&quot;cmake-添加新的库&quot;&gt;CMake 添加新的库&lt;/h3&gt;

&lt;p&gt;不要用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_library&lt;/code&gt;，要用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_llvm_component_library&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# In an in-tree CMakeLists.txt file…
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyLLVMPass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHARED&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyPass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LLVM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么不要用这个？主要就是慢，而且不好扩展和控制。&lt;/p&gt;

&lt;h3 id=&quot;llvm-更喜欢使用全局-cmake-参数-即-build_shared_libs-来控制所有的组件库是静态构建还是动态构建使用内置指令很难做到这一点的&quot;&gt;LLVM 更喜欢使用全局 CMake 参数 (即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD_SHARED_LIBS&lt;/code&gt;) 来控制所有的组件库是静态构建还是动态构建。使用内置指令很难做到这一点的&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;LLVM 更喜欢使用一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;全局的 CMake&lt;/code&gt; 参数来控制一些编译标志&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# In a CMakeLists.txt
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_llvm_component_library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LLVMFancyOpt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FancyOpt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里，LLVMFancyOpt 是库名，FancyOpt.cpp 是源文件。&lt;/p&gt;

&lt;p&gt;注意下面 2 个用法是一样的：&lt;/p&gt;

&lt;p&gt;写到一个里面&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_llvm_component_library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LLVMFancyOpt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FancyOpt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LINK_COMPONENTS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Analysis&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScalarOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分开写，先 link 组件：&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LLVM_LINK_COMPONENTS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Analysis&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScalarOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_llvm_component_library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LLVMFancyOpt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FancyOpt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cmake-函数添加可执行文件和工具&quot;&gt;CMake 函数添加可执行文件和工具&lt;/h3&gt;

&lt;p&gt;可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_llvm_executable&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_llvm_tool&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_llvm_tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myLittleTool&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyLittleTool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还有一个全局的 CMake 变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LLVM_BUILD_TOOLS&lt;/code&gt;，用来启用/禁用 LLVM 工具。&lt;/p&gt;

&lt;h3 id=&quot;cmake-函数添加-pass-插件&quot;&gt;CMake 函数添加 Pass 插件&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_llvm_pass_plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyPass&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HelloWorldPass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LINK_COMPONENTS、LINK_LIBS 和 DEPENDS 参数也可以在这里使用，其用法和功能与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_llvm_component_library&lt;/code&gt; 相同。&lt;/p&gt;

&lt;h2 id=&quot;3-lit-测试&quot;&gt;3. lit 测试&lt;/h2&gt;

&lt;p&gt;LIT 是一个测试基础设施，最初是为运行 LLVM 的回归测试而开发的。主要配合 Filecheck 来用。&lt;/p&gt;

&lt;p&gt;书里面，没有提到的，我这里补充一个，就是最好用 llvm-lit 工具，而不是 lit（python 的 lib）。&lt;/p&gt;

&lt;p&gt;如果还有就是可以自动更新 lit 测试的检查点；工具位于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/util/update_xxxx.py&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;用法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python update_xxx.py under_test_file.xx&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/31/llvm-learning-best_practice-1/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/31/llvm-learning-best_practice-1/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        <category>测试</category>
        
        
      </item>
    
      <item>
        <title>LLVM 学习记录：调试技巧</title>
        <description>&lt;p&gt;调试的时候有几个技巧，分享和记录下，方便自己后面可以熟练的用到。&lt;/p&gt;

&lt;h2 id=&quot;看所有的编译命令但是不执行&quot;&gt;看所有的编译命令，但是不执行&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-###&lt;/code&gt;，这个就是 clang 的第一个参数。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://clang.llvm.org/docs/CommandGuide/clang.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用 clang 编译的时候，会从打印（但不运行）为此编译运行的命令。&lt;/p&gt;

&lt;p&gt;然后打印出出错的命令，然后一步一步的执行，就知道是哪里的问题了。&lt;/p&gt;

&lt;p&gt;比如：优化或者是定位哪一步的编译时间过长，是词法解析，还是编译器后端，还是 lld 导致的，用这个方法分别执行每一步的命令，然后统计下，就知道是哪里耗费的时间长。&lt;/p&gt;

&lt;h2 id=&quot;llvm_debug-用法&quot;&gt;llvm_debug 用法&lt;/h2&gt;

&lt;p&gt;将对应的实例以字符串的形式输入到 errs() 流中，但是类似这种调试信息，我们通常并不想在正式发布的时候打印，而且有时候 Pass 的代码一多，就会造成打印的信息过多，干扰我们调试。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://zhqli.com/post/1667466024&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;借助 LLVM 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LLVM_DEBUG&lt;/code&gt; 对调试信息进行分类，使用之前需要导入对应的头文件并定义 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEBUG_TYPE&lt;/code&gt;, 如下所示&lt;/p&gt;

&lt;p&gt;在 llvm 代码里面可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LLVM_DEBUG()&lt;/code&gt;的用法，这个用法是什么喃？&lt;/p&gt;

&lt;p&gt;用的时候需要在 cpp 顶部定义各一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#incldue DEBUG_TYPE &quot;pass_name&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;举个例子&quot;&gt;举个例子&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AMDGPU 的 calllowering 里面。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define DEBUG_TYPE &quot;amdgpu-call-lowering&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定义一个 debug_type 的，后面是 pass 的名字。如何使用，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LLVM_DEBUG(dbgs())&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Make sure that they can fit on the caller's stack.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIMachineFunctionInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIMachineFunctionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getStackSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FuncInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBytesInStackArgArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LLVM_DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;... Cannot fit call operands on caller's stack.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样 debug 的时候，只需要跟上这个 pass 的名字，就只打印出这个 pass 的相关的 log 信息了。定位就方便多了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opt xxx  --debug-only=amdgpu-call-lowering &lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;统计运行时间&quot;&gt;统计运行时间&lt;/h2&gt;

&lt;p&gt;上面提到如何用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;###&lt;/code&gt;来查看命令，那么还有如何通过执行直接获取每一个的执行时间？&lt;/p&gt;

&lt;p&gt;可以用这个命令通过 opt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-time-trace&lt;/code&gt; 选项告诉 opt 导出所有由 TimeTraceaScope 收集的信息，并将 trace 文件保存到 -time-trace-file 指定的 json 文件中，这个 json 文件怎么查看呢？可以在 chrome 地址栏输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome://tracing&lt;/code&gt;, 然后打开这个 json 文件即可可视化查看，是不是有点惊喜？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2024-5-28-tracing.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击图片中第三个图标，就可以放大和缩小这个图片了，能看到具体是哪一个出了问题。&lt;/p&gt;

&lt;p&gt;chrome 的 trace 查看功能实际上是集成了项目 perfetto, 这个项目可以在线使用，地址是 https://ui.perfetto.dev/.&lt;/p&gt;

&lt;p&gt;那么 clang 里面用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-ftime-trace&lt;/code&gt; 也是可以用的`。&lt;/p&gt;

&lt;p&gt;方便么？do you get it?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;顺便推荐一本书，就是短时间内学习有用的 LLVM 技能，并使您能够快速构建原型和项目。编程语言爱好者还会发现本书对于在 LLVM 的帮助下构建新的编程语言很有用。
https://github.com/PacktPublishing/LLVM-Techniques-Tips-and-Best-Practices-Clang-and-Middle-End-Libraries&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还有大佬翻译为中文了，https://github.com/xiaoweiChen/LLVM-Techniques-Tips-and-Best-Practies&lt;/p&gt;
</description>
        <pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/28/llvm-learning-debug/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/28/llvm-learning-debug/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        <category>调试</category>
        
        
      </item>
    
      <item>
        <title>LLVM 学习记录：调试技巧 2 </title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这里直接推荐一个 https://blog.csdn.net/zhongyunde/article/details/109013865&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;工具的选项&quot;&gt;工具的选项&lt;/h1&gt;

&lt;p&gt;传递编译选项给 clang -cc1：-Xclang
-cc1 选项：实际的编译命令
传递编译选项给 llvm 编译：-mllvm
打印 token：-Xclang -dump-tokens
打印 AST： -Xclang -ast-dump
打印 llvm IR：-S -emit-llvm
打印汇编：-S
打印 pass 列表： -mllvm -debug-pass=Structure
打印 clang driver：-###
在 pass 执行完打印 IR：-mllvm -print-after-all；llc 也可以 -print-after-all, or stop-before=xx, stop-after=xx
DAGToDAG Debug 日志：-mllvm -debug&lt;/p&gt;

&lt;p&gt;选项-verify-each 能够使能每个 pass 后的验证&lt;/p&gt;

&lt;p&gt;打印模块信息： -print-module-scope，由于默认 print-after-all 仅在模块信息发生变化时才重新打印，导致过程中的 IR 内容不能直接用于 pass 的输入，因此配合此选项可以避免额外适配&lt;/p&gt;

&lt;p&gt;获取指定函数的 lr 文件：-mllvm -opt-bisect-limit=-1 -S -emit-llvm -filter-print-funcs=poo&lt;/p&gt;

&lt;p&gt;邮件 Which optimization pass deals with heap values 标题中提到选项-mllvm -print-changed 可以显示变化&lt;/p&gt;

&lt;p&gt;使用选项-mllvm –print-changed=quiet -mllvm –print-module-scope 查看状态变化，参考 Why is llvm.loop.unroll.disable appended for -O1 -emit-llvm - #2 by aeubanks - IR &amp;amp; Optimizations - LLVM Discussion Forums&lt;/p&gt;

&lt;h1 id=&quot;裁剪-case&quot;&gt;裁剪 case&lt;/h1&gt;

&lt;p&gt;a) 用例裁剪：llvm 提供 llvm-reduce 及使用示例&lt;/p&gt;

&lt;p&gt;~/test/issue2485/err » cat test1.sh                                                           &lt;br /&gt;
#!/bin/bash
opt  $1 -instcombine -S 2&amp;gt;&amp;amp;1 | grep SafeReplacementConstant # 匹配返回 0 是感兴趣
————————————————————
~/test/issue2485/err » llvm-reduce –test=test1.sh test-2485.ll
如果是 lto 优化，则需要使用-Wl,-plugin-opt=save-temps 保留中间文件，生成的&lt;em&gt;.opt.bc 使用 llvm-dis 转换为&lt;/em&gt;.ll 文件，后续裁剪方法同上&lt;/p&gt;

&lt;p&gt;llvm-dis a.out.0.4.opt.bc – 生成 a.out.0.4.opt.ll&lt;/p&gt;

&lt;p&gt;opt  -instcombine  a.out.0.4.opt.ll&lt;/p&gt;

&lt;p&gt;b) 源码裁剪：llvm 后端中的 llvm-reduce 只能对非后端的 IR 进行裁剪，无法对后端的 IR 进行裁剪。因此可以先使用 C-Reduce 对 C 源码裁剪，间接的进行简化，使用方法类似 llvm-reduce&lt;/p&gt;

&lt;p&gt;MIR 相关的调试补充介绍&lt;/p&gt;

&lt;p&gt;MIR 的调试参考 Machine IR (MIR) Format Reference Manual — LLVM 13 documentation&lt;/p&gt;

&lt;p&gt;You can use the MIR format for testing in two different ways:&lt;/p&gt;

&lt;p&gt;You can write MIR tests that invoke a single code generation pass using the -run-pass option in llc.
You can use llc’s -stop-after option with existing or new LLVM assembly tests and check the MIR output of a specific code generation pass.&lt;/p&gt;

&lt;p&gt;参考 CodeGen/AMDGPU/fold-reload-into-m0.mir，可以使用 -start-before=greedy -stop-after=virtregmap 指定开始和结束要执行的 pass, 也就是并不需要都重头开始执行，示例：&lt;/p&gt;

&lt;p&gt;llc -O3 reduced.ll -stop-before=virtregmap -o - &amp;amp;&amp;gt; machine-scheduler1.mir&lt;/p&gt;

&lt;p&gt;llc -O3 reduced.ll -simplify-mir -o - -print-after-all 也可以打印 mir&lt;/p&gt;

&lt;p&gt;注意： -o - 是关键，和 llc -O3 reduced.ll -stop-before=virtregmap -debug-only=machine-scheduler 得到的内容存在差异&lt;/p&gt;

&lt;p&gt;学习 mllvm -opt-bisect-limit 用法：Using -opt-bisect-limit to debug optimization errors — LLVM 15.0.0git documentation&lt;/p&gt;

&lt;p&gt;cgdb 类似 emacs + gdb 功能，可以实时查看代码执行位置，参考 https://blog.csdn.net/yzhang6_10/article/details/83626226&lt;/p&gt;

&lt;p&gt;IRbuilder 或者 MachineIRBuilder 是为了建新的语句的一个接口类，可以使用&lt;/p&gt;

&lt;p&gt;p Builder.GetInsertBlock()-&amp;gt;dump() 打印当前 basicblock 的信息&lt;/p&gt;

&lt;h1 id=&quot;3常用-debug-api查看过程状态&quot;&gt;3、常用 debug API，查看过程状态&lt;/h1&gt;

&lt;p&gt;p L.getHeader()-&amp;gt;getParent()-&amp;gt;dump()  查看循环体的内容&lt;/p&gt;

</description>
        <pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/28/llvm-learning-debug-2/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/28/llvm-learning-debug-2/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        <category>调试</category>
        
        
      </item>
    
      <item>
        <title>LLVM 学习记录：如何添加一个 builtin 函数 - 2</title>
        <description>&lt;p&gt;需要主要有一个地方。&lt;/p&gt;

&lt;p&gt;如果是 intrinsic*.td 里面使用了，ClangBuiltin&amp;lt;&amp;gt;, 那么就不需要再 CGBuiltin.cpp 里面添加枚举了。&lt;/p&gt;

&lt;h2 id=&quot;先来看一组定义的差别&quot;&gt;先来看一组定义的差别&lt;/h2&gt;

&lt;p&gt;定义 1&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_stackrestore&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultAttrsIntrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm_anyptr_ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ClangBuiltin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;__builtin_stack_restore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义 2&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_stackrestore&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultAttrsIntrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm_anyptr_ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这两个定义的主要区别在于是否将 LLVM 固有函数与 Clang builtin 函数关联。这确实是一个关键差别，影响到 Clang 如何处理 builtin 函数以及它们在 LLVM IR 中的表示。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClangBuiltin&amp;lt;&quot;__builtin_stack_restore&quot;&amp;gt;&lt;/code&gt; 表示这个固有函数在 Clang 中对应于 builtin 函数 __builtin_stack_restore。这意味着，当你在 C/C++ 代码中使用 __builtin_stack_restore 时，Clang 会将其转换为 LLVM IR 中的 llvm.stackrestore builtin 函数调用。&lt;/p&gt;

&lt;h2 id=&quot;没看懂举个例子&quot;&gt;没看懂，举个例子？&lt;/h2&gt;

&lt;p&gt;比如在 intrinsic.td 里面定义了&lt;/p&gt;

&lt;p&gt;https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/Intrinsics.td&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_stackrestore&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultAttrsIntrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm_anyptr_ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ClangBuiltin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;__builtin_stack_restore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClangBuiltin&amp;lt;&quot;__builtin_stack_restore&quot;&amp;gt;;&lt;/code&gt;
Clang 内建函数关联：
ClangBuiltin&amp;lt;”__builtin_stack_restore”&amp;gt; 表示这个固有函数在 Clang 中对应于内建函数 __builtin_stack_restore。即，当你在 C/C++ 代码中使用 __builtin_stack_restore 时，Clang 会将它转换为 LLVM IR 中的 llvm.stackrestore 固有函数调用。&lt;/p&gt;

&lt;p&gt;有了这个，就不需要在 CGbuiltin.cpp 里面添加枚举了，添加了也不会走到枚举这里的。&lt;/p&gt;

&lt;p&gt;再来看看 ClangBuiltin&amp;lt;&amp;gt; 这个定义说的啥？&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// ClangBuiltin - If this intrinsic exactly corresponds to a Clang builtin, this&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// specifies the name of the builtin.  This provides automatic CBE and CFE&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// support.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClangBuiltin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClangBuiltinName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;意思就是 ClangBuiltin 如果此内在 intrinsic 函数能完全对应于 Clang builtin 函数，则此指定 builtin 的名称，会自动支持 clang 前后端。&lt;/p&gt;

&lt;p&gt;还没看懂？别开玩笑了，我的零基础的都能看懂~&lt;/p&gt;

&lt;p&gt;还有一个问题，估计你和我一样，好奇，如果是 2 边都添加了，会怎么样？&lt;/p&gt;

&lt;p&gt;我试了，如过 intrinsic.td 里面添加了，又在 CGBuiltin.cpp 里面添加了。CGBuiltin.cpp 这个里面是不会生效的。&lt;/p&gt;
</description>
        <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/24/llvm-learning-define-intrinsics-2/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/24/llvm-learning-define-intrinsics-2/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        
      </item>
    
      <item>
        <title>LLVM 学习记录：编译器之美 - 后端基础：20~22</title>
        <description>&lt;p&gt;学习内容来自极客时间的付费课程，我是针对性的学习，直接进入后端的学习，从 20 讲开始，前端的词法解析，直接跳过。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://time.geekbang.org/column/intro/100034101&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;```graph TD&lt;/p&gt;

&lt;p&gt;A[前端] –&amp;gt; B{词法分析}
B –&amp;gt; C{语法分析}
C –&amp;gt; D{语义分析}
D –&amp;gt; E{生成中间代码}
E –&amp;gt; F{优化}
F –&amp;gt; G{生成目标代码}
G –&amp;gt; H[后端]&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;你是不是觉得汇编很难？&lt;/p&gt;

&lt;p&gt;不瞒你说，我一开始也觉得汇编好高级呀，看不懂呀，太难了。&lt;/p&gt;

&lt;p&gt;这个是什么鬼语法。其他汇编比高级语言简单，没有复杂的类型，没有多的语法结构。通常就是把数据拷贝到寄存器，处理一下，再保存回内存。&lt;/p&gt;

&lt;p&gt;只是我们见到的，都是高级语言，都是处理过的，辨识度高。&lt;/p&gt;

&lt;p&gt;为了降低后端工作量，提高软件复用度，就需要引入中间代码（Intermediate Representation，IR）的机制，它是独立于具体硬件的一种代码格式。各个语言的前端可以先翻译成 IR，然后再从 IR 翻译成不同硬件架构的汇编代码。如果有 n 个前端语言，m 个后端架构，本来需要做 m*n 个翻译程序，现在只需要 m+n 个了。这就大大降低了总体的工作量。&lt;/p&gt;

&lt;p&gt;像 Rust 就充分利用了 LLVM，GCC 的各种语言，如 C、C++、Object C 等，也是充分共享了后端技术。&lt;/p&gt;

&lt;p&gt;不得不说 rust 的开源社区建设太好了。&lt;/p&gt;

&lt;h2 id=&quot;代码分析和优化&quot;&gt;代码分析和优化&lt;/h2&gt;

&lt;p&gt;依赖于机器的优化，则是依赖于硬件的特征。现代的计算机硬件设计了很多特性，以便提供更高的处理能力，比如并行计算能力，多层次内存结构（使用多个级别的高速缓存）等等。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;编译器要能够充分利用硬件提供的性能&lt;/code&gt;，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;寄存器优化。对于频繁访问的变量，最好放在寄存器中，并且尽量最大限度地利用寄存器，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不让其中一些空着&lt;/code&gt;，有不少算法是解决这个问题的，教材上一般提到的是染色算法；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;充分利用高速缓存。高速缓存的访问速度可以比内存快几十倍上百倍，所以我们要尽量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;利用高速缓存&lt;/code&gt;。比如，某段代码操作的数据，在内存里尽量放在一起，这样 CPU 读入数据时，会一起都放到高速缓存中，不用一遍一遍地重新到内存取。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;并行性。现代计算机都有多个内核，可以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;并行计算&lt;/code&gt;。我们的编译器要尽可能把充分利用多个内核的计算能力。这在编译技术中是一个专门的领域。比如 NVIDIA 的 cuda&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;流水线。CPU 在处理不同的指令的时候，需要等待的时间周期是不一样的，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;在等待某些指令做完的过程中其实还可以执行其他指令&lt;/code&gt;。就比如在星巴克买咖啡，交了钱就可以去等了，收银员可以先去处理下一个顾客，而不是要等到前一个顾客拿到咖啡才开始处理下一个顾客。涉及到 data hazard&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;指令选择。有的时候，CPU 完成一个功能，有多个指令可供选择。而针对某个特定的需求，采用 A 指令可能比 B 指令效率高百倍。比如 X86 架构的 CPU 提供 SIMD 功能，也就是一条指令可以处理多条数据，而不是像传统指令那样一条指令只能处理一条数据。在内存计算领域，SIMD 也可以大大提升性能，我们在第 30 讲的应用篇，会针对 SIMD 做一个实验。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他优化。比如可以针对专用的 AI 芯片和 GPU 做优化，提供 AI 计算能力，等等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;刚接触编译技术的时候，可能会把视线停留在前端技术上，以为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;能做 Lexer、Parser 就是懂编译了&lt;/code&gt;。实际上，词法分析和语法分析比较成熟，有成熟的工具来支撑。相对来说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;后端的工作量更大，挑战更多，研究的热点也更多&lt;/code&gt;。比如，人工智能领域又出现了一些专用的 AI 芯片和指令集，就需要去适配。&lt;/p&gt;

&lt;h2 id=&quot;程序运行的环境&quot;&gt;程序运行的环境&lt;/h2&gt;

&lt;p&gt;下面这一段是我直接 copy 过来的，我还没有消化掉。后面慢慢看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;image.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般来讲，代码区是在最低的地址区域，然后是静态数据区，然后是堆。而栈传统上是从高地址向低地址延伸，栈的最顶部有一块区域，用来保存环境变量。&lt;/p&gt;

&lt;p&gt;代码区（也叫文本段）存放编译完成以后的机器码。这个内存区域是只读的，不会再修改，但也不绝对。现代语言的运行时已经越来越动态化，除了保存机器码，还可以存放中间代码，并且还可以在运行时把中间代码编译成机器码，写入代码区。&lt;/p&gt;

&lt;p&gt;静态数据区保存程序中全局的变量和常量。它的地址在编译期就是确定的，在生成的代码里直接使用这个地址就可以访问它们，它们的生存期是从程序启动一直到程序结束。它又可以细分为 Data 和 BSS 两个段。Data 段中的变量是在编译期就初始化好的，直接从程序装在进内存。BSS 段中是那些没有声明初始化值的变量，都会被初始化成 0。&lt;/p&gt;

&lt;p&gt;堆适合管理生存期较长的一些数据，这些数据在退出作用域以后也不会消失。比如，我们在某个方法里创建了一个对象并返回，并希望代表这个对象的数据在退出函数后仍然可以访问。&lt;/p&gt;

&lt;p&gt;而栈适合保存生存期比较短的数据，比如函数和方法里的本地变量。它们在进入某个作用域的时候申请内存，退出这个作用域的时候就可以释放掉&lt;/p&gt;

&lt;p&gt;关于优化，可以看这个里面的一些思路：我目前还没有看。https://www.agner.org/optimize/&lt;/p&gt;
</description>
        <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/24/llvm-learning-basic-1/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/24/llvm-learning-basic-1/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        
      </item>
    
      <item>
        <title>LLVM 学习记录：TD 里面的 def、defm、defvar 有什么区别</title>
        <description>&lt;p&gt;前面学习了如何添加一个 intrinsic 函数的过程，发现有涉及到 td table gen 语言的格式，这个需要注意。&lt;/p&gt;

&lt;p&gt;有几个关键字，def，defm，defvar 的区别？&lt;/p&gt;

&lt;p&gt;这个内容非常的简单，使用的时候注意下即可。官方文档把这个称为 record，翻译过来是记录？anyway，随便是什么，记住就是一个标识符吧。&lt;/p&gt;

&lt;h1 id=&quot;首先了解下什么-single-class和-multiclass&quot;&gt;首先了解下什么 single class，和 multiclass&lt;/h1&gt;

&lt;p&gt;重要的一点就是：class 类型只能从一个 class 类型继承，而 multiclass 类型可以从多个 class 类型继承。&lt;/p&gt;

&lt;p&gt;class 类型通常比 multiclass 类型更有效率，因为 LLVM 可以更轻松地优化 class 类型。&lt;/p&gt;

&lt;p&gt;还是用 amd 的 td 文件来举例：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/IntrinsicsAMDGPU.td&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;single-class&quot;&gt;single class&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultAttrsIntrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm_i32_ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntrNoMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntrSpeculatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;标识符 class 开头的就是单类。单类的名称是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;multi-class&quot;&gt;multi class&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;multiclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic_xyz&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关键字是 multiclass，就是多类。&lt;/p&gt;

&lt;p&gt;这里多类的名称是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic_xyz&lt;/code&gt;，然后里面包含了多个单类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;btw，每个类都有一个名为 NAME（大写）的隐式模板参数，它绑定到从该类继承的 Def 或 Defm 的名称。如果该类由匿名记录继承，则名称未指定，但全局唯一。&lt;/p&gt;

&lt;p&gt;学了容易忘记，建议是用到的时候，可以看一下，基本上就知道了。&lt;/p&gt;

&lt;h1 id=&quot;区别&quot;&gt;区别&lt;/h1&gt;

&lt;p&gt;def 就是单纯的定义个单类的变量；
defm，这个多了一个 m，m 代表的就是 multiclass，就是定义的多类。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Feature&lt;/th&gt;
      &lt;th&gt;defm&lt;/th&gt;
      &lt;th&gt;def&lt;/th&gt;
      &lt;th&gt;defvar&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Type of entity&lt;/td&gt;
      &lt;td&gt;Multiclass&lt;/td&gt;
      &lt;td&gt;Class&lt;/td&gt;
      &lt;td&gt;Global variable&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Inheritance&lt;/td&gt;
      &lt;td&gt;Multiple inheritance&lt;/td&gt;
      &lt;td&gt;Single inheritance&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Can define&lt;/td&gt;
      &lt;td&gt;types&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其实看了上面的 class 和 multiclass 的定义，就大概知道怎么用了。&lt;/p&gt;

&lt;p&gt;还有更多的 def* ，&amp;gt; https://llvm.org/docs/TableGen/ProgRef.html#id24&lt;/p&gt;

</description>
        <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/23/llvm-td-syntax-def-defm-defvar/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/23/llvm-td-syntax-def-defm-defvar/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        
      </item>
    
      <item>
        <title>LLVM 学习记录：如何添加一个 builtin 函数</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;学习过程，求勘误，多谢指出~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;今天学习如何在后端添加一个-builtin-和对应的指令-mapping-起来&quot;&gt;今天学习如何在后端添加一个 builtin 和对应的指令 mapping 起来？&lt;/h1&gt;

&lt;p&gt;整个过程预览：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;源代码调用：在高级语言的源代码中使用特定于 AMDGPU 的内置函数，例如就这么写 __builtin_amdgcn_sin(x)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LLVM IR 生成：Clang 编译器在编译过程中将这些内置函数调用转换为 LLVM IR 中的内置函数，例如 %0 = call float @llvm.amdgcn.sin.f32(float %x)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;机器代码生成：LLVM 的后端（例如 AMDGPU 后端）读取 LLVM IR，并根据 IntrinsicsAMDGPU.td 文件中的定义，将这些内置函数映射到具体的机器指令，就是 amd 的 isa 指令。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1--什么情况下会添加这个函数&quot;&gt;1.  什么情况下会添加这个函数？&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://llvm.org/docs/ExtendingLLVM.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在使用 LLVM 的过程中，您可能希望为您的研究项目或实验定制它。此时，您可能会意识到需要向 LLVM 添加一些内容，无论是新的基本类型、新的内部函数还是全新的指令。&lt;/p&gt;

&lt;p&gt;一般情况时有新的 target 添加，或者是支持新的 target，那么才需要，不然似乎需要。&lt;/p&gt;

&lt;p&gt;因为这个需要花费大量的时间，请在社区咨询和是不是已经支持，或者已经有人在做了。&lt;/p&gt;

&lt;h2 id=&quot;2-开始添加&quot;&gt;2. 开始添加&lt;/h2&gt;

&lt;p&gt;向 LLVM 添加新的内部函数比添加新指令要容易得多。几乎所有 LLVM 扩展都应该作为内在函数开始，然后在必要时转换为指令。&lt;/p&gt;

&lt;p&gt;首先，要知道 tablegen 的语法。&lt;/p&gt;

&lt;p&gt;关于 tablegen, 可以看下这篇文章，太多了，死机是记不住的，怎么办？多在实际项目中应用，记不住的再来查字典。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://blog.llvm.org/posts/2023-12-07-tools-for-learning-llvm-tablegen/&lt;/p&gt;

  &lt;p&gt;https://llvm.org/docs/TableGen/&lt;/p&gt;

  &lt;p&gt;https://llvm.org/docs/TableGen/ProgRef.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1--添加定义-builtin-和-intrinsic为了高级语言可以调用&quot;&gt;1.  添加定义 builtin 和 intrinsic，为了高级语言可以调用&lt;/h3&gt;

&lt;p&gt;首先需要了解点，基础的知识。&lt;/p&gt;

&lt;h4 id=&quot;builtin-和-intrinsic-有什么区别&quot;&gt;builtin 和 intrinsic 有什么区别？&lt;/h4&gt;

&lt;p&gt;一开始也不懂，只是啥呀？看名字感觉都是内置函数，确实都是内置函数。&lt;/p&gt;

&lt;p&gt;我理解的有点区别，就是 builtin 是高级语言级别的，而 intrinsic 是 IR 级别的。&lt;/p&gt;

&lt;p&gt;在 llvm 里面他们的命名大概是这样子的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;builtin：__builtin_memcpy()、__builtin_popcount()&lt;/li&gt;
  &lt;li&gt;intrinsic: llvm.memcpy(), llvm.ctpop()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cgbuiltincpp-这个文件干嘛的&quot;&gt;CGBuiltin.cpp 这个文件干嘛的？&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGBuiltin.cpp&lt;/code&gt; 文件是 LLVM 项目的一部分，主要负责生成 LLVM IR 代码以实现内置函数的编译，包括初始化内存、生成内置库函数调用以及处理特定于目标架构的内置函数。&lt;/p&gt;

&lt;p&gt;这个文件里面主要关注 2 个函数：文件包含了初始化内存的函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initializeAlloca&lt;/code&gt;，该函数根据不同的初始化策略（如未初始化、全零初始化或模式初始化）来初始化 alloca 分配的内存。还有就是对齐方式，这个主要取决于硬件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBuiltinLibFunction&lt;/code&gt; 函数负责将高级语言中的内置函数映射到 LLVM IR 的内置函数，这对于生成有效的目标代码至关重要。&lt;/p&gt;

&lt;p&gt;举个例子：比如高级语言是__builtin_fabs，对应的 IR 可能就是 llvm.fabs。&lt;/p&gt;

&lt;p&gt;可以看到很多&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;枚举值&lt;/code&gt;。比如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case RISCV::BI__builtin_riscv_ntl_store:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个枚举值是通过 TargetBuiltins.h 里面通过 namespace 里面的 include 来的。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// AMDGPU builtins&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPU&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LastTIBuiltin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builtin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstTSBuiltin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;#define BUILTIN(ID, TYPE, ATTRS) BI##ID,
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;clang/Basic/BuiltinsAMDGPU.def&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;LastTSBuiltin&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;builtinsdef-是干嘛的&quot;&gt;Builtins*.def 是干嘛的&lt;/h4&gt;

&lt;p&gt;来到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang/Basic/BuiltinsAMDGPU.def&lt;/code&gt;这个文件里面，就可以看到具体的定义 BUILTIN 定义了。&lt;/p&gt;

&lt;p&gt;有必要对这个代码解释下，我看了之后，一头雾水。LastTIBuiltin 和 FirstTSBuiltin 是什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一个是 namespace 这个好理解；&lt;/li&gt;
  &lt;li&gt;enum 枚举值；匿名枚举值；&lt;/li&gt;
  &lt;li&gt;LastTIBuiltin = clang::Builtin::FirstTSBuiltin - 1,：我看了大概是 AMDGPU 内置函数的 ID 值比 clang 内置函数的 ID 值小 1。
LastTIBuiltin：这个枚举成员表示 LLVM/Clang 中最后一个 Target-Independent (TI) 内置函数的编号。Target-Independent 内置函数是不依赖于特定硬件架构的内置函数。LastTIBuiltin 的值是 clang::Builtin::FirstTSBuiltin - 1，其中 FirstTSBuiltin 表示第一个 Target-Specific (TS) 内置函数的编号。这样设置是为了确保 AMDGPU 的内置函数枚举值在数值上紧跟在 TI 内置函数之后。&lt;/li&gt;
  &lt;li&gt;#define BUILTIN(ID, TYPE, ATTRS) BI##ID, 定义了宏，包含 3 个参数；展开后，应该类似 BI1，BI2……&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BUILTIN(__builtin_amdgcn_dispatch_ptr, &quot;v*4&quot;, &quot;nc&quot;)
BUILTIN(__builtin_amdgcn_kernarg_segment_ptr, &quot;v*4&quot;, &quot;nc&quot;)
BUILTIN(__builtin_amdgcn_implicitarg_ptr, &quot;v*4&quot;, &quot;nc&quot;)
BUILTIN(__builtin_amdgcn_queue_ptr, &quot;v*4&quot;, &quot;nc&quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;估计你和我一样，第一眼看到的饿时候，what？这些神秘的 v，n，c 是什么意思？没关系，看文件的顶部，有一个文件，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builtins.def&lt;/code&gt;，跟过去，看一下里面的内容，下面是部分内容。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//https://github.com/llvm/llvm-project/blob/main/clang/include/clang/Basic/Builtins.def

// (result value, then each argument) as follows:
//  v -&amp;gt; void
//  b -&amp;gt; boolean
//  c -&amp;gt; char
//  s -&amp;gt; short
//  i -&amp;gt; int
//  h -&amp;gt; half (__fp16, OpenCL)
//  x -&amp;gt; half (_Float16)
//  y -&amp;gt; half (__bf16)
//  f -&amp;gt; float
//  d -&amp;gt; double
//  z -&amp;gt; size_t
//  w -&amp;gt; wchar_t
//  F -&amp;gt; constant CFString
//  G -&amp;gt; id
//  H -&amp;gt; SEL
//  M -&amp;gt; struct objc_super
//  a -&amp;gt; __builtin_va_list
//  A -&amp;gt; &quot;reference&quot; to __builtin_va_list

……

// Types may be prefixed with the following modifiers:
//  L   -&amp;gt; long (e.g. Li for 'long int', Ld for 'long double')
//  LL  -&amp;gt; long long (e.g. LLi for 'long long int', LLd for __float128)
//  LLL -&amp;gt; __int128_t (e.g. LLLi)
//  Z   -&amp;gt; int32_t (require a native 32-bit integer type on the target)
//  W   -&amp;gt; int64_t (require a native 64-bit integer type on the target)
//  N   -&amp;gt; 'int' size if target is LP64, 'L' otherwise.
//  O   -&amp;gt; long for OpenCL targets, long long otherwise.
//  S   -&amp;gt; signed
//  U   -&amp;gt; unsigned
//  I   -&amp;gt; Required to constant fold to an integer constant expression.
//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看了就知道是什么意思了吧，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v 就是 void，没有返回值&lt;/code&gt;。如果是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Si&lt;/code&gt; signed integer 就是有符号整型。&lt;/p&gt;

&lt;h4 id=&quot;intrinsicstd-是干嘛的&quot;&gt;Intrinsics*.td 是干嘛的&lt;/h4&gt;

&lt;p&gt;最后这个枚举值需要定义在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/IR/Intrinsics*.td&lt;/code&gt; 这个里面，就是第一步我们定义的。&lt;/p&gt;

&lt;p&gt;llvm/include/llvm/IR/Intrinsics*.td:&lt;/p&gt;

&lt;p&gt;用 amdgpu 来举例：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/IntrinsicsAMDGPU.td&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是我为了举例自己构造的，用法不一定正确。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def int_amdgcn_rcp_legacy : ClangBuiltin&amp;lt;&quot;__builtin_amdgcn_rcp_legacy&quot;&amp;gt;,
  DefaultAttrsIntrinsic&amp;lt;[llvm_float_ty], [llvm_i32_ty],
  [IntrNoMem, IntrSpeculatable]
&amp;gt;;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;IntrNoMem 这些就是属性，也是定义在 Intrinsics.td 里面的，有解释，比如这个的定义意思就是：IntrNoMem - The intrinsic does not access memory or have any other side effects.  It may be CSE’d deleted if dead, etc.&lt;/li&gt;
  &lt;li&gt;llvm_i32&lt;em&gt;ty 是定义的一个数据类型属性，llvm&lt;/em&gt; 是命名空间的一部分，用于避免与其他库或框架中的类型名冲突。i32 表示 32 位整数，_ty 表示这是一个类型（type）的定义。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他就去这个上面的链接上看。&lt;/p&gt;

&lt;p&gt;顺便提一下这个 def 是啥和用法。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;def 是定义一个 record：def 的语法
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Def       ::=  &quot;def&quot; [NameValue] RecordBody
NameValue ::=  Value (parsed in a special mode)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里的 intrinsic def 用法这么定义的（这个定义我没有找到，为什么这么约束的？我猜应该是在 Intrinsic.td 里面）&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def &amp;lt;name&amp;gt; &amp;lt;args&amp;gt; &amp;lt;ret&amp;gt; [&amp;lt;attrs&amp;gt;] {
  // Definition body
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;name&amp;gt;：正在定义的实体的名称，例如内部函数、指令或数据类型。&lt;/li&gt;
  &lt;li&gt;args&amp;gt;：实体的参数列表，通常由其数据类型表示。&lt;/li&gt;
  &lt;li&gt;ret&amp;gt;：实体的返回类型（如果适用）。&lt;/li&gt;
  &lt;li&gt;attrs&amp;gt;：实体的可选属性列表，提供附加信息。
{}：包含定义主体，其中包含有关实体的特定详细信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClangBuiltin&amp;lt;&quot;__builtin_amdgcn_rcp_legacy&quot;&amp;gt;&lt;/code&gt;就是 NameValue，就是可以在高级语言直接调用的。
RecordBody 就是后面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultAttrsIntrinsic&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;这个 Clangbuiltin 和 DefaultAttrsIntrinsic 都定义在：https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/Intrinsics.td&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Intrinsic with default attributes (disable_default_attributes = false).
class DefaultAttrsIntrinsic&amp;lt;list&amp;lt;LLVMType&amp;gt; ret_types,
                list&amp;lt;LLVMType&amp;gt; param_types = [],
                list&amp;lt;IntrinsicProperty&amp;gt; intr_properties = [],
                string name = &quot;&quot;,
                list&amp;lt;SDNodeProperty&amp;gt; sd_properties = []&amp;gt;
                : Intrinsic&amp;lt;ret_types, param_types,
                            intr_properties, name,
                            sd_properties, /*disable_default_attributes*/ 0&amp;gt; {}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定义好了，高级语言可以条用的接口，那么接下来就是，后端的实现了。&lt;/p&gt;

&lt;h3 id=&quot;2-把-intrinsic-和指令关联起来&quot;&gt;2. 把 intrinsic 和指令关联起来&lt;/h3&gt;

&lt;p&gt;需要到 llvm 的前端把 builtin 函数转化为 intrinsic，这个是前端实现的，我不太熟悉，我用 AI 搜索下了，回答如下：&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
1.&lt;/span&gt; 语法分析

首先，LLVM 的前端分析器（如 Clang）会对源代码进行语法分析，将源代码转换为抽象语法树（AST）。AST 包含了代码的结构和语义信息，包括函数声明、函数调用、表达式等。

在 AST 中，intrinsic 函数会被表示为特殊的节点，其中包含了函数名、参数类型和返回值类型等信息。
&lt;span class=&quot;p&quot;&gt;
2.&lt;/span&gt; 语义分析

接下来，LLVM 会进行语义分析，检查代码的语义是否正确。在这个阶段，LLVM 会检查 intrinsic 函数的调用是否合法，例如参数类型是否匹配、函数是否被定义等。

如果语义分析成功，LLVM 会将 AST 转换为 IR。
&lt;span class=&quot;p&quot;&gt;
3.&lt;/span&gt; IR 生成

在 IR 生成阶段，LLVM 会为每个 intrinsic 函数生成对应的 IR 函数。IR 函数由一系列 LLVM IR 指令组成，这些指令描述了函数的具体操作

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后是 intrinsic 和指令的映射。&lt;/p&gt;

&lt;p&gt;这类文件 llvm/lib/Target/AMDGPU/*Instructions.td 就是定义具体的指令的，&lt;/p&gt;

&lt;p&gt;在这个文件里面 https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/AMDGPU/DSInstructions.td 可以看到关于 ds_consume 的多个定义。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_CONSUME&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_0A_RET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ds_consume&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;defm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_CONSUME&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_Real_gfx6_gfx7_gfx10_gfx11_gfx12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x03d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_CONSUME_vi&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_Real_vi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_CONSUME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看一个，就可以看到这个类 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DS_0A_RET&lt;/code&gt;的定义。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DS_0A_RET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_Pseudo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLdStRegisterOperand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VGPR_32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot; $vdst$offset$gds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mayLoad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mayStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_data0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_data1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;里面就是约束了定义时候的用法，其他就没有了，还有一些属性。&lt;/p&gt;

&lt;p&gt;再来看另外一个，类名&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DS_Real_vi&lt;/code&gt;。用的是一个 64 位的寄存器，0~63，每一位代表的是什么，都写了。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DS_Real_vi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_Pseudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DS_Real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SIMCInstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PseudoInstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIEncodingFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssemblerPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGFX8GFX9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecoderNamespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GFX8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// encoding&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_offset0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_offset1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_gds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ds prefix&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_gws_data0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_data0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_data1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_vdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我强行解读下，估计是小尾端编码：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0~15 位，都是表示 offset&lt;/li&gt;
  &lt;li&gt;16 位：是一个 gds 的值，估计是一个 bool 啥的&lt;/li&gt;
  &lt;li&gt;17-24：是一个操作数，opcode，每个指令不一样，是唯一的&lt;/li&gt;
  &lt;li&gt;25：acc 是加速？准确？不装了，确实不懂……&lt;/li&gt;
  &lt;li&gt;32-55 都是 data，应该是 source 之类的 addr&lt;/li&gt;
  &lt;li&gt;56~63 是 destination，&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-用-amdgpu-的来举例&quot;&gt;3. 用 amdgpu 的来举例&lt;/h3&gt;

&lt;p&gt;首先，需要 https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/IntrinsicsAMDGPU.td 里面定义个 intrinsic :: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgcn_div_fixuph&lt;/code&gt; 函数。必须是 int_ 开头。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_amdgcn_div_fixuph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultAttrsIntrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm_anyfloat_ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LLVMMatchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LLVMMatchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LLVMMatchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntrNoMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntrSpeculatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，在 https://github.com/llvm/llvm-project/blob/main/clang/include/clang/Basic/BuiltinsAMDGPU.def 文件里面定义个 builtin 的函数。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TARGET_BUILTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__builtin_amdgcn_div_fixuph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hhhh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;16-bit-insts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，在 https://github.com/llvm/llvm-project/blob/main/clang/lib/CodeGen/CGBuiltin.cpp 里面，然后对应的 intrinsic 函数，这里返回的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intrinsic::amdgcn_div_fixuph&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BI__builtin_amdgcn_div_fixuph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emitTernaryBuiltin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amdgcn_div_fixuph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样前端就可以调用了，但是在 amdgpu 上还没有映射具体的指令。&lt;/p&gt;

&lt;p&gt;这个需要在 intrinsic 里面添加这个定义。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;defm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V_DIV_FIXUP_F16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VOP3Inst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;v_div_fixup_f16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VOP3_Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VOP_F16_F16_F16_F16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUdiv_fixup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个对于的指令就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v_div_fixup_f16&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;所以高级语言调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__builtin_amdgcn_div_fixuph&lt;/code&gt; 然后根据参数，会具体映射到定义的指令上面：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v_div_fixup_f16&lt;/code&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;end&lt;/p&gt;

</description>
        <pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/21/llvm-learning-define-intrinsics-1/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/21/llvm-learning-define-intrinsics-1/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        
      </item>
    
      <item>
        <title>如何编译 SHOC（可扩展的异构计算基准套件）</title>
        <description>&lt;h1 id=&quot;什么是-shoc&quot;&gt;什么是 SHOC&lt;/h1&gt;

&lt;p&gt;可扩展异源计算基准套件（SHOC）是一组基准程序，用于测试系统的性能和稳定性。其最初的重点是其最初的重点是包含图形处理器（GPU）和多核和多核处理器的系统，以及 OpenCL（openclspec）编程标准。&lt;/p&gt;

&lt;p&gt;它既可用于集群，也可用于单个主机。&lt;/p&gt;

&lt;p&gt;OpenCL 是一个开放标准，用于对各种类型的计算设备进行编程。&lt;/p&gt;

&lt;p&gt;设备编程的开放标准。OpenCL 规范描述了一种编程语言。&lt;/p&gt;

&lt;p&gt;内核的编程语言，以及用于在支持 OpenCL 的设备上运行的应用编程接口 (API)，用于将数据传输到此类设备并在其上执行内核。
内核的应用编程接口（API）。&lt;/p&gt;

&lt;h1 id=&quot;shoc-可以验证什么&quot;&gt;SHOC 可以验证什么？&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142732.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;稳定测试&quot;&gt;稳定测试&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142513.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spmv&quot;&gt;SpMV&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142534.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;能效&quot;&gt;能效&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142555.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;资源竞争&quot;&gt;资源竞争&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142612.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gpu-api-比较&quot;&gt;GPU api 比较&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142639.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;如何编译-shoc&quot;&gt;如何编译 SHOC&lt;/h1&gt;

&lt;p&gt;参考文件：https://github.com/vetter/shoc/blob/master/INSTALL.txt&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拉代码 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/vetter/shoc.git&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;进入目录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd shoc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure&lt;/code&gt; 来配置编译选项。这里可以指定一些参数来运行： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--with-cuda, --with-opencl, --with-mpi&lt;/code&gt; ,也可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure --help&lt;/code&gt; 查看其他的选项。&lt;/li&gt;
  &lt;li&gt;编译&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make -j 88&lt;/code&gt; 来执行编译。这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-j&lt;/code&gt;参数是指定并行编译的线程数，可以根据自己的机器来设置。&lt;/li&gt;
  &lt;li&gt;可选， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make install&lt;/code&gt; 来安装 bin 到指定目录。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是我的执行命令：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/vetter/shoc.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;shoc
&lt;span class=&quot;c&quot;&gt;# ./configure CPPFLAGS=&quot;-I/usr/local/cuda/include&quot; CUDA_CPPFLAGS=&quot;-gencode=arch=compute_60,code=sm_60&quot; LIBS=&quot;-lcuda -lcudart&quot; LFLAGS=&quot;-l/usr/local/cuda/lib64&quot; --with-cuda&lt;/span&gt;
./configure &lt;span class=&quot;nv&quot;&gt;CPPFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-I/usr/local/cuda/include&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CUDA_CPPFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LIBS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-lcuda -lcudart&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-l/usr/local/cuda/lib64&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-cuda&lt;/span&gt;
make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 88
make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可能遇到的问题：
https://github.com/vetter/shoc/issues/67
CUDA10.0（不含）之后的版本会出现的问题：编译失败
执行 configure 配置时加入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lcuda -lcudart&lt;/code&gt; 参数，指定 cuda 库和 cudart 库。&lt;/p&gt;

&lt;p&gt;也可以参考这个教程，shell 已经写好了：
https://openbenchmarking.org/innhold/db04416737e558c3510d20be04d2574e63e0a548&lt;/p&gt;

&lt;h1 id=&quot;如何执行-shoc&quot;&gt;如何执行 SHOC&lt;/h1&gt;

&lt;p&gt;执行：&lt;/p&gt;

&lt;p&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perl tools/driver.pl -s 1 -d 0 -cuda&lt;/code&gt; 来执行测试。这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt;参数是指定测试的规模，就是节点数量，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt;参数是指定测试的设备，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cuda&lt;/code&gt;参数是指定测试的类型。&lt;/p&gt;

&lt;p&gt;也可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./bin/shocdirver -h&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;结果截图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811143648.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://blog.csdn.net/babyfacer/article/details/6989093&lt;/li&gt;
  &lt;li&gt;https://openbenchmarking.org/test/pts/shoc&lt;/li&gt;
  &lt;li&gt;https://on-demand.gputechconf.com/gtc/2010/posters/I05-The-Scalable-HeterOgeneous-Computing-(SHOC)-Benchmark-Suite.pdf&lt;/li&gt;
  &lt;li&gt;https://www.jianshu.com/p/9cd6708246c9
(1) shoc/shoc-manual.tex at master · vetter/shoc · GitHub. https://github.com/vetter/shoc/blob/master/doc/shoc-manual.tex
(2) Issues · vetter/shoc · GitHub. https://github.com/vetter/shoc/issues
(3) SHOC: The Scalable HeterOgeneous Computing Benchmark Suite. https://usermanual.wiki/Document/shocmanual.432449542.pdf&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/08/11/how-compiler-shoc/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/08/11/how-compiler-shoc/</guid>
        
        <category>SHOC</category>
        
        <category>benchmark</category>
        
        
      </item>
    
      <item>
        <title>98 -  云南游记</title>
        <description>&lt;p&gt;记录下这次的旅游线路和见闻，路线为：成都 - 大理 - 丽江 - 云南 - 成都，时间总共 9 天。&lt;/p&gt;

&lt;p&gt;第一天：大部分时间实在高铁上，终点是大理才村。8 点成都南站出发，达到广通北，转车到大理，花费时间为 8 个小时左右。&lt;/p&gt;

&lt;p&gt;在广通北，中转的时候，这个站点很小，如果有中转的话，建议在多带一点水和实物，站里面没有卖的。&lt;/p&gt;

&lt;p&gt;经过 1 个小时达到大理，然后打车达到洱海才村名宿，60 左右的打车费，找了一家本地的餐馆，吃的是菌菇类的菜，消费不高，8 个人，7 菜一汤，不到 300 元，年轻人不要点太多，晚点去夜市，还有的吃，不然就吃不爽了。&lt;/p&gt;

&lt;p&gt;吃完之后到 50 来开外的洱海，散步，特别凉快。等天黑了之后，就去夜市，夜市小吃也特别的丰富，价格特别的便宜。&lt;/p&gt;

&lt;p&gt;第二天：包车游览这个洱海一圈，重要景点自己挑，我没有老人和小孩，去了 S 湾、廊桥、喜洲、xx 古城；单个车 500 元左右。早上 9 点出发，晚上 8.30 回到起到。&lt;/p&gt;

&lt;p&gt;时间有限，有好多景点都没有来得及看。&lt;/p&gt;

&lt;p&gt;还间歇性下雨，出门备好雨伞和雨衣，我比较喜欢雨衣，吃东西也不耽搁手。&lt;/p&gt;

&lt;p&gt;由于已经逛了一天了，晚上就找了一家民宿门口的餐馆，吃的石锅烤肉，和烤肉差不多，老板是本地人，有时候听不懂我们说话，经常会叫年轻人过来服务我们。&lt;/p&gt;

&lt;p&gt;第三天：出海一圈，然后去古城（大理大学旁边）&lt;/p&gt;

&lt;p&gt;出海就是在湖中看周围的山和村子的全貌，天气好的话，记得多拍照，美得很。&lt;/p&gt;

&lt;p&gt;打车去古城，有电动三轮车，每人 5 元。这个速度快，其他车估计要堵车。&lt;/p&gt;

&lt;p&gt;之前去过的这些地方（除了喜洲人多外），人都很少，但是到了古城就能看到很多的人，又是旅游旺季，特别多的跟团。我们的节奏就是吃，逛，拍照。&lt;/p&gt;

&lt;p&gt;第四天：早上 10 点出发，12 点高铁出发去往，丽江束河古镇，同样是名宿（便宜）&lt;/p&gt;

&lt;p&gt;到了基本上就是下午了，休息下，就开始逛古镇，找了一家川菜馆（有老人，估计中午饭没好好吃），消费 500 元左右，菜味道一般。&lt;/p&gt;

&lt;p&gt;吃了就往下到一个「四方听音」广场，这个地方晚上可以看篝火，也可以跟着跳。但是是不下雨，下雨就没有了。&lt;/p&gt;

&lt;p&gt;我们走到这个地方就开始下雨，就去了一家旁边楼上的歌吧，点了一壶茶，2 小杯果汁，价格有点贵 200 多。&lt;/p&gt;

&lt;p&gt;第五天：打车去丽江古城&lt;/p&gt;

&lt;p&gt;太大了，从南门进入，逛到下面，边走边吃，吃了午饭。古城太大了，要全部逛完，几乎要一个礼拜吧。这个就像看书，只看自己感兴趣的东西，或者有益的东西，不要想小学生那样，一字一字的全部看完。&lt;/p&gt;

&lt;p&gt;午饭吃的乌鸡米线，其他吃的人特别少，只有这个米线，还要排队，应该是经过筛选的，没有啥问题。&lt;/p&gt;

&lt;p&gt;吃了午饭去木府，这个地方有很多领导人都来过。最好请一个导游，看这种没有导游，基本上就是看个热闹，啥也看不懂。&lt;/p&gt;

&lt;p&gt;网上走，就是万古楼，要单独收门票（35 元），上面就去了一个楼，还有 2 个观景台，观景台就在售票窗口旁边，视野开阔，可以看到整个古城。还是整个古城，一面是砖瓦白灰的古城，一面是现代风格的高楼大厦。&lt;/p&gt;

&lt;p&gt;万古楼有望远镜，可以看到很远的东西，比如看到看到一排墙，墙上有一些象形字体。&lt;/p&gt;

&lt;p&gt;下午返回，休息下，大众点评找了一家不错的排骨汤锅。&lt;/p&gt;

&lt;p&gt;第六天：打车去白沙，惬意&lt;/p&gt;

&lt;p&gt;逛古镇，还有一个壁画的博物馆，吃了一家腊排骨汤锅，下午找了一个地方看玉龙雪山。&lt;/p&gt;

&lt;p&gt;晚上在束河古镇吃的云上鱼，这个吃法很新鲜，但是就是煮的太慢了。&lt;/p&gt;

&lt;p&gt;吃了之后，往下走一点，有一个四方听音，今天天气不错，终于在 8.30 开始了篝火晚会，有专门的人组织这个活动。如果之前在古城没有见到人山人海，那在这里是不会辜负你的期望，特别热闹。&lt;/p&gt;

&lt;p&gt;第七天：早上 10 点，出发去云南城区，也是名宿（一个套 4 房，一天 700 左右）&lt;/p&gt;

&lt;p&gt;到了名宿之后，大概是下午 2 点左右，休息会儿，然后出发吃饭。&lt;/p&gt;

&lt;p&gt;我个亲戚在这边工作，晚上宴请了我们，吃当地的一家野菌皇（宝海店），看了下大众点评的，人均 100 左右。&lt;/p&gt;

&lt;p&gt;一大锅菌菇，一只鸡 + 一个团鱼，还有一些当地的特色小吃，就是菌菇的各种烹饪。&lt;/p&gt;

&lt;p&gt;第八天：滇池，聂耳博物馆，花池古街&lt;/p&gt;

&lt;p&gt;滇池从边上看不咋样，水富营养化了，呈绿色。看多了还有点不舒服。下面也没有什么游览的地方，建议还是做缆车上山看看。&lt;/p&gt;

&lt;p&gt;做缆车上西山，上了西山之后，还有一个龙门景区，需要再次买票，人超级多，就没有去龙门景区。&lt;/p&gt;

&lt;p&gt;大中午的，这个时候放眼望去，黑压压的一片，全是人。就看了免费的聂耳博物馆，然后做大巴车下山，山路崎岖，车程估计 20 分钟左右，但是自己感觉做了一个世纪，天昏地暗的。&lt;/p&gt;

&lt;p&gt;下山的时候，要逛古街，司机会在古街停，但是说的是地铁口，我们就不知道，结果往下去了，然后走回来，热得不行。&lt;/p&gt;

&lt;p&gt;古街，这个地方就是吃，看上喜欢的吃吧，价格也不贵。&lt;/p&gt;

&lt;p&gt;第九天：早上 8 点出发，返回成都。&lt;/p&gt;

&lt;p&gt;从 25°的天气，来到了 43°烤炉，在四川土生土长，43°这样的高温，似乎也觉得就这样，毕竟也只是室外温度，也不是天天都在室外。&lt;/p&gt;

&lt;p&gt;我从事的是程序员，可以做一些远程类的工作。云南四季如春。以为云南很适合我，可以远程办公。&lt;/p&gt;

&lt;p&gt;生活了一周之后，发现并不是现象的那样，在回来的高铁上，我的皮肤开始发痒，这个是在成都冬天经常会出现的情况。难受 ~&lt;/p&gt;

&lt;p&gt;如果要去这个地方长期生活，建议先去这个地方待上一段时间，看看是不是你想要的生活。再做长久打算。可以用到生活上的其他事情上面。&lt;/p&gt;

&lt;p&gt;这次云南之行，有小孩，老人，旅途就是也轻松居多，也不用赶路，整体下来就是一个放松的状态。&lt;/p&gt;

&lt;p&gt;但是对于&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/07/15/yunnan-travel-note/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/07/15/yunnan-travel-note/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>97 -  做确定的事情，长期有益</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;赚几千万，赚一个亿是不确定的，但是爱护好自己的身体，保持健康，这是一个确定的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们生活在一个看重金钱和地位的社会。许多人为了事业奋斗，经常过度工作而忽视了身体健康。我深深理解大家追求成功的渴望，但是我们千万不能忘记生活的本质。&lt;/p&gt;

&lt;p&gt;赚钱只是手段，绝不能成为我们生活的全部。我们要时刻记住，锻炼身体，丰富心智，与家人朋友团聚，这些才是生活和人生的真正意义所在。如果为了赚钱而舍弃了健康和关系，哪怕积累了千万财富，那又有什么意义呢？&lt;/p&gt;

&lt;p&gt;不要本末倒置。&lt;/p&gt;

&lt;p&gt;比如说，你是否能赚到几百万或者几千万，完全是未知数。谁也无法保证一定能赚到巨款。但是，如果你从现在就开始关注身体，养成健康的生活习惯，那就是你能够确定做到的事。&lt;/p&gt;

&lt;p&gt;每天保证睡眠时间，积极运动锻炼，饮食加强营养均衡，这样都有利于你的身心健康。即使最终没能赚到巨款，起码你活得健康快乐。&lt;/p&gt;

&lt;p&gt;相反，如果现在不爱惜自己的身体，将来即使赚了钱，也可能因为疾病而无法享受。比如长期熬夜加班导致身体亏空，到头来发现自己患上了失眠症、胃病等疾病。或者工作压力大，没有时间运动，长期缺乏锻炼，以至患上心血管疾病。届时，即使你已经是一个百万富翁，又有何益呢？&lt;/p&gt;

&lt;p&gt;用本山老师的话说：人最大的悲哀是人走了，钱用完……&lt;/p&gt;

&lt;p&gt;在追求事业的同时，千万不要忽视对自己身体的照顾。保持健康的生活作息，健康饮食，经常进行适量运动，做好心理调适。这对于身体机能的维护，情绪的稳定都非常重要。只有当我们拥有健康的身体和心态，才能更好地享受生活，感受人生的意义。&lt;/p&gt;

&lt;p&gt;让我们一起来关爱自己的身心吧。健康生活，快乐生活，这是我们现在就能够掌握的宝贵财富。即使最终没能赚到巨款，起码我们活得健康、快乐、有尊严。&lt;/p&gt;

&lt;p&gt;请记住，没有任何金钱能够买来健康。&lt;/p&gt;

&lt;h2 id=&quot;读书日记&quot;&gt;读书日记&lt;/h2&gt;

&lt;p&gt;最近在看一本书「终身成长」，我读了之后收货不错，有点后悔读迟了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/YLtemv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无论是在商界、体坛、婚恋关系还是亲子教养中，这种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;成长型思维模式&lt;/code&gt;都至关重要，它决定了我们面对失败时的复原力，面对挑战时的承受力，面对我们需要为之努力的事业时付出努力的多寡。这种思维模式标志着一种诚实的态度，因为真正的成功从来不是偶然的，偶然得来的成功并不可靠。&lt;/p&gt;

&lt;p&gt;比如：龟兔赛跑的故事本想强调努力可以有多重要的意义，却给了努力一个坏名声。它巩固了人们“只有缺乏天赋的人才需要努力”的观念，并让人们以为只有在非常罕见的情况下，当有天赋的人失误时，后进者才有机可乘。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;从这里开始&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/649e79ecba16d4cb98641f02&quot;&gt;我不祝你成功上岸，我祝你选完不后悔&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;近几年，每每看到许多年轻人把考研当成本科后的最佳选择，把考公考编当成自己唯一可能的上岸之路，如鲠在喉——当可能只适合一部分人的「考公考编考研」，渐渐被吹捧成了最具普适性的答案，一个没有多少社会阅历的人，究竟该如何理解这一切？怎么选才不会后悔？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/hsTwbrsdQQVOBlmGiksqKA&quot;&gt;分享三个坚持写作的小技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先说结论，能长时间持续写作的人，基本上都满足这三点：降低写作成本，提升写作效率，持续产生内容&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://claude.ai/chats&quot;&gt;Claude.ai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;官方支持了 PDF 文件上传，结合 100k 的上下文，提供了丝滑的 PDF 问答体验。对整个文档进行理解和分析，而不是使用文本切块。&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/07/09/do-certainly-thing/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/07/09/do-certainly-thing/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
  </channel>
</rss>
