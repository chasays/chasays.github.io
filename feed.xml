<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>人生就是干</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 29 Oct 2022 06:36:15 +0000</pubDate>
    <lastBuildDate>Sat, 29 Oct 2022 06:36:15 +0000</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>61 - 经验</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/1OfZOS.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;曾经有个好朋友给我说，为什么足球有这么多的人喜欢。我当时也很迷，能说出的理由估计就那么几种，历史原因、身边都人都喜欢，耳濡目染，商业的成功等等。&lt;/p&gt;

&lt;p&gt;2 支强劲的队伍，你始终不知道下一刻谁会进球，没有终点哨声响起的时候，结局也都不知道是什么，这正是这个运动所在的惊喜。&lt;/p&gt;

&lt;p&gt;电子游戏也是如此，最近Dota 世界邀请赛正在如火如荼的进行着，上周末进行的一场 BO3 比赛相当的精彩，如果你是喜欢这个游戏，或者想我一样，曾经玩过 Dota 的人，这一场比赛不能错过。&lt;/p&gt;

&lt;p&gt;跌宕起伏，全程无尿点。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://www.bilibili.com/video/BV16m4y1w7NB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于一只新的队伍来说，第一次站在这么高的舞台，比起老牌的 Liquid 战队，确实经验不足，丢掉了这场比赛。不过能在这样的情况下获得宝贵的经验，也是难能可贵。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/634903f22a992d56e91e5e6d?s=eyJ1IjogIjYwZGU4ZDZlZTBmNWU3MjNiYmI0MzlhZCJ9&quot;&gt;养老诈骗花样多，子女咋办听我说&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本篇播客里面提到的一个诈骗方式，有足够的多的样本，分成不同的组，每天给他们不同的预测结果，最后 10 天后，能有一组里面全部预测正确，就能骗到这部分人。&lt;/p&gt;

&lt;p&gt;我也是第一次听到这么一个方法，很容易就骗到人，但是要足够多的样本，因为是 2 分法，10 人一组，10 次预测，就需要 10 * 2^10 = 10240人，在 10000 人找到 10 人。骗子有这个心思高这么多人，为啥不搞点有意义其他的事情呀。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/PZvJdrqnKpMrbMNhBGEMbA&quot;&gt;半导体厂商MARVELL裁员&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/STydP0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;国际半导体大厂纷纷调整在华业务。26日晚，传出MARVELL将开始裁员，本周裁员主要涉及的部门有Switch验证部门和storage validation部门。27日，美满此次裁员的赔偿方案曝光，将给予被裁员工2个月的缓冲期，传赔偿方式将为N+3，解除日所在月发薪日发放。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/_SWUxOKxg04Db1g0BXMFuw&quot;&gt;L4自动驾驶独角兽官宣倒闭&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在刚结束的内部全员会上，员工已经被告知公司关停清算，但福特和大众会尽可能提供工作机会转岗——而福特和大众，正是ArgoAI的两条大腿。&lt;/p&gt;

&lt;p&gt;ArgoAI，L4自动驾驶驾驶领域无人不知的明星独角兽，同样源流自谷歌无人车团队的创业项目，2016年创办，一年之后就被福特汽车以10亿美元的天价收购，成为自动驾驶掘金浪潮的开端。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/QGREXPy13M5FM5-bVS1zgA&quot;&gt;马斯克完成440亿美元收购推特&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/1dNCUI.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;昨天，马斯克就已经抱着一个大水槽高调迈进推特总部大楼，并发了一条推特宣布：进了推特总部了，let that sink in !&lt;/p&gt;

&lt;p&gt;Let that sink in是社交媒体上的常用语，一般是在宣布一个重要的事情之后，宣告这只是开始，请大家多关注后续。这个短语也经常被理解为“你品，你细品”。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kwebio/kweb-core&quot;&gt;kweb-core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/ZJd3qV.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kweb是一个面向后端开发人员的Kotlin web框架。它旨在消除服务器/浏览器的分离，以便开发人员能够专注于构建。Kweb可以创建和操作DOM元素，并将实时数据库中的值绑定到DOM元素上，以便在数据库更改时自动更新。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://architecturenotes.co/redis&quot;&gt;redis特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;远程字典服务（Remote Dictionary Service，简称Redis）是一个开源的键值数据库服务器，用于许多事情，包括发布-订阅机制、流和队列。它在另一个数据库（如MySQL）前面使用内存中的数据库，以帮助提高应用程序性能。Redis还可以用作一个成熟的主数据库。本文讨论Redis及其特性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://simplelocalize.io/blog/posts/what-is-cors/&quot;&gt;什么是 CORS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/lmz2Ls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之前推荐过一个关于 CORS 的工具，今天来推荐下这篇文章介绍 CORS 。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cloudwego/hertz&quot;&gt;Golang HTTP框架 hertz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hertz是一个用于构建微服务的Golang HTTP框架。它在字节跳动内部被广泛使用。赫兹具有高扩展性、多协议支持和网络层交换。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/samchon/typescript-json&quot;&gt;typescript-json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TypeScript JSON是一个提供JSON相关函数的转换器库。它具有强大的运行时类型检查器和快速JSON。stringify函数由类型验证保护。可以使用类似工具的基准结果。&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/10/29/experience/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/10/29/experience/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>60 - 当前最优选择</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;本周参加公司的一次圆桌，我也是第1次参加线下的圆桌，没什么准备，所以说收获不是很多。我觉得以后要参加这样的技术类圆桌，提前了解好话题是什么？主要分享的内容点是什么？这样好自己有个准备，做充分的提问和分享。&lt;/p&gt;

&lt;p&gt;同时也发现自己还有一个不好的习惯，就是在介绍自己的时候总是不太自信（我一个二本面对一个博士，确实难免有些不自信），介绍几句话带过，大概几十秒到一分钟就介绍完，这发现是自己一个不自信的地方，觉得可以去改善，如果大家有什么好的建议可以推荐给我，谢谢。&lt;/p&gt;

&lt;p&gt;当前情况，一般人很难找到最好的解，那么就选择适合当前最优的一个解，最近看到一篇文章，比如说当前投资，那可能是把现金换成资产，那可能就是一个最不差的选择，也是当前的最优解吧。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/g0CacZyZIenrk1wRd5rRkA&quot;&gt;浅谈赛博朋克视觉风格的演变&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221022212146.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当这三个词出现在一起，相信大家的脑海一定会想到“赛博朋克”。是的没错，这些确实都是属于赛博朋克视觉风格里的元素，但就好像吃火锅只吃了配菜，真正的赛博朋克视觉风格可远远没有只用这三个词就能够定义完那么简单。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/568616670?utm_id=0&quot;&gt;DJI Mavic无人机最初的产品定义文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221022212020.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DJI 创始人看了这份文档觉得满意，我也就放弃了美国的工作生活回国全力去打造这款产品。而这就是Mavic项目的开端。现在回过头来看，这份文档否决掉了当时DJI考虑要做的一个不太靠谱的方向（类似 Anura，300g以内，折叠后很方便放进口袋的大小，以当时的技术积累，做不出好的产品性能，不过几年后的 Mavic Air 和 Mavic Mini，逐步实现了这个最初的愿望），取而代之定义了一个新的方向和产品架构，从而更能贴近用户的需求和照顾技术的可落地性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/BZtP8T21N7vj0_DoS2ZwEw&quot;&gt;孟岩： 聊聊几件事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自己那个地方的股票都不好受，看看自己的账户，20%的亏损，瞬间就崩溃了。前几天看到大牛猫的说自己的港股最近几年的投资亏了200w，想想自己还是蛮幸福的。基数小，亏得少。&lt;/p&gt;

&lt;p&gt;作者说道：即使所有悲观预期都发生，在估值极低的情况下，把现金换成资产，可能也是最不差的选择。未来，很可能不是我们所想的那样。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://electrek.co/2022/10/20/tesla-next-gen-electric-car-platform-half-price&quot;&gt;特斯拉正在研究下一代电动汽车平台，价格只有一半&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221022214250.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;特斯拉的工程团队正在开发一个下一代电动汽车平台。新平台将以生产Model 3所需成本、劳动力和工厂空间的一半来生产电动汽车。新的电动汽车的价格可能会在25,000美元到35,000美元之间。该公司已经完成了Cybertruck和Semi的工程。20w人民币以内的汽车怕是找不到对手了。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.loongson.cn/pdf/computer.pdf&quot;&gt;计算机体系结构基础-第三版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221022212441.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和老板一起参见的圆桌，分享的一笨作为程序员必修的课程。我是一个非科班出生的，为了混口饭吃，开始在补一些技术债。还有一个在线的github.io文档：https://foxsen.github.io/archbase/&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://threadreaderapp.com/thread/1582895644863131648.html&quot;&gt;RLHF-根据人类偏好的强化学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RLHF（从人类偏好中强化学习）涉及使用从人类反馈中强化学习的方式对模型进行微调。这使得模型更有帮助，危害更小，而且还能提高性能。在测试中，RLHF模型比GPT-3模型大100倍，更受欢迎。Humanloop与CarperAI合作，为开源社区开发了第一个RLHF训练的类似GPT-3的模型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/11ty/webc&quot;&gt;WebC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WebC是一个用于创建单文件HTML组件的工具，不需要任何特殊的元素约定。它有一个独立于框架的独立的HTML序列化器，用于生成Web组件的标记，编译工具用于聚合组件级资产，内置CSS前缀，等等。WebC支持流媒体、阴影DOM和异步。&lt;/p&gt;

</description>
        <pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/10/22/current-best-choice/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/10/22/current-best-choice/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>59 - 兴趣+赚钱</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221015195315.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我写这份newsletter也是强迫自己了解一些互联网相关的知识，能不能从这里面找到自己的擅长的地方，然后用自己擅长的事情去赚钱去谋生。&lt;/p&gt;

&lt;p&gt;如果一个人他把自己的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;兴趣爱好、喜欢的东西，同时又是自己擅长，坚持能做下去的&lt;/code&gt;，基本上这个事情想失败都难。在自己的兴趣爱好上面能赚到钱，那真的是不容易了。&lt;/p&gt;

&lt;p&gt;最近一直在想我在做什么？我想做什么？有没有我喜欢、有成长、还能挣到钱的事？&lt;/p&gt;

&lt;p&gt;你会发现很难找到自己兴趣点，你的优势是什么？我的方式就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;大力出奇迹，就是要不断的试错&lt;/code&gt;。试错的结果、成本是你能接受的，那就不停的去试错，总有一天你会找到你自己的优势，自己的兴趣点，让这两个结合起来，应该会走的很远，顺便还能赚到钱。&lt;/p&gt;

&lt;p&gt;本周一句话：避免一些冲突，弥合一些矛盾。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/H5U293JiEn0DPUsCnGV9dw?from=singlemessage&amp;amp;isappinstalled=0&amp;amp;scene=1&amp;amp;clicktime=1665743015&amp;amp;enterid=1665743015&quot;&gt;乱世不闯新加坡&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们都有一个最深的感慨，只要你是华人，无论什么国籍，无论住哪里，无论中文是否流利，你的根都一直在中国，在东亚大陆，根深才能叶茂，这是变不了的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/bYD8y0gm8DdTlLmoIpHEDg&quot;&gt;我，阿里P7，找不到工作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221015192732.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作者一开始找工作信心满满，想想自己作为阿里P7的身份，工作肯定是容易找的，可以去其他大厂带数据小组，也可以去大型传统企业做数据总监。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/OZgFFUnIfPZo2Cvb21vqMQ&quot;&gt;大众汽车集团强化在华自动驾驶领域研发实力，旗下软件公司CARIAD携手地平线成立合资公司&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221015192150.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先不说地平线的产品如何，就这落地商业和大众的投资确实是好东西。美国的打压我的芯片，那我们和欧洲、日韩合作，那美国也会打压日韩和欧洲，反正是好事情。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mashable.com/article/brazil-fine-apple-iphone-charger?taid=634930f90c97a30001d3cf9d&quot;&gt;苹果因销售不带充电器的iPhone被罚款1900万美元&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221015193308.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;苹果在巴西因iPhone充电器而陷入困境–再次陷入困境。据路透社报道，巴西法院对苹果公司罚款1亿雷亚尔（1900万美元），因为在巴西销售的iPhone不包括充电器。虽然苹果公司坚持认为，它决定运送没有充电器的iPhone手机是为了减少碳排放。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nickmcd.me/2022/10/01/procedural-wind-and-clouds-using-gpu-accelerated-lattice-boltzmann-method&quot;&gt;使用GPU加速的格子玻尔兹曼方法模拟程序化地形上的风&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221015194320.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一篇关于GPU图形相关的技术文章，包含大量的数学知识。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ics-py/ics-py&quot;&gt;ics-py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;iCalendar 是一种广泛使用的有用格式，但对用户并不友好。Ics.py 的存在是为了让我们有能力在没有任何知识的情况下创建和阅读这种格式。&lt;/p&gt;

&lt;p&gt;自己更新了一个可转债日历提醒，发现之前有个项目没有维护更新了，用集思录的接口来自动更新。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://raw.githubusercontent.com/chasays/kzz.ics/main/kzz.ics&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/about/news/postgresql-15-released-2526&quot;&gt;PostgreSQL 15&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;免费和开源的关系型数据库管理系统&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PostgreSQL 15已经发布。这次更新增加了流行的MERGE命令，增加了监控数据库状态的功能，以及在本地和分布式部署中管理工作负载的改进。这篇文章详细介绍了PostgreSQL 15中的所有显著变化。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://planby.netlify.app/?ref=producthunt&quot;&gt;Planby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221015193943.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Planby 是一个基于React的组件，用于实现时间线。它可以用来创建时间表、日程表等。主题和项目是可定制的，该组件有一个API，可以与其他第三方UI库集成。Planby使用一个自定义的虚拟视图，允许开发者对大量的数据进行操作。&lt;/p&gt;

</description>
        <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/10/15/advanced/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/10/15/advanced/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>58 - 游戏</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;国庆长假已经过去了，今天都快上班近5天了。假期期间我主要的娱乐活动就是看电影、打游戏。&lt;/p&gt;

&lt;p&gt;不得不说游戏真的是把及时反馈做得好，让你持续不断的投入，多巴胺不停的分泌，不过身体有点吃不消，玩几把之后能明显感觉到眼睛干涩，酸痛。玩手机的姿势也是不知不觉在半个小时左右，基本上保持一个姿势。&lt;/p&gt;

&lt;p&gt;还发现要戒掉游戏也有一个比较好的方法，关掉声音，体验上要折半。&lt;/p&gt;

&lt;p&gt;电影没有啥好推荐的，大部分高分悬疑片都看过了。看了几部老片子，值得推荐的是：教父2、星际穿越、辛德勒的名单，每一帧都值得看。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.meituan.com/2021/01/22/flutter-in-harmonyos.html&quot;&gt;让 Flutter 在鸿蒙系统上跑起来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个是2021年就已经实现了，在现有的众多跨端框架当中，Flutter 以其自渲染能力带来的多端高度一致性，在新系统的适配上有着突出的优势。虽然Flutter 官方并没有适配鸿蒙的计划，但经过一段时间的探索和实践，美团外卖 MTFlutter 成功实现了 Flutter 对于鸿蒙系统的原生支持。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/_fpUIELH8E0FmN8E2w9WAw&quot;&gt;那位用Rust重写数据库的创始人来复盘了：删除27万行C++代码，值吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rust是一种很酷的编程语言，每个人都应该试试。但不要仅仅因为这样做很酷而重写你的项目。如果你正在考虑是否用Rust重写你的生产级项目，那么要多思考几个问题，比如性能、安全、重构的时间成本、当前团队成员的能力等。这样多思考，反而是节约时间的最好方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2022/10/06/take-advantage-of-git-rebase/&quot;&gt;巧用git的rebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你经常使用git，建议花几分钟可以阅读下这篇文章。在Git中，rebase是一个非常通用和有用的工具，用于重做提交。用它来实现在高质量提交和合并请求中提出的高质量修改的工作流程。它使你的开发人员和审查人员更有效率。代码审查和调试也变得更容易和更有效。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uni-algo/uni-algo&quot;&gt;C/C++的Unicode算法实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有很多C/C++的Unicode库实现了随机的Unicode算法，但很多库根本不处理不符合格式的UTF序列。
在最好的情况下，你会得到一个异常/错误，在最坏的情况下是未定义行为。最大的问题是，在99%的情况下，一切都会好起来。出于安全考虑，这是不合适的。
这个库可以正确地处理这些问题（实际上不仅有不符合格式的序列），而且总是根据Unicode标准。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.languagereactor.com/&quot;&gt;languagereactor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221002121756.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;学习英语的同时让自己感觉没有那么的颓废。&lt;/p&gt;

&lt;p&gt;语言反应器是学习语言的强大工具箱。它帮助您发现、理解和学习原生材料。学习会变得更有效、更有趣、更愉快！同类型的还有voicetube这样的软件，所以学习英语资料、工具太多了，关键的还是在于人。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hcfy.app/&quot;&gt;支持DeepL的浏览器插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;划词翻译支持 9 个国内外热门的翻译服务，包括但不限于谷歌、DeepL、百度、有道等，且支持百度翻译专业版和阿里翻译专业版，能让你在网络文学、金融财经、科技电子、水利机械、生物医药、电商、社交等专业领域下获取更专业的翻译结果。&lt;/p&gt;

&lt;p&gt;推荐一个好用的用蓝牙根据距离自动锁定解锁 mac 的小工具，叫做 BLEUnlock， github.com/ts1/BLEUnlock，可以超简单匹配有蓝牙的设备，如手机手表手环，当你离开电脑自动锁屏，走近自动解锁电脑，很聪明的样子来保护隐私，当然也可以用 mac 触控角设置左下角鼠标移上即锁屏&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebookincubator/AITemplate&quot;&gt;AITemplate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AITemplate是一个Python框架，将深度神经网络转换为CUDA/HIP C++代码，用于闪电般的推理服务。它易于扩展，并支持全面的融合。AITemplate不依赖于第三方库或运行时。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/parvardegr/sharing&quot;&gt;一个共享工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221012083538.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;sharing是一个命令行工具，用于将目录和文件共享到iOS和Android设备。它可以共享目录和文件，而无需任何额外的客户端应用程序。两台设备必须连接到同一个Wi-Fi，否则共享设备应该具有公共IP。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ellie/atuin&quot;&gt;Atuin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221012084107.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Atuin用一个SQLite数据库取代了你现有的shell历史记录，并为你的命令记录了额外的背景。此外，它还通过Atuin服务器，在机器之间提供可选的、完全加密的历史记录同步。&lt;/p&gt;

</description>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/10/07/play-game/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/10/07/play-game/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>57 - 反馈</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;本来这个国庆长假7天，基本上都计划的七七八八了。因为之前成都静态管控了将近一个月，20天左右，还说准备在国庆去哪里，小孩被寄宿到外地去上学，这次当地的疫情也回不来了，现在我一个人在家，老婆孩子都没在身边。&lt;/p&gt;

&lt;p&gt;最大的就是吃饭是个问题，因为一个人煮饭，不好控制量，煮太多就怕有剩余，煮太少不够吃，吃不爽。只有叫外卖，我都不知道吃什么外卖了，最恐怖的是这才刚开始，关于一个人的生活，吃什么之类的，你们有什么建议么？&lt;/p&gt;

&lt;p&gt;如果&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;做一件事情的原因来自于某一个反馈，那么这件事情大概率是做不长久的&lt;/code&gt;，最近听王建硕前辈说到这个点。举个例子，比如说为了减肥，就去跑步，但是实际这个对减肥真的是微乎其微，减肥最重要的就是管上嘴，迈开腿。&lt;/p&gt;

&lt;p&gt;后面我觉得这个 newsletter 会往一个方向去发展，就是写我自己感兴趣的东西，不管多少，不管是人物传记，还是科技类的文章。包括不限于现在所处的芯片行业，以及芯片行业的一个细分领域做显卡GPU，去了解相关的新闻相关和科技动态。&lt;/p&gt;

&lt;p&gt;这样的话我觉得可以把我的这些信息分享出来，能够去扩展我的一个圈子，同时能触及到相同知识领域的一批人。&lt;/p&gt;

&lt;p&gt;前前后后后写博客、公众号大概写了几十万字上百万字，就是我获取的知识以及给我带来的回报不是用这个来去衡量的，但是也在从侧面上反映，从不断的输出中，我学到了不少东西，吸收到很多东西。&lt;/p&gt;

&lt;p&gt;我最近搞了一个微信群，主要是芯片相关的技术、信息等，如果你感兴趣可以扫码加入，过期了也可以加我微信「xiaorik」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221001205208.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/yvcMjHdaEc7F1O48zN5Xqw&quot;&gt;杨振宁100岁了，诺奖都不算他的人生巅峰&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221001211130.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;杨振宁是那种“别人家的孩子”。曾任复旦大学校长的女物理学家谢希德记得，小时候父亲谢玉铭拿“杨武之之子”来教育他们不要贪玩，要好好学习。有一回杨武之跟华罗庚吵架还说，我这一辈子数学赶不上你，但将来我儿子一定要超过你。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Sb-dlTJrAg-ysKPnXSjeww&quot;&gt;摩尔定律“失效”，三星和台积电3nm遇阻，尖端工艺去向何处？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220927190917.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;长期以来，人类在追逐摩尔定律的过程中，被物理规律卡脖子之前，总是能发现新的解决办法，总结下来大概分为3种，光学、材料、结构。
光学技术，未来一片“乌云”，电气电子工程师学会发布的最新《国际设备和系统路线图》显示，EUV的潜力将在2028年前后被挖掘殆尽，栅极长度将会定格在12nm，看不见EUV的替代者。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/hNGb8LkAuQsDVk3kC7ipAA&quot;&gt;新冠肺炎防控措施正在影响法国企业在华经营活动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221001211743.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们每个人都是这场疫情的受害者，如果你现在还没有感受到，在未来每一个时刻一定会被感受。
上述最新调查证明，法国企业在华遇到的困难依然存在。因此，越来越多的在华企业正在重新考虑，在这种不乐观的情况下放缓对这个国家投资新的项目。尽管今年夏天中国的入境限制有所放宽，但法国企业仍然很难吸引到外籍人才。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/e0ioOcw_wUgl-RhDyg9Xkg&quot;&gt;他的超强防守力，是你投资「足球队」的坚强后盾&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220928110120.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有知有行的另外一个公众号，用漫画来解释投资的知识。比文字有趣多了。投资真的是学习了一点就可以超越80%的人，但是一定要遵循投资策略，不然迟早会摔跤。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://riju.codes/&quot;&gt;Riju：几乎所有编程语言的在线编程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220930084459.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Riju 是每种编程语言的一个非常快速的在线playground。在不到一秒的时间内，可以开始使用Python解释器或编译内部代码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alineacms/alinea&quot;&gt;Alinea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alinea是一个用于现代网络的内容管理系统。它将完全键入的内容存储在平面文件中，可以通过内存中的SQLite数据库轻松地进行查询。Alinea支持可以作为Node.js进程托管或在无服务器运行时托管的自定义后端。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dosisod/refurb&quot;&gt;Reflb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reflb 是一个用于翻新和现代化Python代码库的工具。它旨在使代码更优雅、可读性更强、更现代化。Reflb支持插件和定制。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit-player.org/2022/the-middle-of-the-square&quot;&gt;中平方法是一种生成伪随机数的方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20221001212848.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;约翰·冯·诺伊曼是一位神童，也是一位博学者。他在纯数学、物理学、博弈论、经济学和计算机设计方面做出了令人瞩目的贡献。他还提出了第一个用数字计算机产生伪随机数的算法。然而，最后一项发明很少被算作他最辉煌的成就之一。&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/10/01/feedback/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/10/01/feedback/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>Fuzz工具 - yara</title>
        <description>&lt;p&gt;YARA是一个工具，旨在（但不限于）&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;帮助恶意软件研究人员识别和分类恶意软件样本&lt;/code&gt;。通过YARA，你可以根据文本或二进制模式创建恶意软件特征（或任何你想描述的）的描述。每个描述，又称规则，由一组字符串和一个布尔表达式组成，决定其逻辑。&lt;/p&gt;

&lt;p&gt;有史以来第一次，在 YARA 3.0中，您可以扩展其特性以表达更复杂和精细的条件。YARA 3.0通过使用模块来实现这一点，您可以使用这些模块来定义数据结构和函数，以后可以在规则中使用这些模块。您可以在使用模块一节中看到一些模块可以做什么的示例。&lt;/p&gt;

&lt;p&gt;下面的代码就演示下如何解析Hello world&lt;/p&gt;

&lt;h2 id=&quot;写一个hello-world-模块&quot;&gt;写一个hello world 模块&lt;/h2&gt;

&lt;p&gt;模块是用 C 编写的，并作为编译过程的一部分内置到 YARA 中。为了创建自己的模块，您必须熟悉 C 编程语言以及如何从源代码配置和构建 YARA。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;您不需要了解 YARA 是如何做到这一点的;&lt;/code&gt; YARA 为模块提供了一个简单的 API，这就是您需要了解的全部内容。&lt;/p&gt;

&lt;p&gt;模块的源代码必须位于源代码的 libyara/module 目录中。建议使用模块名作为源文件的文件名，如果模块名为 foo，则源文件应为 foo.c。&lt;/p&gt;

&lt;p&gt;在 libyara/module 目录中，你会找到一个 demo.c 文件作为我们的起点，该文件如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;include &amp;lt;yara/modules.h&amp;gt;

#define MODULE_NAME demo

begin_declarations;

  declare_string(&quot;greeting&quot;);

end_declarations;

int module_initialize(
    YR_MODULE* module)
{
  return ERROR_SUCCESS;
}

int module_finalize(
    YR_MODULE* module)
{
  return ERROR_SUCCESS;
}

int module_load(
    YR_SCAN_CONTEXT* context,
    YR_OBJECT* module_object,
    void* module_data,
    size_t module_data_size)
{
  set_string(&quot;Hello World!&quot;, module_object, &quot;greeting&quot;);
  return ERROR_SUCCESS;
}

int module_unload(
    YR_OBJECT* module_object)
{
  return ERROR_SUCCESS;
}

#undef MODULE_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include &amp;lt;yara/modules.h&amp;gt;&lt;/code&gt; 头文件是 YARA 模块 API 的定义所在的地方，因此在所有模块中都需要这个头文件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define MODULE_NAME demo&lt;/code&gt; 这是定义模块名称的方式，也是必需的。每个模块都必须在源代码的开头定义其名称。在构建到 YARA 中的模块中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;模块名称必须是唯一的&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;begin_declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;declare_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;end_declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这里，模块&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;声明了可用于 YARA 规则的函数和数据结构&lt;/code&gt;。在这种情况下，我们只是声明了一个字符串变量，命名为问候语。&lt;/p&gt;

&lt;p&gt;Module_initialize 函数在 YARA 的初始化过程中被调用，而其对应的 module_finalize 函数在 YARA 的终止过程中被调用。这些函数允许您初始化和终止模块中可能需要使用的任何全局数据结构。&lt;/p&gt;

&lt;p&gt;对于每个扫描的文件，只调用此函数一次，但只有在通过某个规则和 import 指令导入模块时才调用此函数。Module_load 函数是您的模块有机会检查被扫描的文件、按照首选的方式解析或分析它，然后填充在声明部分中定义的数据结构的地方。&lt;/p&gt;

&lt;p&gt;在本例中，module_load 函数根本不检查文件内容，它只是分配字符串“ Hello World!”前面声明的变量问候语。&lt;/p&gt;

&lt;p&gt;对于 module_load 的每个调用，都有一个对应的 module_unload 调用。这个函数允许您的模块释放 module_load 期间分配的任何资源。在这种情况下没有什么可以释放，所以函数只返回 ERROR_SUCCESS。Module_load 和 module_unload 都应返回 ERROR_SUCCESS，以表明一切正常。如果返回不同的值，则扫描将中止，并向用户报告错误。&lt;/p&gt;

&lt;h2 id=&quot;编译&quot;&gt;编译&lt;/h2&gt;

&lt;p&gt;模块并不是仅仅通过将它们的源代码放入 libyara/module 目录就神奇地内置到 YARA 中的，您必须遵循两个进一步的步骤才能使它们工作。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;第一步是将您的模块添加到 module_list 文件&lt;/code&gt;，该文件也可以在 libyara/module 目录中找到。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;MODULE(tests)
MODULE(pe)

#ifdef CUCKOO_MODULE
MODULE(cuckoo)
#endif
MODULE(demo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MODULE(demo)&lt;/code&gt;不能少，代表是demo模块。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;第二步是修改 Makefile.am&lt;/code&gt;，告诉 make 程序必须编译模块的源代码并链接到 YARA。在 libyara/Makefile.am 的开头，你会发现:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;MODULES =  modules/tests/tests.c
MODULES += modules/pe/pe.c

if CUCKOO_MODULE
MODULES += modules/cuckoo/cuckoo.c
endif

MODULES += modules/demo/demo.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后一行不能少。&lt;/p&gt;

&lt;p&gt;到现在已经准备一个模块了，准备编译吧。切到工作目录执行如下编译命令。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建一个rule文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;import &quot;demo&quot;

rule HelloWorld
{
    condition:
        demo.greeting == &quot;Hello World!&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用此规则扫描的任何文件都将与 HelloWord 匹配，因为 demo.looking==“ Hello World!”始终为 true。&lt;/p&gt;

&lt;h2 id=&quot;声明&quot;&gt;声明&lt;/h2&gt;

&lt;p&gt;声明部分是您声明变量、结构和函数的地方，这些变量、结构和函数将可用于您的 YARA 规则。每个模块都必须包含如下声明部分。&lt;/p&gt;

&lt;h3 id=&quot;基础类型&quot;&gt;基础类型&lt;/h3&gt;

&lt;p&gt;在声明部分中，可以分别使用 Declaration_string (&amp;lt; variable name &amp;gt;)、 Declaration_whole (&amp;lt; variable name &amp;gt;)和 Declaration_float (&amp;lt; variable name &amp;gt;)来声明 string、 int 或 float 变量。比如说&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;begin_declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;declare_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;declare_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;declare_float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;end_declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;变量名不能&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;包含字母、数字和下划线以外的字符&lt;/code&gt;。这些变量可以在以后的规则中任何需要整数或字符串的地方使用。假设您的模块名称是“ mymodule”，它们可以这样使用:&lt;/p&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;结构体、数组、字典、函数&lt;/p&gt;

&lt;p&gt;在本例中，我们使用 start_struct (&amp;lt; structname &amp;gt;)和 end_struct (&amp;lt; structname &amp;gt;)来划分两个结构，它们分别名为 some_struct 和 another_struct。在结构分隔符中，您可以放置任何其他需要的声明，包括另一个结构声明。还要注意，不同结构的成员可以具有相同的名称，但同一结构中的成员必须具有唯一的名称。&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://yara.readthedocs.io/en/stable/writingmodules.html#the-hello-world-module&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/27/yara-fuzzing-tool/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/27/yara-fuzzing-tool/</guid>
        
        <category>yara</category>
        
        
      </item>
    
      <item>
        <title>56 - 记录自己</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;前几天听刘旸教主（脱口秀演员）提到，说我们还是要去多记录自己，分享自己，心中自己的一个想法。谈到他自己已经录了300多期的播客，但是有些东西真会忘掉。&lt;/p&gt;

&lt;p&gt;不过别人要了解你的时候，通过这些播客，可以了解到你是什么样子的，同时也是不是志同道合的人。&lt;/p&gt;

&lt;p&gt;我觉得一些输出就是这样的，影响别人，交到志同道合的人，同时在公开场合发表一些言论，一定是代表自己的客观真实的自己–真诚。&lt;/p&gt;

&lt;p&gt;也要做到尽量不要把自己一些负面的情绪暴露、和分享给别人，因为负面的东西是不受控的，那这样就体现了自己的缺点。我想没有人愿意给一个自己情绪不受控的人交朋友，想尽量说一些正面的向上的东西。&lt;/p&gt;

&lt;p&gt;同时对一些谣言，还有你不相信的东西，就不要去评论，也不要去转发，这样就把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;谣言止于智者&lt;/code&gt;做好了。&lt;/p&gt;

&lt;p&gt;关于谣言你有什么想法？&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/XpNQ-i6n2VpSHnOl9VT2uQ&quot;&gt;英伟达推出自动驾驶芯片Thor 吉利成首个客户&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nvidia发布的新品，国内已经有合作的客户的，就是吉利。多年前听一个读MBA的朋友说道，吉利是一家国内民营汽车唯一赚钱了的公司。&lt;/p&gt;

&lt;p&gt;英伟达表示，该平台将集中自动驾驶、辅助驾驶，以及包括车内娱乐在内的其他数字功能，将能取代汽车中的大量芯片和电缆，并降低整个系统的成本。&lt;/p&gt;

&lt;p&gt;这款芯片基于最新的CPU和GPU打造，可提供每秒2000万亿次浮点运算，是此前发布的Altan的2倍，是Orin的8倍。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/_JHbhNJBUogt78xZMRCjHw&quot;&gt;回头看，腾讯游戏海外投资额已达千亿元&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220924200029.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;自 2012 年以来，腾讯至少耗费 978.67 亿元，投资了 33 家海外游戏公司，包括开发《英雄联盟》的拳头公司、开发《皇室战争》的 Supercell。考虑到样本遗漏，其整体投资额当在千亿之巨。在游戏产业链上的各个环节，腾讯都有投资布局。腾讯游戏高管曾表示，未来，腾讯游戏的收入构成目标，是国内海外各一半。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ifixit.com/News/64865/iphone-14-teardown&quot;&gt;在苹果iPhone的秘密,14内部的重新设计&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220924200105.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;据说Phone 14卖的不好这篇文章说了iPhone14它里面的一些构造是我们看不到的一些升级的一些点。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zdnet.com/article/linus-torvalds-rust-will-go-into-linux-6-1/#ftag=COS-05-10aaa0j&quot;&gt;Rust 将进入 Linux 6.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进入 Linux 内核的 Rust 编程语言已经存在了一段时间。在 2020 年 Linux 大会上，开发人员开始考虑将 Rust 语言用于新的 Linux 内联代码。支持 Rust 开发 Android 的谷歌 - 本身就是一个 Linux 发行版 - 于 2021 年 4 月开始在 Linux 内核中推动 Rust。&lt;/p&gt;

&lt;p&gt;如果你是一个程序员，可以考虑抽个时间了解下这门语言。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/rCZM40wTM61Nyc6sK0CDqA&quot;&gt;以梦为马 不负韶华–写在离开华为之际&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220924200604.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作者记录自己在华为24年的时光，就像作者说的离开只是一段旧的旅程结束，新的旅途即将开始，继续用心探索世界、用爱感受生活，以梦为马，不负韶华！&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/learn/paths/rust-first-steps/&quot;&gt;Rust的入门教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220924201644.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;微软有很多这样的入门教程，可以跟着走一篇，基本就熟悉个七七八八，后面在练手一些有难度的基本上这个语言就掌握了6~7分，要深入还是要多用，多看一些开源的项目。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ahershy/Virtual_assistant&quot;&gt;用OpenAi实现语音助手&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220924200825.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作者通过用Pyaudio、OpenAI API构建了类似亚马逊Alexa和Siri，这样的语音助手。&lt;/p&gt;

&lt;p&gt;对于任何有兴趣使用使Siri或Alexa功能相同的技术的人来说，这是一个整洁的项目。不需要太多的编码经验，因为我们利用API进行处理。我强烈建议fork这个项目的repo，如果任何读者想了解更多关于这些技术的信息，可以直接玩一手。&lt;/p&gt;

&lt;h1 id=&quot;本周&quot;&gt;本周&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/63242c915b989d89724dd5df&quot;&gt;我不是巴菲特，也没有必要成为巴菲特&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有知有行的知行小酒馆播客节目。之前年轻的时候，也就是7~8年轻，觉得自己可以改变天改变地，后来发现什么都改变不了，只有做一些小的事情，真正有意义的东西。估计这个就是成熟吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/25Nx8go-bRD-PJ7SFYQwTQ&quot;&gt;CUDA基础&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CUDA编程内存相关的知识。寄存器可用于本地存储数据，避免重复内存操作。全局内存是主存空间，用于host和 GPU 之间的数据共享。本地内存是一种特殊类型的内存，可用于存储寄存器中不适合的数据，并且是线程的私有数据，局部的。&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/24/record-myself/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/24/record-myself/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>LLVM工具 - LLVM lit</title>
        <description>&lt;p&gt;main build_parameters
&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220921153123.png&quot; alt=&quot;&quot; /&gt;
lit.cl_arguments, -&amp;gt; 获取用户传进来的arguments，比如-vv，-j等&lt;/p&gt;

&lt;p&gt;其中重要的就是test_paths ，就是我们要测试的目标目录&lt;/p&gt;

&lt;p&gt;create_params 
配置系统默认的lit.cfg配置，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang/test/lit.cfg.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;lit_config
刚刚上面的几个都是获取的为了生成这个lit_config，包括site_config_names/config_names/local_config_names等等
对于新目录，添加了是这个几个名字的理论都可以加载被识别到，后缀一定是cfg.py 和cfg&lt;/p&gt;

&lt;p&gt;lit.discovery.find_tests_for_inputs
看名字就知道了，是查找指定目录的所有case来执行&lt;/p&gt;

&lt;p&gt;getTests
对于给定的目录和相对路径，这个找到test_suite&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getTestSuite
这个定义2个search方法，一个是search()，还有一个是search1()

重点说下search1，从上面的lit_config里面找有没有cfg文件，从里到外（子目录到父目录到父父录），没有就继续找

    load_from_path
    把找到之后的参数传到这个函数里面，然后用python的exec(compile(xxx))方法来编译里面的文件，所以cfg文件里面的内容是需要支持python语法和格式的，当成python脚本来写即可。

    并把cfg文件里面的内容转换到cfg_globals这个全局变量里面。

    然后把对应的路径转化为testSuite对象

getTestsInSuite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面就是一些arguments的处理，并更新tests这个对象&lt;/p&gt;

&lt;p&gt;run_tests
检查workers的数量，用于multipeocessing.Pool（xxx）,用多进程来解锁GIL
然后调用这个lit.run.Run，返回Run对象，创建一个tmp目录tempfile.mkdtemp(),
关键：调用Run.execute()-&amp;gt; 最后兜兜转转到test.config.test_format.execute()这里执行的。 封装为cmd，&lt;/p&gt;

&lt;p&gt;lit.util.executeCommand(xxx)
这个用来执行cmd&lt;/p&gt;

&lt;p&gt;解析执行命令：run_list&lt;/p&gt;

&lt;p&gt;builder.process_run_line() 执行之后返回对应的值。&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/22/llvm-lit/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/22/llvm-lit/</guid>
        
        <category>LLVM</category>
        
        
      </item>
    
      <item>
        <title>55 - 保持更新</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/9XxacMZt-hzmRkehIbSAgA&quot;&gt;特斯拉Semi Truck进入中国的三大猜想&lt;/a&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220917133158.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;近日，特斯拉官网更新了Semi Truck的外观图片。与此同时，特斯拉首席执行官埃隆·马斯克也公开宣称，首款电动卡车Semi长续驶里程版将于年底正式交付。如果特斯拉Semi Truck入华，将有望复制Model S的带动作用，提高电动重卡的接受度，促进相关配套设施建设的完善。如果特斯拉后期发布更加经济的车型，还将推动电动卡车大规模普及应用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/HTHnvik_dFsvp3oLZWqqRA&quot;&gt;4万加密人在线见证历史，“币圈春晚”意义到底在哪？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220917133420.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这预示着能源密集型挖矿工作需求将消失，网络保护机制将通过质押以太坊实现。同时，在经历了数月的市场波动后，这一里程碑还可能提振市场信心。以太坊的合并“将证明去中心化和无需许可的网络可以以节能的方式运行。”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://threadreaderapp.com/thread/1570144499187453952.html&quot;&gt;Action Transformer &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Action Transformer (ACT-1)是一个可以使用多种软件工具的模型。用户可以输入 ACT-1将执行的高级请求，例如，在房地产网站上搜索房产或在 Salesforce 中输入新的线索。该模型可以查询 Wikipedia 来学习，并且可以通过反馈进行指导。它可以完成需要多个程序的任务。ACT-1能力的视频演示可以在主题中找到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://typefully.com/DanHollick/qr-codes-T7tLlNi&quot;&gt;二维码是如何工作的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220917194502.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;二维码，或快速反应代码，是由丰田的一个子公司发明的跟踪零件。该公司从未行使其专利并免费发布该技术。二维码可以存储数据，可以从多个角度进行读取。即使部分代码被掩盖，它们仍然可以被解码。这篇文章解释了二维码是如何工作的。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2022-09-08-github-copilot-now-available-for-teachers/&quot;&gt;github-copilot对于教师可用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;教师免费。GitHub 致力于负责任的创新，同时也降低了任何对学习编码感兴趣的人的进入门槛。这个承诺的一部分意味着向那些教育下一代软件开发人员的人免费提供工具。到目前为止，我们已经能够提供多种好处，包括通过 GitHub Codespaces 为教师提供免费的云计算。文中有申请链接。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/maxwell-bland/copilot-in-the-terminal&quot;&gt;copilot-in-the-terminal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;github推出的AI写代码，，现在你希望它也能帮助你运行代码，可以参考这个。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=sf3vENkPKj8&amp;amp;ab_channel=ReuvenLerner&quot;&gt;python里面的’&lt;strong&gt;name&lt;/strong&gt;’==’&lt;strong&gt;main&lt;/strong&gt;‘是什么&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220917193926.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个视频讲解的很详细，看上面的图片也可以了解。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dflex-js/dflex&quot;&gt;DFlex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DFlex 是一个用于web拖放应用程序的 Javascript 库。它是用普通的 Javascript 构建的，并实现了一种增强的转换机制来操作 DOM 元素。到目前为止，它是互联网上唯一一个操作 DOM 而不是重新构造它的拖放库，并且有自己的调度器和协调器。&lt;/p&gt;

</description>
        <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/17/nvidia-new-arrival/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/17/nvidia-new-arrival/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>CUDA 基础 - 04 访存- share、const</title>
        <description>&lt;p&gt;最近在GPU编译器测试方面遇到一些瓶颈，准备学习下cuda 相关的基础知识。&lt;/p&gt;

&lt;p&gt;之前写了一篇关于cuda的kernel函数调用相关的知识，以及一个hello world入手学习语法等。知道了GPU架构,如何写一个cuda程序,今天继续深入学习cuda的内存相关知识。&lt;/p&gt;

&lt;p&gt;回顾下，前面学习了的内存类型：三种内存，寄存器，全局、局部内存。寄存器可用于本地存储数据，避免重复内存操作。全局内存是主存空间，用于host和 GPU 之间的数据共享。本地内存是一种特殊类型的内存，可用于存储寄存器中不适合的数据，并且是线程的私有数据，局部的。&lt;/p&gt;

&lt;h2 id=&quot;内存分类&quot;&gt;内存分类&lt;/h2&gt;

&lt;p&gt;大致可以分为:Registers、global 、shared 、constant、local， 那就开始学习吧.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220913111256.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;share-共享&quot;&gt;share 共享&lt;/h3&gt;

&lt;p&gt;虽然让不同的线程对不同的数据执行相同的操作是使用 GPU 的好的模式，但在某些情况下，线程需要进行通信。这种通信可能是必要的，因为我们试图实现的算法的工作方式，或者它可能来源于我们试图实现的性能目标。&lt;/p&gt;

&lt;p&gt;掌握这些有非常大的好处，前段时间听组内的x博士讲到，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CUDA用软件实现的算法，比amd用硬件实现的算法都要快&lt;/code&gt;，估计问题就在这里吧。&lt;/p&gt;

&lt;p&gt;共享内存是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;线程块&lt;/code&gt;中所有线程共享的 CUDA 内存空间。在这种情况下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;共享意味着一个线程块中的所有线程都可以对块分配的共享内存进行写入和读取&lt;/code&gt;，并且对这个内存的所有更改最终都将对该块中的所有线程可用。&lt;/p&gt;

&lt;p&gt;为了在共享内存中分配一个数组，我们需要在定义前加上标识符&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; __share__&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;extern &quot;C&quot;
__global__ void vector_add(const float * A, const float * B, float * C, const int size)
{
  int item = (blockIdx.x * blockDim.x) + threadIdx.x;
  __shared__ float temp[3];

  if ( item &amp;lt; size )
  {
      temp[0] = A[item];
      temp[1] = B[item];
      temp[2] = temp[0] + temp[1];
      C[item] = temp[2];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码，若要为临时数组使用共享内存，请将标识符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__share__&lt;/code&gt; 添加到其定义中。&lt;/p&gt;

&lt;p&gt;虽然语法正确，但&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;上面的示例在功能上是错误的&lt;/code&gt;。原因是临时数组不再是分配它的线程的私有数组，而是现在由整个线程块共享。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;猜一下大概是因为是？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GPU是多个warp同时执行同一个命令，所以结果是不确定的，而且肯定不同于以前版本的 Vector_add。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;线程将相互覆盖对方的临时值&lt;/code&gt;，并且不能保证每个线程对哪个值可见。&lt;/p&gt;

&lt;p&gt;为了修复前一个kernel，我们应该为每个线程分配足够的共享内存来存储三个值，这样每个线程都有自己的共享内存数组部分。&lt;/p&gt;

&lt;p&gt;为了分配足够的内存，我们需要用其他内存来替换 &lt;strong&gt;shared&lt;/strong&gt; float temp[3] 。如果我们知道每个线程块有1024个线程，我们可以编写如下代码:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__shared__ float temp[3 * 1024];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是根据经验，我们知道在代码中包含常量不是一个可维护的解决方案。问题是，如果我们想声明一个共享内存数组，我们需要一个常量值，因为编译器需要知道要分配多少内存。&lt;/p&gt;

&lt;p&gt;这个问题的解决方案是不指定数组的大小，而是将内存分配到其他地方。&lt;/p&gt;

&lt;p&gt;extern &lt;strong&gt;shared&lt;/strong&gt; float temp[];&lt;/p&gt;

&lt;p&gt;通过将命名参数 shared_mem  添加到kernel调用来完成。修改过的代码大概是这个样子：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;__global__&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vector_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockDim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__shared__&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码现在是正确的，虽然它仍然不是很有用。我们确实在使用共享内存，而且我们正在以正确的方式使用它，但是这样做并&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;没有获得任何性能提升&lt;/code&gt;。实际上，我们正在使代码变得更慢，而不是更快，因为共享内存比寄存器慢。&lt;/p&gt;

&lt;p&gt;GPU 是一个高度并行的device，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;可以同时执行多个线程&lt;/code&gt;。在前面的代码中，不同的线程可能同时更新相同的输出项，从而产生错误的结果。&lt;/p&gt;

&lt;p&gt;为了解决这个问题，我们需要使用 CUDA 库中名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomicAdd&lt;/code&gt; 的函数。这个函数确保 output 的增量以原子方式发生，以便在多个线程想要同时更新同一项时不会发生冲突。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;__global__ void histogram(const int * input, int * output)
{
    int item = (blockIdx.x * blockDim.x) + threadIdx.x;

    atomicAdd(&amp;amp;(output[input[item]]), 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说实话，我看完共享内存目前就知道了，共享意味着一个线程块中的所有线程都可以对块分配的共享内存进行写入和读取。关于怎么用，如何用才能写出更高效，有性能的kernel函数，我还是有一点懵。&lt;/p&gt;

&lt;p&gt;下面来了，围绕cuda &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;histogram&lt;/code&gt;函数 和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomicAdd &lt;/code&gt;来完成。&lt;/p&gt;

&lt;h3 id=&quot;histogram-函数__syncthreads&quot;&gt;histogram 函数、__syncthreads()&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220916202002.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;histogram 是图像处理和数据挖掘中常用的分析工具。它们显示每个数据元素出现的频率。虽然在 CPU 上计算很简单，但是传统上histogram在 GPU 上很难有效地计算。之前提出的方法包括使用遮挡查询机制(需要为每个直方图桶提供渲染通道) ，或者对图像的像素进行排序，然后搜索每个桶的开始，这两种方法都非常昂贵。我们可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; CUDA 和共享内存&lt;/code&gt;有效地生成 histogram ，然后可以将其读回host或保存在 GPU 上供以后使用。&lt;/p&gt;

&lt;p&gt;所以用一个 CUDA &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;histogram&lt;/code&gt; 函数来实现，使用共享内存来减少全局内存中的冲突。继续共享&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;__global__ void histogram(const int * input, int * output)
{
    int item = (blockIdx.x * blockDim.x) + threadIdx.x;
    __shared__ int temp_histogram[256];

    atomicAdd(&amp;amp;(temp_histogram[input[item]]), 1);
    atomicAdd(&amp;amp;(output[threadIdx.x]), temp_histogram[threadIdx.x]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomicAdd&lt;/code&gt; 可用于全局内存和共享内存。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CUDA的原子操作可以理解为对一个变量进行“读取-修改-写入”这三个操作的一个最小单位的执行过程，这个执行过程不能够再分解为更小的部分&lt;/code&gt;，在它执行过程中，不允许其他并行线程对该变量进行读取和写入的操作。基于这个机制，原子操作实现了对在多个线程间共享的变量的互斥保护，确保任何一次对变量的操作的结果的正确性。&lt;/p&gt;

&lt;p&gt;原子操作确保了在多个并行线程间共享的内存的读写保护，每次只能有一个线程对该变量进行读写操作，一个线程对该变量操作的时候，其他线程如果也要操作该变量，只能等待前一线程执行完成。原子操作确保了安全，代价是牺牲了性能&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atomicAdd(&amp;amp;(temp_histogram[input[item]]), 1)&lt;/code&gt;，这句代码，每个线程根据输入的值更新共享内存中的一个任意位置，而下一行atomicAdd，每个线程读取共享内存中与其线程 ID 对应的元素。但是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;对共享内存的更改不会自动对所有其他线程可用&lt;/code&gt;，因此最终结果可能不正确。&lt;/p&gt;

&lt;p&gt;为了解决这个问题，我们需要同步一个块中的所有线程，以便内存操作也最终完成并对所有人可见。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;要同步块中的线程&lt;/code&gt;，我们使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__syncthreads()&lt;/code&gt; 函数。此外，共享内存没有初始化，程序员也需要处理这个问题。因此，我们需要首先初始化 temp_histogram，等待所有线程都完成这项工作，在共享内存中执行计算，再次等待所有线程都完成，然后才更新全局数组。&lt;/p&gt;

&lt;p&gt;完整的代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;__global__ void histogram(const int * input, int * output)
{
    int item = (blockIdx.x * blockDim.x) + threadIdx.x;
    __shared__ int temp_histogram[256];
 
    // Initialize shared memory and synchronize
    temp_histogram[threadIdx.x] = 0;
    __syncthreads();

    // Compute shared memory histogram and synchronize
    atomicAdd(&amp;amp;(temp_histogram[input[item]]), 1);
    __syncthreads();

    // Update global histogram
    atomicAdd(&amp;amp;(output[threadIdx.x]), temp_histogram[threadIdx.x]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个解决方案背后的想法是通过在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;共享内存中使用临时histogram来减少全局内存中代价高昂的冲突&lt;/code&gt;。当一个块处理完其输入数组的分数，并填充了局部histogram后，线程协作更新全局histogram。这种解决方案不仅潜在地减少了全局内存中的冲突，而且还产生了更好的访问模式，因为线程在第二次调用 atomicAdd 期间读取输入数组的相邻项，并写入输出数组的相邻元素。&lt;/p&gt;

&lt;h3 id=&quot;const-内存&quot;&gt;const 内存&lt;/h3&gt;

&lt;p&gt;device侧的const值也分多种，比如inline const，literal const，immediately number。&lt;/p&gt;

&lt;p&gt;constant Memory对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;device来说只读但是对于host是可读可写&lt;/code&gt;，其内容可以广播到一个块中的多个线程。分配到常量内存中的变量需要在 CUDA 中使用特殊的 &lt;strong&gt;constant&lt;/strong&gt;  标识符进行声明，而且它必须是一个全局变量，也就是说，它必须在包含kernel的作用域中声明，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不是在kernel本身内部声明&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;代码时间：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;extern &quot;C&quot; {
#define BLOCKS 2

__constant__ float factors[BLOCKS];

__global__ void sum_and_multiply(const float * A, const float * B, float * C, const int size)
{
    int item = (blockIdx.x * blockDim.x) + threadIdx.x;
    C[item] = (A[item] + B[item]) * factors[blockIdx.x];
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前面的__constant__ 就是 const memory，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const内存的初始化发生在host端&lt;/code&gt;，不是device GPU端。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;共享内存比全局内存和本地内存快，共享内存可以用作用户控制的缓存来加速代码。如果在线程内部分配，则在编译时必须知道共享内存数组的大小，可以在kernel调用期间声明extern共享内存数组并传递大小。&lt;/p&gt;

&lt;p&gt;使用 &lt;strong&gt;shared&lt;/strong&gt;  在共享内存空间中分配内存，使用 __syncthreads() 等待共享内存操作对块中的所有线程可见。&lt;/p&gt;

&lt;p&gt;全局作用域的数组，其大小在编译时已知，可以使用 &lt;strong&gt;constant&lt;/strong&gt; 标识符存储在const内存中。&lt;/p&gt;

&lt;p&gt;host CPU能访问分类：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220916203806.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对于CUDA的学习就到此告一段落了，后面用到了再来继续补充深入，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;学以致用&lt;/code&gt;，不用肯定是会忘记的，用起来吧。&lt;/p&gt;

&lt;p&gt;推荐一个cnblogs cuda：https://www.cnblogs.com/1024incn/tag/CUDA/&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;http://developer.download.nvidia.com/compute/cuda/1.1-Beta/x86_website/projects/histogram64/doc/histogram.pdf&lt;/p&gt;

&lt;p&gt;https://github.com/kevinzakka/learn-cuda/blob/master/src/histogram.cu&lt;/p&gt;

&lt;p&gt;https://developer.nvidia.com/blog/gpu-pro-tip-fast-histograms-using-shared-atomics-maxwell/&lt;/p&gt;

&lt;p&gt;https://carpentries-incubator.github.io/lesson-gpu-programming/06-global_local_memory/index.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/16/cuda-load-store-2/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/16/cuda-load-store-2/</guid>
        
        <category>cuda</category>
        
        
      </item>
    
  </channel>
</rss>
