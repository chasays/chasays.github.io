<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>人生就是干</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 10 Sep 2022 12:15:48 +0000</pubDate>
    <lastBuildDate>Sat, 10 Sep 2022 12:15:48 +0000</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>Mid Autumn</title>
        <description>
&lt;hr /&gt;
&lt;p&gt;layout: post
title: “54 - 节日快乐”
subtitle: ‘’ 
author: “叉叉敌”
header-style: text
tags:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;圆魄上寒空，皆言四海同。
安知千里外，不有雨兼风？&lt;/p&gt;

&lt;p&gt;同一片月光之下，你此时此刻在做什么喃？&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apple.com/iphone/&quot;&gt;苹果发布会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220910193404.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;苹果在 Far Out 发布会上发布了新款 iPhone、 Apple Watch 和 AirPods。届时将会推出四款新 iPhone: iPhone 14、 iPhone 14 Plus、 iPhone 14 Pro 和 iPhone 14 Pro Max。除了10月7日开始发售的 iPhone14 Plus 之外，这款手机还将提供两年的免费卫星连接服务，并于9月16日开始发售。新的苹果手表超功能的物理按钮和新的 AirPods Pro 有更有效的噪音消除。Apple Watch Ultra 和 AirPods Pro Series 2都将于9月23日开始发货。果粉们冲呀~ 灵动岛不就是软件的作用么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wilfred.me.uk/blog/2022/09/06/difftastic-the-fantastic-diff/&quot;&gt;Difftastic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220910194112.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Difftastic 是一个结构差异工具，根据语法比较文件。这篇文章介绍了如何构建 Difftastic，开发人员在构建它时的实现，构建工具时遇到的问题以及如何克服这些问题，以及工具的未来。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/FHJwUL5l064HG4AiXPoxAw&quot;&gt;一枚5万，天价“空气月饼”真相&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/f9670009397081b5922b8726ad2f1f5e.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年，随着月饼新政出台，四部委发出公告，要求对单价超过500元的月饼重点监管，并对月饼包装做出要求，如减少层数、不得使用贵重材料包装、禁止月饼与其他产品混装等。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/pKyQZ_HEdYSZh7YRrW3YHA&quot;&gt;CUDA 基础 01 - 概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;软件和硬件对应的说法，比如SM调度和执行的基础概念，不同GPU vendor叫法不一样，A卡叫wave，N卡叫warp/卧铺/，我司的也叫wave。我个人理解的就是一波波的相同指令的线程执行，wave好记。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ZrP-LIIttphl19jJBzW6KA&quot;&gt;又死一个主角？这部剧你永远猜不到下一秒！《权力的游戏》第7期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;推荐一个我比较喜欢的博主，优秀电源解说，马上国庆就要来了，7天，如果是隔离在家，或者是酒店，看看电源解说，蛮有趣的。&lt;/p&gt;

&lt;p&gt;如果你平时也有不错的公众号，也欢迎自荐或者给我推荐，谢谢~&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wakatime/wakaq&quot;&gt;WakaQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WakaQ 是由 Redis 支持的 Python 分布式后台任务队列。它具有队列优先级、延迟任务、定期任务、向所有工作者广播任务、硬超时和软超时限制以及在软超时上重试任务。不支持速率限制和任务重复数据删除等特性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vmware-tanzu/kubeapps&quot;&gt;Kubeapps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kubeapps是一个集群内网络应用程序，用于在 Kubernetes 集群上部署、管理和升级应用程序。它可以浏览、升级、部署和删除包和应用程序、自定义部署、浏览和部署 Kubernetes Operators、安全授权等等。最新版本只支持 Helm3，但大多数为 Helm2制作的图表仍然可以工作。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.collabora.com/news-and-blog/blog/2022/09/07/improving-vulkan-graphics-state-tracking-in-mesa/&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vulkan 是一个低开销、跨平台的 API，是一个可以在 GPU 和 CPU 上运行的3D 图形和计算的开放标准。在这篇文章中，Jason Ekstrand 描述了 Vulkan 如何工作的理论心理模型，然后继续强调现实世界引入的问题以及它们是如何被解决的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.taichi-lang.org/blog/accelerate-python-code-100x&quot;&gt;Python加速代码 Taichi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总而言之，没有所有优化问题的通用解决方案。这就是Python引人入胜的部分原因。您始终可以找到/创建一个易于使用的工具，可以精确解决您手头的问题。在科学计算方面，Taichi是Python中的理想选择，可以帮助您实现与C/C++相当的性能。&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/10/mid-autumn/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/10/mid-autumn/</guid>
        
        
      </item>
    
      <item>
        <title>CUDA 基础 02 - helloworld</title>
        <description>&lt;p&gt;最近在GPU编译器测试方面遇到一些瓶颈，准备学习下cuda 相关的基础知识。&lt;/p&gt;

&lt;p&gt;之前写了一篇关于cuda的kernel函数调用相关的知识，今天再来从一个hello world入手学习。&lt;/p&gt;

&lt;h2 id=&quot;cuda-kernel定义&quot;&gt;cuda kernel定义&lt;/h2&gt;

&lt;p&gt;普通函数和CUDA程序的区别。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;
void CPUFunction()
{
  printf(&quot;This function is defined to run on the CPU.\n&quot;);
}

__global__ void GPUFunction()
{
  printf(&quot;This function is defined to run on the GPU.\n&quot;);
}

int main()
{
  CPUFunction();
  GPUFunction&amp;lt;&amp;lt;&amp;lt;1, 1&amp;gt;&amp;gt;&amp;gt;();
  cudaDeviceSynchronize();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__global__ void GPUFunction() &lt;/code&gt;被称作核函数（kernel function），是cuda核心程序的入口部分。程序执行至这里时，将代码段交由GPU执行。&lt;/p&gt;

&lt;p&gt;注意要加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__global__&lt;/code&gt; 关键字，表示这是运行在GPU上的函数。
核函数在调用时，使用三对尖括号，里面的两个变量分别对应block数量与thread数量，引出下面的内容。&lt;/p&gt;

&lt;p&gt;kernel对应就是在device运行，CPU侧就是在host上运行，还有一个就device上调用，device上执行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906232455.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cuda-编程&quot;&gt;cuda 编程&lt;/h2&gt;

&lt;p&gt;一个异构环境，通常有多个CPU多个GPU，他们都通过PCIe总线相互通信，也是通过PCIe总线分隔开的。所以我们要区分一下两种设备的内存：&lt;/p&gt;

&lt;p&gt;主机：CPU及其内存
设备：GPU及其内存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906232640.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;内存管理&quot;&gt;内存管理&lt;/h2&gt;

&lt;p&gt;内存管理在传统串行程序是非常常见的，寄存器空间，栈空间内的内存由机器自己管理，堆空间由用户控制分配和释放，CUDA程序同样，只是CUDA提供的API可以分配管理设备上的内存，当然也可以用CDUA管理主机上的内存，主机上的传统标准库也能完成主机内存管理。
下面表格有一些主机API和CUDA C的API的对比：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906232906.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了nv的，还有amd的hip也了解下。似乎就是吧cuda换成hip，你看这多方便开发者，基本上无缝切换~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906233229.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;其他参考这个页面：https://sep5.readthedocs.io/en/latest/Programming_Guides/CUDAAPIHIPTEXTURE.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个函数是内存拷贝过程，可以完成以下几种过程（cudaMemcpyKind kind），右边是对比的amd hip编程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906233605.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就是字面意思，memory copy xx to yy。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906233642.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我自己有几点经验或者是自己踩坑的总结；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;内存拷贝： 分配的大小一定要一致&lt;/li&gt;
  &lt;li&gt;初始化：要cpy到device值&lt;/li&gt;
  &lt;li&gt;指针，和这个太基础了，但是我经常犯错&lt;/li&gt;
  &lt;li&gt;数据大小，根据thread和元素大小来决定，避免数据安全问题&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;cuda_runtime.h&amp;gt;

__global__ void kernel(float*dst,float*src)
{
  ……
}
int main()
{
  ……
  CHECK(cudaMalloc((float**)&amp;amp;d_out,nByte));
  CHECK(cudaMalloc((float**)&amp;amp;d_in,nByte));
  ……
  cudaMemcpy(d_in,h_in,nByte,cudaMemcpyHostToDevice);

  kernel&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;(d_out,d_in);

  cudaMemcpy(h_out,d_out,nByte,cudaMemcpyDeviceToHost);

  // use h_out from GPU

  cudaFree(d_out);
  cudaFree(d_in);
  return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;block和thread的配置&quot;&gt;block和thread的配置&lt;/h2&gt;

&lt;p&gt;一个BLOCK不能分到多个SM上执行，但是不同的Block有可能会分到相同的SM（这个是调度器控制的，对用户不可见）。既然sharedmemory在sm上，这样就解释了为什么Block之间没有办法共享shared memory，也不能够进行同步，否则会产生死锁。&lt;/p&gt;

&lt;p&gt;上面的helloworld程度段只包含了一个核函数，运行的时候&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GPUFunction«&amp;lt;1, 1»&amp;gt;();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个核函数内只有一个block，每个block内1个thread。运行一次就完成了。&lt;/p&gt;

&lt;p&gt;GPUFunction«&amp;lt;10, 1»() 配置为在 10 个线程块（每个均具有单线程）中运行后，将运行 10 次。
GPUFunction«&amp;lt;1, 10»() 配置为在具有 10 线程的单个线程块中运行后，将运行 10 次。
GPUFunction«&amp;lt;10, 10»() 配置为在 10 个线程块（每个均具有 10 线程）中运行后，将运行 100 次。&lt;/p&gt;

&lt;p&gt;基可以用threadIdx.x 和blockIdx.x 来组合获得对应的线程的唯一标识，hreadIdx和blockIdx能组合出很多不一样的效果。&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;compiler&lt;/h2&gt;

&lt;p&gt;CUDA在编译时使用编译器nvcc，作为一个C的扩展，nvcc的编译方法和gcc/g++类似。&lt;/p&gt;

&lt;p&gt;NvCC 将这两部分分开, 并将主机代码(将在 CPU 上运行的代码部分)发送给像 gcc 或者 Intel C++编译器(ICC)或者微软 Visual c++ Compiler 这样的 C 编译器, 然后将 device 代码(将在 GPU 上运行的部分)发送给 GPU。device代码由 NVCC 进一步编译。NVCC 是基于 LLVM 的。根据 Nvidia 提供的文档，7.0版本中的 nvcc 支持许多由 C++ 11标准定义的语言结构和一些 C99特性。在版本9.0中，支持来自 C++ 14标准的多个构造。&lt;/p&gt;

&lt;p&gt;CUDA 语言扩展的源文件(.cu)必须用 nvcc 编译。NVCC 是一个编译器驱动程序，它通过调用所有必要的工具和编译器来工作，比如 cudacc、 g++ 、 cl 等。NVCC 可以输出 C 代码(CPU 代码) ，然后必须使用另一个工具或 PTX 或对象代码直接与应用程序的其余部分一起编译。一个具有 CUDA 代码的可执行文件需要: CUDA 核心库和 CUDA 运行库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906231324.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;类似cudacc编译这部分目前就是我们正在做的，可以参考llvm编译器框架。&lt;/p&gt;

&lt;h2 id=&quot;调用&quot;&gt;调用&lt;/h2&gt;

&lt;p&gt;除了用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;来调用kernel函数，这个三个尖括号&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;grid,block&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;内是对设备代码执行的线程结构的配置（或者简称为对内核进行配置），也就是我们上一篇中提到的线程结构中的grid，块还可以使用。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cudaLaunchKernel ( const void* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem, cudaStream_t stream )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上面的等于cudaLaunchKernel(GPUFunction, 1, 1, 0, 0)。&lt;/p&gt;

&lt;p&gt;CPU和GPU是异步执行的，所以执行完了要看到print打印信息，需要sync才可以看到。&lt;/p&gt;

&lt;p&gt;要注意的地方就是gridDim、blockDim、以及shareMem，比如在访问shareMemory的时候，一定要指定这个大小，不然同步回来的结果可能是0.&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://sep5.readthedocs.io/en/latest/Programming_Guides/CUDAAPIHIPTEXTURE.html&lt;/p&gt;

&lt;p&gt;https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html&lt;/p&gt;

&lt;p&gt;https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html&lt;/p&gt;

&lt;p&gt;https://www.cnblogs.com/maomaozi/p/15939275.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/07/cuda-helloworld/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/07/cuda-helloworld/</guid>
        
        <category>cuda</category>
        
        
      </item>
    
      <item>
        <title>CUDA 基础 01 - 概念</title>
        <description>&lt;p&gt;最近在GPU编译器测试方面遇到一些瓶颈，准备学习下cuda 相关的基础知识。&lt;/p&gt;

&lt;p&gt;warp/sm/index/grid等。&lt;/p&gt;

&lt;h2 id=&quot;cpu--vs-gpu&quot;&gt;CPU  VS GPU&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;GPU最重要的一点是可以并行的实现数据处理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一点在数据量大、运算复杂度不高的条件下极为适用。可以简单地把一块GPU想象成一个超多核的CPU运算部件。这些CPU有自己的寄存器，还有供数据交换用的共享内存、缓存，同时周围还有取指部件和相应的调度机制，保证指令能够在之上执行。&lt;/p&gt;

&lt;p&gt;这里有一张典型的CPU和GPU的对比图片，CPU和GPU就呈现出非常不同的架构&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906212741.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;鲜绿色：计算单元ALU(Arithmetic Logic Unit）&lt;/li&gt;
  &lt;li&gt;橙红色：存储单元（cache）&lt;/li&gt;
  &lt;li&gt;橙黄色：控制单元（control）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GPU：数量众多的计算单元和超长的流水线，只有简单的控制逻辑并省去了Cache
CPU：被Cache占据了大量空间，而且还有有复杂的控制逻辑和诸多优化电路。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906213009.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个比喻就很恰当：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;GPU的工作大部分就是这样，计算量大，而且要重复很多很多次。就像你有个工作需要算几亿次一百以内加减乘除一样，最好的办法就是雇上几十个小学生一起算，一人算一部分&lt;/p&gt;

  &lt;p&gt;CPU就像老教授，积分微分都会算，就是工资高，一个老教授资顶二十个小学生，你要是富士康你雇哪个&lt;/p&gt;

  &lt;p&gt;CPU和GPU因为最初用来处理的任务就不同，所以设计上有不小的区别，而某些任务和GPU最初用来解决的问题比较相似，所以用GPU来算了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;软件&quot;&gt;软件&lt;/h1&gt;

&lt;h2 id=&quot;grid-概念&quot;&gt;grid 概念&lt;/h2&gt;

&lt;p&gt;CUDA 采用异构编程模型，用于运行主机设备应用程序。它有一个类似于 OpenCL 的执行模型。在这个模型中，我们开始在主机设备上执行一个应用程序，这个设备通常是 CPU 核心。该设备是一个面向吞吐量的设备，也就是说，一个 GPU 核心执行并行计算。内核函数用于执行这些并行执行。一旦执行了这些内核函数，控制就被传递回继续执行串行操作的主机设备。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906232554.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了方便定位threadidx等，用多维数据来表示，就有了维度。&lt;/p&gt;

&lt;p&gt;由于许多并行应用程序涉及多维数据，因此可以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;很方便地将线程块组织成一维、二维或三维线程数组。&lt;/code&gt;grid中的块必须能够独立执行，因为grid中的块之间不可能进行通信或合作。当启动一个内核时，每个线程块的线程数量，并且指定了线程块的数量，这反过来又定义了所启动的 CUDA 线程的总数。&lt;/p&gt;

&lt;p&gt;块的最大 x、 y 和 z 维分别为1024、1024和64，其分配应使 x × y × z ≤1024，即每个块的最大线程数。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;扩展理解：float4， int4， long4 又是什么？有什么好处？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;index-索引&quot;&gt;index 索引&lt;/h2&gt;

&lt;p&gt;CUDA 中的每个线程都与一个特定的索引相关联，因此它可以计算和访问数组中的内存位置。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;p&gt;其中有一个512个元素的数组。其中一种组织结构是使用一个包含512个线程的单个块的grid。假设有一个由512个元素组成的数组 C，它由两个数组 A 和 B 的元素相乘构成，这两个数组都是512个元素。每个线程都有一个索引 i，它执行 A 和 B 的第 i 个元素的乘法运算，然后将结果存储在 C 的第 i 个元素中。 i 是通过使用 blockIdx  (在这种情况下是0，因为只有一个块)、 blockDim (在这种情况下是512，因为块有512个元素)和 threadIdx 计算得到的，每个块的值从0到511不等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906224450.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;线程索引 i 按以下公式计算:&lt;/p&gt;

&lt;p&gt;int i = blockIdx.x * blockDim.x + threadIdx.x;&lt;/p&gt;

&lt;p&gt;因此，i的值范围从0到511，覆盖整个数组。但是不一定是连续的，3，4,1,2。。。。&lt;/p&gt;

&lt;p&gt;再来：&lt;/p&gt;

&lt;p&gt;考虑一个大于1024的数组的计算，我们可以有多个块，每个块有1024个线程。考虑一个包含2048个数组元素的示例。在这种情况下，我们有2个线程块，每个线程有1024个线程。因此线程标识符的值将从0到1023不等，块标识符将从0到1不等，块维度将为1024。因此，第一个块将获得从0到1023的索引值，最后一个块将获得从1024到2047的索引值。&lt;/p&gt;

&lt;p&gt;每个线程将首先计算它必须访问的内存索引，然后继续进行计算。举个实际的例子，其中数组 A 和 B 的元素通过使用线程并行添加，结果存储在数组 C 中。线程中相应的代码如下所示&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;__global__ void vectorAdd (float *A , float *B , float * C , int n)
{
    int index = blockIdx.x * blockDim.x + threadIdx.x;
    if (index &amp;lt; n)
    {
        C[index] = A[index] + B[index] ;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了一维还有2/3维度，计算index可以参考公式，也是一样不一定连续， 234,235,200,201……&lt;/p&gt;

&lt;h1 id=&quot;硬件&quot;&gt;硬件&lt;/h1&gt;

&lt;h2 id=&quot;sm-stream-multiprocessor-流多处理器&quot;&gt;SM stream Multiprocessor： 流多处理器&lt;/h2&gt;

&lt;p&gt;每个SM内又包括了多个SP（streaming processor）。而SP正是实现算数功能的核心部件，可以类比CPU之中的ALU单元，只不过其计算能力要差很多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906215236.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，每个SM内部的SP之间，可以共享一块shared memory。&lt;/p&gt;

&lt;p&gt;以及一块指令缓存用于存放指令、一块常量缓存（c-cache）用来存放常量数据，两个SFU（特殊运算单元，special function unit）用来做三角函数等较复杂运算，MT issue用来实现多线程下的取指，以及DP（Double Precision Unit）用来做双精度数。 除去一些运算单元之外，最重要的就是c-cache与shared memory两块数据存储区。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;注意这两个位置的数据只能由SM内部的SP进行访问&lt;/code&gt;，SM之间也有用于数据交换的区域。最主要的是global memory。&lt;/p&gt;

&lt;p&gt;硬件将线程块调度到一个 SM。一般来说，SM 可以同时处理多个线程块。一个 SM 可能总共包含多达8个线程块。线程 ID 由其各自的 SM 分配给线程。&lt;/p&gt;

&lt;p&gt;每当 SM 执行一个线程块时，线程块中的所有线程都同时执行。因此，为了释放 SM 内部线程块的内存，关键是该块中的整个线程集都已结束执行。每个线程块被划分为预定的单元，称为warp。&lt;/p&gt;

&lt;h2 id=&quot;warp-wavewavefront&quot;&gt;warp （wave、wavefront）&lt;/h2&gt;

&lt;p&gt;不同GPU vendor叫法不一样，A卡叫wave，N卡叫warp/卧铺/，我司的也叫wave。我个人理解的就是一波波的相同指令的线程执行，wave好记。&lt;/p&gt;

&lt;p&gt;Warp：warp是SM调度和执行的基础概念，通常一个SM中的SP(thread)会分成几个warp(也就是SP在SM中是进行分组的，物理上进行的分组)，一般每一个WARP中有32个thread.这个WARP中的32个thread(sp)是一起工作的，执行相同的指令，如果没有这么多thread需要工作，那么这个WARP中的一些thread(sp)是不工作的，叫inactive。&lt;/p&gt;

&lt;p&gt;我们应该注意，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;线程、线程块和grid本质上是编程的视角&lt;/code&gt;。为了得到一个完整的线程块要点，从硬件的角度了解它是至关重要的。硬件将执行相同指令的线程分组为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warps&lt;/code&gt; 。几个warps组成一个线程块。几个线程块被分配给一个流式多处理器(SM)。几个 SM 组成了整个 GPU 单元(执行整个内核grid)。&lt;/p&gt;

&lt;p&gt;编程的视角与 GPU 中线程块的硬件视角之间的图形关联。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220906221155.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在硬件方面，线程块由“warp”组成。warp是一个线程块中的32个线程的集合，使得warp中的所有线程执行相同的指令。这些线程由 SM 连续选择。&lt;/p&gt;

&lt;p&gt;假设有32个执行指令的线程。如果其中一个或两个操作数都没有准备好(例如还没有从全局内存中获取) ，就会发生一个称为“上下文切换”的过程，将控制权转移到另一个指定的操作数上。&lt;/p&gt;

&lt;p&gt;当从一个特定的warp切换时，warp的所有数据都保留在寄存器文件中，以便在其操作数准备就绪时能够迅速恢复。当一条指令没有突出的数据依赖关系时，也就是说，它的两个操作数都准备好了，就认为各自的偏差已经准备好可以执行了。如果有多个warp符合执行条件，则父 SM 使用一个warp调度策略来决定哪个warp获取下一个提取指令。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;warp调度有不同的策略，这个有点深入，先不看，加个#TODO。比如RR、LRF、FAIR、CAWS。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://en.wikipedia.org/wiki/Thread_block_(CUDA_programming)&lt;/p&gt;

&lt;p&gt;https://www.nvidia.com/content/PDF/fermi_white_papers/NVIDIA_Fermi_Compute_Architecture_Whitepaper.pdf&lt;/p&gt;

&lt;p&gt;http://www.uml.org.cn/embeded/201809034.asp?artid=21130&lt;/p&gt;

&lt;p&gt;https://www.cnblogs.com/maomaozi/p/15939275.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/06/cuda-basic/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/06/cuda-basic/</guid>
        
        <category>cuda</category>
        
        
      </item>
    
      <item>
        <title>53 - no AD</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220903173033.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天把公众号底部的广告关闭了，因为底部的广告看上去不是很好，它是根据你个人在网上的identity来推送的，比如说你在同一个局域网，然后这个局域网里面有其他人去访问了，带给这个网络标签就会有多种标签，它推送的可能不是你喜欢的内容，也不是你想看的内容。广告目前根本是没什么收入的，一个月就几十块，摊手~。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;目前内容载体是视频，要赚钱的还是要走视频内容，比文字更容易些。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我打算开个赞赏不定时的更新文章，如果你看到比较有感兴趣的，那你就随手赞赏，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最低一元，只要头像出现即可，不用赞赏太多&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;看来有好多在写 newsletter 的时候，中途已经放弃（停更）了。 我也在坚持啊，因为每次写一篇文章，加上平时积累的时间，大概是2到5个小时一篇文章。&lt;/p&gt;

&lt;p&gt;收获肯定是有的，比如说自己思维更清晰，去描述一个东西，很有条理的给他说出来（上次去孩子的学校&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;脱稿&lt;/code&gt;演说，完全是写作的功劳呀），还有一个就是提升了自己，及时的去总结自己过失，同时也对这个互联网以及相关领域的知识保持着不断的更新。&lt;/p&gt;

&lt;p&gt;说到更新，已经是快35的人了，因为有人生的一个焦虑。前段时间听一个播客，其实在美国大家不是躺平的一个状态，像一些硅谷的程序员也是很卷的，除了一些欧洲、日韩他们才属于一个躺平的状态。&lt;/p&gt;

&lt;p&gt;还有一个原因，我更有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;自私的想法&lt;/code&gt;，就是通过写这个，然后结识一些有趣的大佬，能不能抓住一个机会暴富？&lt;/p&gt;

&lt;p&gt;这种心态是非常幼稚的，暴富肯定是不能暴富的。&lt;/p&gt;

&lt;p&gt;看到其他人通过收费然后变现，其实自己也非常的羡慕，我自己的想法就是坚持更新下去，至少从我现在看来还不会收费，内容也不允许收费呀。&lt;/p&gt;

&lt;p&gt;一个好的产品，一个好的商业，肯定是要通过变现，这个地方没有套现。我觉得我收获的知识也是有价值的，同时你们给我带来一些转发、点赞、以及打赏也是给我的一种动力，同时也是对我的一种付费，我觉得这种付费更是一种无价的。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://exafunction.com/blog/are-gpus-worth-it&quot;&gt;机器学习一定要用GPU么？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220903164132.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;某些情况下是可以成立的.&lt;/p&gt;

&lt;p&gt;从理论上讲，这听起来像是一个愚蠢的问题。机器学习模型，特别是深度学习模型，（主要是）是一堆算术运算，特别是矩阵乘法等可并行操作。通过设计，GPU针对可并行化的算术操作进行了优化, 这是天作之合。&lt;/p&gt;

&lt;p&gt;正如作者在前面的文章中所讨论的，希望消除机器学习从业者在部署他们的工作负载时所感受到的所有痛苦和担忧。成本和延迟可以说是最重要的，因此解决这个动态多路复用问题。在数字方面，我们已经成功地将30个客户机复用到一个单一的 GPU 上，以满足客户的工作负载.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ID-z70BsYOdWPlwFiVojPw&quot;&gt;英伟达挖矿史：“把这一代最优秀的工程师聚在一起，然后研究挖比特币”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220903164544.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果问各大科技公司，英伟达这家公司最让人羡慕的地方是什么，“不受周期限制”可能是最多的答案。&lt;/p&gt;

&lt;p&gt;如果套用Facebook早期工程师杰夫·汉默巴彻批评互联网公司的那句话：“我们这一代人中最优秀的头脑，都在思考如何让人们点击广告，这太糟糕了”，那么沉迷挖矿的英伟达，同样聚集了最棒的工程师们，但如果这些工程师们聚在一起最终就是为了研究挖矿，那同样要说一句：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;这也太糟糕了&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/iZ925nJoT8021bDBQmNjig&quot;&gt;有多少年轻人在山姆会员店装中产&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如今，沉默地逛山姆已成为了一种美德。
在某问答社区，如果你说山姆贵，会有人质疑你经济能力.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://neverworkintheory.org/2022/08/30/software-engineering-research-questions.html&quot;&gt;软件工程研究的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文包含64个软件工程研究问题。这些问题没有任何具体的顺序，它们涵盖了广泛的主题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://webkit.org/blog/13140/webkit-on-github/&quot;&gt;WebKit 终于宣布放弃SVN管理代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20220903164859.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2022年6月23日，WebKit 项目冻结了 SVN仓库，并将管理和与源代码的交互过渡到 GitHub 上。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rui314/chibicc&quot;&gt;chibicc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个C语言编译器项目。为了让读者可以从头到尾清晰地理解项目演进的过程，作者非常用心地编排每一次的commit。虽然这是一个挺“玩具”的编译器，但是已经可以对一些项目进行编译了，这些项目包括Git、SQLite、libpng，它甚至也已经实现了自举。
挺有意思的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/en/blog/devtools-modern-web-debugging/&quot;&gt;devtools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;许多开发人员利用框架、构建工具和编译器从更高级别的角度编写Web应用程序。然而，开发人员只有在Chrome DevTools中调试或分析Web应用程序时才能看到其代码的编译版本。本文讨论了Chrome DevTools中的新功能，这些功能可以帮助开发人员在编写代码时查看代码。这些更改旨在改善调试体验。Chrome DevTools团队计划在未来的更新中改善DevTools分析体验。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/StaZhu/enable-chromium-hevc-hardware-decoding/blob/main/README.zh_CN.md&quot;&gt;Chrome / Edge 启用 HEVC 硬解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个教你为 Chrome / Edge 启用 HEVC 硬解，或编译 Chromium / Electron 使其支持 Windows / macOS 平台 HEVC 硬 &amp;amp; 软解功能的教程&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/09/03/no-ad/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/09/03/no-ad/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>52 -  热</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;截至8月15日，四川省共有10市启动了市级抗旱应急响应。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;川渝地区最近干旱太严重了，据说是 100 年难遇的干旱天气，成都的地理位置，导致久不下雨，就热得不行。我们已经开始居家办公 2 个礼拜了。&lt;/p&gt;

&lt;p&gt;到目前为止(08.28)在成都这边，户外温度 35°左右，不是那么热了。下了好几场不大不小的雨，已经缓解了旱情。&lt;/p&gt;

&lt;p&gt;这场高温极端天气让我们切切实实地感受到了环境变化对自己生活的影响。但这种变化和影响的范围，在早些年，远不止在中国，还有欧洲。事实上无论你生活在这个地球的哪个角落，面对环境变化，我们都是同呼吸共命运的共同体。&lt;/p&gt;

&lt;p&gt;环境的变化和我们的生活在这个地球的人的生活息息相关，让我们做一些力所能及的事情吧，我想到的一些点，欢迎补充&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;尽可能减少和重复使用。工厂在生产新产品时会排放二氧化碳。所以，与其买新东西，比如电器和数码产品，可以去咸鱼看看
    &lt;blockquote&gt;
      &lt;p&gt;我最近在咸鱼卖了充电器(61w Type-c 充电器)，顺便给一个建议，不同类型的充电器不要混用，我就是 thinkpad 和 MacPro 的混用，结果把 mac 的弄坏了，心痛&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;电器在待机情况下，也会消耗能量。在不使用时拔掉手机和笔记本电脑充电器的插头，可以使用类似小米的 WIFI 智能插座插座来控制一键断电&lt;/li&gt;
  &lt;li&gt;夏天空调尽量保持在 26 °及以上，我们最近解决方案是保持在 27°+风扇，挺凉快的，不知道这样和 26°哪个更省电，我没有具体的数据，摊手&lt;/li&gt;
  &lt;li&gt;减少间接的释放能量，比如尽量多吃季节性和本地种植的水果和蔬菜。这减少了用于种植和运输食物的能量， 还有做公共交通工具出行&lt;/li&gt;
  &lt;li&gt;…… 欢迎补充&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/pZNKNY-y5JqDCzQWG5DKkQ&quot;&gt;Shopee太让人失望了&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;来自脉脉网友的动态：这Shopee谁还敢接offer，新加坡工作签都办好了， 临入职取消offer,我这边离职流程马上都走完了， 一看脉脉，这次规模还不小，无论校招还是社招， 无论国籍，也无论入职时间，甚至有的人都落地新加坡了。本人直接原地失业，跟我的招聘HR打电话，人家伤心的稀里哗啦。气死我了。&lt;/p&gt;

&lt;p&gt;曹大开了一贴，准备为这些同行寻求另外一条道路，能捞一个是一个。我就是一个搬运工，希望有看到的可以去试试。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/IGnGkh0GRLn81IzhxXkl0Q&quot;&gt;在德国，感受俄乌战争（续）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里还想说句题外话，许多人的世界观似乎简单到了只有“中国/外国”两分法，所以谈论“外国”的时候就会列举美国油价低、德国教育免费、日本工匠精神等等，总之是把各国最好的凑成“外国”来比较，这是很不公平的。稍微多了解下就知道，美国油价低但犯罪率高也没有全民医保，德国教育免费但油价高收入也相对低，日本有高额农业补贴、老龄化问题也很严重……比较应该在同类对象间进行，这是基本原则。每个人要有自己的判断力。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/bqJj61ZlHXc_gm3qlwrr8g&quot;&gt;美化重庆救火英雄，合适吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;川渝地区最近干旱天气，导致了重庆地区有多处的山火，一些组发组织的去灭火，好多媒体称之为英雄。本文表述了可以为英雄适度避讳，不必夸大其事迹。英雄也是肉体凡胎，会有七情六欲，谁都会有历史污点，我们称颂英雄之时，没有必要刻意提及这些来扫兴。但有他人提起时，也不必去违背事实加以否认。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apify/crawlee&quot;&gt;crawlee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Crawlee是一个TypeScript web抓取和浏览器自动化库。它强大的防阻塞功能使爬虫看起来像人类。Crawlee具有用于HTTP和无头浏览器爬行的单一接口、用于爬行的URL的持久队列、用于表格数据和文件的可插拔存储、自动缩放以及集成的代理轮换和会话管理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/huggingface/diffusers&quot;&gt;diffusers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;diffusers 提供跨多种模式的预训练扩散模型，并用作扩散模型推理和训练的模块化工具箱。它具有最先进的扩散管道、各种噪声调度器、多种类型的模型、训练示例和推理示例。Diffusers与Stability AI的稳定文本到图像漫射模型完全兼容。&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/08/27/life-is-given-by-air-conditioner/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/08/27/life-is-given-by-air-conditioner/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>51 -  不要只担心代码</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;Linux的创造者Linus Torvalds说。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bad programmers worry about the code. Good programmers worry about data structures and their relationships.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;程序员更关心数据结构和代码的关系，而不是单纯的代码，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;很多种表达方式，哪一种很重要么？不是，而是结合当前的业务，如何高效，解决问题才是重要的。&lt;/p&gt;

&lt;p&gt;在推上看到有人说机翻的文章，有点抄袭的意思，这是一个开放的问题，你怎么看待？&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/sMAC2gB1GY1v1xRmuOzBUw&quot;&gt;工作4年，我的收入被父母退休金倒挂了&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“听妈妈的话”，既有一定的人生指导意义，又有经济意义，还有一定的讽刺意义&lt;/p&gt;

&lt;p&gt;在复杂的经济社会中，退休金成了一项具备多重用途的指标。它可以决定一场相亲的结果，可以决定一场家庭聚会的座次排序，也可以成为年轻人选择工作以及定居城市时的重要标准。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devblogs.microsoft.com/oldnewthing/20220816-00/?p=106994&quot;&gt;奇怪的 bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;windows早些年播放杰克逊的歌曲，会出现一些非常奇怪的事情：在一台笔记本电脑上播放音乐视频导致在附近的笔记本也电脑崩溃，即使另一台笔记本电脑没有播放视频！&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://electronicmaterialsoffice.com/&quot;&gt;无线机械键盘 Altar I &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/e6MVa3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;推荐一个实物工具，一种用优质、可持续的材料锻造的超低调无线机械键盘。专注于一个想法：更少，但更好。精密加工的铝单体。纤细、触觉、机械的开关。排版平衡。蓝牙。悄悄地低调。它在桌子上看起来不错。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jank-lang.org/&quot;&gt;jank&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jank是一种通用编程语言，它包含了Clojure的交互式、面向价值的性质以及对原生编译和最小运行时的渴望。jank与Clojure非常兼容。请注意，jank正在大量开发中；假设所有功能都是计划好的或不完整的。&lt;/p&gt;

&lt;p&gt;jank与Clojure的不同之处在于，其主机是基于LLVM的JIT之上的C++。此外，jank有一个内置的渐进类型系统，从而进行静态类型分析。这使jank能够提供与基于REPL的开发相同的好处，同时能够更深入地进入正确性和性能领域。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ankitpokhrel/jira-cli&quot;&gt;jira-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JiraCLI是Atlassian Jira的交互式命令行工具，将帮助您在一定程度上避免Jira UI。该工具尚未完成，但具有改进Jira工作流程所需的所有基本功能。&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/08/21/bad-code/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/08/21/bad-code/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>50 -  成不了是常态</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;最近听的一篇播客，&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/62f09d4620298b975e3534ad?s=eyJ1IjogIjYwZGU4ZDZlZTBmNWU3MjNiYmI0MzlhZCJ9&quot;&gt;吴老师从失败中总结的三大经验&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;该努力就一定竭尽全力&lt;/li&gt;
  &lt;li&gt;心态稳定&lt;/li&gt;
  &lt;li&gt;风控放在首位&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我觉得是做一件事情，不成是大概率的情况。没有成我们就不做了吗，不是。我们接着做，所以说创业它是有风险的，也有门槛，不是任何人轻轻松松就能创业成功，不是一件事情轻轻松松就能做成。&lt;/p&gt;

&lt;p&gt;失败了之后没有成，我们要调整自己的心态，继续走，继续向前。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;同时要做好总结和复盘&lt;/code&gt;，哪些做的不好的地方，这个特别重要，因为你在之前可能都是真金白银，买来的一些经验教训，如果你在复盘总结中能找到核心的失败的原因，那可能在下一次中你就能避免这个问题。&lt;/p&gt;

&lt;p&gt;说白了这个道理，这个经验一般人是不会告诉你的，只有自己去拆坑，因为这个项目啊不是一，任何人都知道任何人都清楚，只有自己才是最清楚的。&lt;/p&gt;

&lt;p&gt;我读书的时候是个学渣，高中的时候觉得数学题非常难，只有用题海战术去解决这些问题，后来慢慢的发现数学你可以总结。&lt;/p&gt;

&lt;p&gt;比如某几类题的所有规律，总结出有几种方法去解决，这就是融会贯通举一反三，有可能是我没有认真听课，老师不会带着我们总结这种方法，成长非常慢，只有用题海战术去提高自己的成绩。&lt;/p&gt;

&lt;p&gt;编程是一样的，编程里面很多算法，很多的设计思路。&lt;/p&gt;

&lt;p&gt;如果只是单纯的去练一些leetcode，不去总结：为什么要这么做，思路是什么，也达不到一个很快就能掌握很多算法的思路。&lt;/p&gt;

&lt;p&gt;提到编程，要结合实际的项目去运用，这样是成长最快的。有个「时间遗忘曲线」，学习者学完之后，只知道简单的基本用法，但是到实际去用的时候，又忘掉了。&lt;/p&gt;

&lt;p&gt;有如下几点小小的建议：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;失败是常态&lt;/li&gt;
  &lt;li&gt;总结复盘&lt;/li&gt;
  &lt;li&gt;学了就要用起来&lt;/li&gt;
  &lt;li&gt;…… (欢迎补充)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.myzaker.com/article/62f2311c8e9f0930bd6614c6&quot;&gt;壁仞科技发布首款通用 GPU 芯片 BR100，打破全球算力纪录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我个人目前是从事 GPU 行业，比较关心这个产品。不管网上说啥，反正数据是非常非常的优秀。打个不巧当的比喻：一个三岁小孩吊打 20 多岁的威猛青年，也没啥热身，突然搞这么一下子，怎么觉得不踏实呢。&lt;/p&gt;

&lt;p&gt;壁仞科技举行发布会，正式发布了旗下首款通用 GPU 芯片 BR100 系列。官方称，BR100 创出全球算力纪录，16 位浮点算力达到 1000T 以上，8 位定点算力达到 2000T 以上，单芯片峰值算力达到 PFLOPS 级别。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/n4lewochv8EPZm4q7sh08g&quot;&gt;河南给村镇银行垫付了180亿，还存在四大疑点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;钱没了，不明不白，钱又回来了，还是不明不白，在一个法治社会，这很不应该。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/qe8tkzk-ETMP0U8E7FVuQA&quot;&gt;县城房子砸在年轻人手里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;县城房总是免不了被空置的命运。缺乏支柱产业的县城，无法提供理想的就业机会，无论是脱离土地的农民，还是追求发展的年轻人，即使买了房，也很难在这里真正安家置业，县城人口外流导致的空心化问题日益凸显。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/7Kx0FxMdVE1-RPhVqJtl8w&quot;&gt;全都安排好了，财务自由路上我们需要了解的每一个问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;积累财富的完整过程是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;花得要比挣的少；&lt;/li&gt;
  &lt;li&gt;把「闲钱」尽可能多地投资；&lt;/li&gt;
  &lt;li&gt;搞钱，提高收入；&lt;/li&gt;
  &lt;li&gt;把多搞来的钱也拿去投资；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重复上面四个步骤，剩下的问题交给时间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/X3vvtHEs2Nqp61MVJTVvnA&quot;&gt;怎样成为一名更优秀的程序员？我总结出 7 条建议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以有很多不是很符合自己的理解，其中有一点我比较认同，把事情简单化，解决问题为主。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;我有个问题想问你：你是否花费大把时间让代码看起来很漂亮？如果是这样，我建议你不要太关注这样的事。不管怎样，随着时间发展，你的代码会有很多改变。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/qlib&quot;&gt;微软开源量化库 qlib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Qlib是一个面向人工智能的定量投资平台，旨在实现定量投资中人工智能技术的潜力、授权研究并创造价值。通过Qlib，您可以轻松尝试您的想法，以创建更好的量化投资策略。越来越多的SOTA定量研究作品/论文在Qlib中发布。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://techgaun.github.io/active-forks&quot;&gt;github fork 活跃查询&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一款分析 GitHub repo folks 的工具，可以查找最活跃 folks，方便查找停止维护的库的新维护者。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/Qgs4bD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比如上面就是最新 qlib push 的 fork 是哪一个。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/fluentui-emoji&quot;&gt;3D 表情符号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微软已经开源了1500多个3D表情符号。任何人都可以自由地重新混音和构建这些设计。该系列包括跨越不同人群、宗教和国家/地区的表情符号。微软开源工作的部分原因是，该公司观察到疫情期间工作场所使用表情符号的方式发生了变化。表情符号存储库的链接可用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MathisBullinger/froebel&quot;&gt;froebel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Froebel是一个严格类型的TypeScript实用程序库。它包含各种项目中的TypeScript助手函数和实用程序，js和浏览器。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://add0n.com/access-control.html&quot;&gt;Chrome 浏览器跨域访问插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;跨域CROS访问场景，就是在 A 网址里面访问 B 网址，没有添加信任是不能访问的。
比如我平时在竹白写文章通过 md-&amp;gt; 转 html 文本-&amp;gt; 粘贴到竹白，这个时候没有图片就好办，有图片就会提示CROS 失败。在竹白平台插入图片就会提示失败，安装这个插件就可以解决这个问题。或者其他跨域验证等也可以用这个。&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/08/14/normal/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/08/14/normal/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>49 -  聚焦</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/jBIljb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有没有和我一样，想把公众号做好，视频号做好，抖音做好，小红书做好，只要在这个领域看到有自己能做的就上。&lt;/p&gt;

&lt;p&gt;我是一个普通人，我相信大部分人都是和我一样，都是普通的人，没有那么多精力去把所有的事情都做好，因此你要在这里面找出你&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最擅长的领域&lt;/code&gt;，然后在这个领域里面去做你擅长的，这个叫降维打击。&lt;/p&gt;

&lt;p&gt;如果你在别人擅长的领域去做你不擅长的事情，那成功的道路就没那么简单了。&lt;/p&gt;

&lt;p&gt;我的小红书基本上日更一个月，粉丝达到了3000接近4000，我觉得我其实没有做什么，然后只是知道了小红书什么需要什么样的图文，然后我就根据这个人群自己去研究实践了一下，到底有没有这个需求，到目前为止我都还没在上面套现。&lt;/p&gt;

&lt;p&gt;还有之前有大佬，说我的公众号写的是什么东西，我确实我的公众号是写给我自己看的，也是为我自己写的，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;没有一个聚焦&lt;/code&gt;，内容太分散了这样的人群画像和人群标签，不利于去推广，也不利于后期的一个套现。&lt;/p&gt;

&lt;p&gt;如果现在你也准备去做公众号，视频号、抖音、快手、小红书，我有 2 个建议给到你：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第1个是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;聚焦&lt;/code&gt;，要在这个领域聚焦不要太分散，一定要集中精力去打某一个点。找自己擅长领域垂直，越垂直越好&lt;/li&gt;
  &lt;li&gt;用自己的一个新账号，这个新账号一定要干净，不要有太多的错综复杂的东西在里面。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有一点就是，立马去干！&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/74874&quot;&gt;一篇文章，读懂中文播客前世今生&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文旨在讨论中文播客市场未来发展的可能性。为了还原推导过程，主要使用了三个章节：中文播客的现在（困境）、过去（时刻）、未来（答案）。在每个章节里，我会对市场中的上、中、下游加以讨论，分别是影响产业的时代背景、掌管内容方向的创作者和面向消费场景的平台。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/DIRyiRTRpiHADpT8RLfzyA&quot;&gt;中国的银行有多赚钱：六大行一天，约等于比亚迪三年&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果有一天，一家有400亿存款的银行宣布破产了，由其他银行的利润来还，需要多久？由中国银行负责，只需要70天，差不多两个月出头的时间就能填上。&lt;/p&gt;

&lt;p&gt;农业银行负责只需要60天，两个月。建设银行50天也可以解决。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scmp.com/news/china/science/article/3186870/chinas-ai-driven-power-grid-can-recover-blackout-3-seconds&quot;&gt;中国人工智能驱动的电网可以在3秒内从停电中恢复&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中国新疆地区的电网可以在短短三秒钟内从停电中恢复过来。电网有许多传感器，形成强大的人工智能，无需人工干预即可决定电源路线。一旦低压配电网络发生设备故障，它就会开始定位和隔离故障并恢复电源。该技术将迅速扩展到中国其他社区。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.languagetool.org/languages&quot;&gt;LanguageTool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LanguageTool 是一款适用于英语、中文、法语、德语、葡萄牙语、波兰语、荷兰语和其他20多种语言的开源校对软件。它发现了许多简单的拼写检查器无法检测到的错误。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.duckdns.org/domains&quot;&gt;duckdns 免费的动态 dns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Duck DNS免费动态DNS托管在亚马逊VPC上。￼&lt;/p&gt;

</description>
        <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/08/06/focus/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/08/06/focus/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>在C++里面使用内联汇编语法</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;学习过程中的总结，有什么不对的地方望指出，谢谢~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Asm 语句允许直接在 C 代码中包含汇编指令。特别是对于代码的性能，或者访问 C 程序不易获得的汇编指令，这可以帮助我们最大限度地提高时间时间.&lt;/p&gt;

&lt;p&gt;来看看下面的C代码，汇编语法一般情况下，第一个操作数是dst，就是下面我们看到的%1，是输出，%0是输入，也是source.&lt;/p&gt;

&lt;p&gt;下面代码的意思就是：把src拷贝给dst，然后给dst加1. 所以如果你的cpu或者GPU支持这个指令，打印出来的结果就是2.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   

&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov %1, %0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;add $1, %0&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这个实例里面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt;的意思是register寄存器的意思，除了r还有其他关键字&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;r 操作数指定一个通用的寄存器 register&lt;/li&gt;
  &lt;li&gt;m 操作数指定一个内存地址 memory&lt;/li&gt;
  &lt;li&gt;i 操作数指定一个整数常量 integer&lt;/li&gt;
  &lt;li&gt;g 操作数必须是通用寄存器、内存地址或整数常量中的一个.也可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rmi&lt;/code&gt;来表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要注意有简单的几点，可以下面的一个格式：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;扩展的 asm 语句必须位于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数内部&lt;/code&gt;。只有基本的空间可以是函数之外的。&lt;/li&gt;
  &lt;li&gt;用 asm 关键字作为开头，也可以用__asm__，用前者的时候比较多&lt;/li&gt;
  &lt;li&gt;optional stuff可以为空、volatile、goto其中一个&lt;/li&gt;
  &lt;li&gt;assembler template 就是你想用的汇编指令&lt;/li&gt;
  &lt;li&gt;每一个asm块，长度不超过30个inputs&lt;/li&gt;
  &lt;li&gt;输出、输入、lable都是可选的&lt;/li&gt;
  &lt;li&gt;冒号只需要到您希望使用的参数为止，如果希望跳过参数，则冒号之间没有任何内容是有效的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;语法格式：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	    &lt;span class=&quot;s&quot;&gt;&quot;assembler template&quot;&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clobbers&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;输入和输出&quot;&gt;输入和输出&lt;/h1&gt;

&lt;p&gt;输出和输入是汇编程序模板“格式字符串”的参数。它们是以逗号分隔的。他们都使用以下两种模式中的一种:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       &quot;constraint&quot; (expression)
[Name] &quot;constraint&quot; (expression)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;限制&quot;&gt;限制&lt;/h2&gt;

&lt;p&gt;比如这个乘法指令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imul %0, %1, %2&lt;/code&gt;，按照上面提到的%0是dst，后面2个是src.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于x86指令架构，乘法指令有三个操作数的时候：此种形式需要一个目标操作数%0（第一个操作数）与两个源操作数（第二个与第三个操作数）。这里，第一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;源操作数&lt;/code&gt;%1（可以是通用寄存器或内存位置）乘以第二个源操作数%2（立即数）。乘积随后存储到目标操作数%0（通用寄存器）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;第一个%0 一定就是寄存器，不能是const&lt;/li&gt;
  &lt;li&gt;第二个操作数%1，可能是regist或者是memory地址&lt;/li&gt;
  &lt;li&gt;第三个操作数%2，一定就是const integer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(ARM 只支持寄存器上的运算，所以所有的操作数都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;寄存器&lt;/code&gt;操作数。)&lt;/p&gt;

&lt;h2 id=&quot;输出&quot;&gt;输出&lt;/h2&gt;

&lt;p&gt;输出指定左值，结果应该存储在操作结束的位置。可赋值的通常是 lvalue (变量、取消引用的指针、数组下标、结构字段等)。只要遵守约束，大多数左值都被接受为操作数: 例如，可以使用 r (register)传递位字段，但不能使用 m (memory) ，因为不能获取位字段的地址。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;输出的约束字符串必须以 = 或 + 作为前缀&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; 表示输出实际上是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;读写值&lt;/code&gt;。操作数最初具有表达式包含的值。可以在程序集字符串中的任何位置读取此输出操作数。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&amp;amp;&lt;/code&gt; 意味着输出是一个提前完成的输出。它的初始值未指定。一旦给 =&amp;amp; 操作数赋值，就不会出现从该操作数读取的错误。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; 意味着输出是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;只写&lt;/code&gt;的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=@ccCOND&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; 的特殊情况，它允许您在汇编语句的末尾查询条件代码的结果。不能在程序集模板中引用条件输出。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如x86指令集是这样的&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addl %1, %0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+rm&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;g&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在arm就是下面这样的，arm只有寄存器&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;add %0, %1, %2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;输入&quot;&gt;输入&lt;/h2&gt;

&lt;p&gt;输入可以是任何值，只要它对约束有意义。例如，要使用 i 约束，编译器必须能够发现该值是一个常量。它们没有任何前缀。&lt;/p&gt;

&lt;p&gt;如果语法中使用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asm volatile&lt;/code&gt;，代码有可能被优化掉，比如没有用到的无效语句.&lt;/p&gt;

&lt;p&gt;还有其他的goto、labels等高级用法，可以在实战用多练习，这样更容易掌握，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;学习的新的只是用起来才是关键.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html&lt;/p&gt;

&lt;p&gt;https://llvm.org/docs/LangRef.html#inline-assembler-expressions&lt;/p&gt;

&lt;p&gt;https://www.felixcloutier.com/documents/gcc-asm.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/08/04/inline-asm-syntax/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/08/04/inline-asm-syntax/</guid>
        
        <category>asm</category>
        
        
      </item>
    
      <item>
        <title>48 -  值得去做</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;看到&lt;a href=&quot;https://happyxiao.com/&quot;&gt;订阅可乐周报，和我一起进步&lt;/a&gt;的作者 happyxiao 发了一个推特，说自己在写文章的时候，很想写完之后去润化一下自己的文章，包括文章变得更幽默等等，但是在写完newsletter之后，发现自己已经精疲力尽了，那很难再去抽出时间去修改自己的一些错别字之类的小问题。&lt;/p&gt;

&lt;p&gt;在错别字方面大佬都是如此，更别说我这种小人物了……&lt;/p&gt;

&lt;p&gt;我在这方面是发出文章的，第一时间我先去浏览文章，包括语句通顺不，内容是不是我想要表达的内容，这样发现问题可以及时的去更改，后面有读者第2次点击进来的链接，看到的内容是比较新的。&lt;/p&gt;

&lt;p&gt;除了在竹白上周更之外，同时还同步到微信公众号「chasays」上面。&lt;/p&gt;

&lt;p&gt;大家在看到发了很多期的 newsletter 的作者的时候，建议就多点赞，那说明这个作者是非常的花了大量的时间去更新，我们程序员中有一个大佬的 newsletter &lt;a href=&quot;https://github.com/ruanyf/weekly&quot;&gt;科技爱好者周刊，每周五发布&lt;/a&gt;，我基本上是每周五必看的内容。&lt;/p&gt;

&lt;p&gt;目前已经 200 多期了，我大概算一下，每期花费的时间大概是  4 个小时，200*4=800小时，这个可是业余时间抽出来做的，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;所以不要说自己没有时间了&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对自己有意义&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;，有长期价值的事情，要毫不犹豫的去做&lt;/code&gt;。有更深远的影响的价值，那就会值得花时间去做。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/XJStDD_DOeBVcOV09t2mHQ&quot;&gt;有用和无用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;人生中遇到的问题不太可能比小行星撞地球更大更困难更不顺利。任何问题，无非一种是你认为可以解决的，一种是你认为不可能解决的。认为可以解决，就努力解决。认为不可能解决，就平静接受。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;从功利角度看，这两种选择都可能是对自己有利的&lt;/code&gt;。唯独沉浸在恐惧或是愤怒中对自己是不利的。这就是曾国藩讲的“既往不恋”。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/fyK0gp8rcaDnOJqfSAJFrw&quot;&gt;翻译练习：如何损失金钱和时间&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用控制时间来避免逸乐，正如用控制金钱来避免逸乐一样，远避逸乐不再足以保护你。在史前的狩猎采集时代，在所有的前工业社会，它也许足以保护人们。天性和教养相结合，使得我们避免自我放纵。但今天的世界已经变得更为复杂：现在最危险的陷阱是一些新的行为，这些行为会通过模仿更具德行的行为来绕过针对自我放纵的报警器。最糟糕的是，它们甚至都不好玩。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mathspp.com/blog/how-to-create-a-python-package-in-2022&quot;&gt;2022年，最近如何创建一个 Python 包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何从本地的代码传到仓库，让自己的工具或者解决方案成为一个 Python 的第三方库。通过这一篇文章，可以从 0 到提交到仓库的全过程，非常的详细。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://t0.vc/7&quot;&gt;用电子狗来看家&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者通过编程把树莓派和音箱结合起来，当家里没有人的时候，有人靠近门检测到物体移动，然后就发出狗的犬叫声，然后和狗走不得来回的声音，这样避免小偷靠近房间。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/62e3c79e62be3538947138ca&quot;&gt;疫情前夕，家里没矿的我决定创业开咖啡店&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大家都知道，最近的就业形势很不好。有不少人提到被裁员后找不到工作，也有想过有没有可能自己租个店面，做点小生意什么的。&lt;/p&gt;

&lt;p&gt;我非常佩服阿芙拉，这个创业故事里没有惊人的数字和事实，充满了妥协、权衡、放手一搏和无可奈何，但是在面对复杂之后，还是选择去解决问题，就非常厉害。
这就是故事FM最棒的地方就是，去讲述平凡生活中了不起的普通人。&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/07/30/worth-to-do/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/07/30/worth-to-do/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
  </channel>
</rss>
