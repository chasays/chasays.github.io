<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>察说花园是一个关于我个人的学习记录过程，五花八门，关于互联网、TensorFlow、车载、安卓、音视频、存储、小程序和编译器的资讯和技术分享</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 23 May 2024 08:36:00 +0000</pubDate>
    <lastBuildDate>Thu, 23 May 2024 08:36:00 +0000</lastBuildDate>
    <generator>Jekyll v3.9.5</generator>
    
      <item>
        <title>LLVM 学习记录：TD 里面的 def、defm、defvar 有什么区别</title>
        <description>&lt;p&gt;前面学习了如何添加一个 intrinsic 函数的过程，发现有涉及到 td table gen 语言的格式，这个需要注意。&lt;/p&gt;

&lt;p&gt;有几个关键字，def，defm，defvar 的区别？&lt;/p&gt;

&lt;p&gt;这个内容非常的简单，使用的时候注意下即可。官方文档把这个称为 record，翻译过来是记录？anyway，随便是什么，记住就是一个标识符吧。&lt;/p&gt;

&lt;h1 id=&quot;首先了解下什么-single-class和-multiclass&quot;&gt;首先了解下什么 single class，和 multiclass&lt;/h1&gt;

&lt;p&gt;重要的一点就是：class 类型只能从一个 class 类型继承，而 multiclass 类型可以从多个 class 类型继承。&lt;/p&gt;

&lt;p&gt;class 类型通常比 multiclass 类型更有效率，因为 LLVM 可以更轻松地优化 class 类型。&lt;/p&gt;

&lt;p&gt;还是用 amd 的 td 文件来举例：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/IntrinsicsAMDGPU.td&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;single-class&quot;&gt;single class&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultAttrsIntrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm_i32_ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntrNoMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntrSpeculatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;标识符 class 开头的就是单类。单类的名称是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;multi-class&quot;&gt;multi class&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;multiclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic_xyz&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关键字是 multiclass，就是多类。&lt;/p&gt;

&lt;p&gt;这里多类的名称是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic_xyz&lt;/code&gt;，然后里面包含了多个单类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMDGPUReadPreloadRegisterIntrinsic&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;btw，每个类都有一个名为 NAME（大写）的隐式模板参数，它绑定到从该类继承的 Def 或 Defm 的名称。如果该类由匿名记录继承，则名称未指定，但全局唯一。&lt;/p&gt;

&lt;p&gt;学了容易忘记，建议是用到的时候，可以看一下，基本上就知道了。&lt;/p&gt;

&lt;h1 id=&quot;区别&quot;&gt;区别&lt;/h1&gt;

&lt;p&gt;def 就是单纯的定义个单类的变量；
defm，这个多了一个 m，m 代表的就是 multiclass，就是定义的多类。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Feature&lt;/th&gt;
      &lt;th&gt;defm&lt;/th&gt;
      &lt;th&gt;def&lt;/th&gt;
      &lt;th&gt;defvar&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Type of entity&lt;/td&gt;
      &lt;td&gt;Multiclass&lt;/td&gt;
      &lt;td&gt;Class&lt;/td&gt;
      &lt;td&gt;Global variable&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Inheritance&lt;/td&gt;
      &lt;td&gt;Multiple inheritance&lt;/td&gt;
      &lt;td&gt;Single inheritance&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Can define&lt;/td&gt;
      &lt;td&gt;types&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其实看了上面的 class 和 multiclass 的定义，就大概知道怎么用了。&lt;/p&gt;

&lt;p&gt;还有更多的 def* ，&amp;gt; https://llvm.org/docs/TableGen/ProgRef.html#id24&lt;/p&gt;

</description>
        <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/23/llvm-td-syntax-def-defm-defvar/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/23/llvm-td-syntax-def-defm-defvar/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        
      </item>
    
      <item>
        <title>LLVM 学习记录：如何添加一个 builtin 函数</title>
        <description>&lt;h1 id=&quot;今天学习如何在后端添加一个-builtin-和对应的指令-mapping-起来&quot;&gt;今天学习如何在后端添加一个 builtin 和对应的指令 mapping 起来？&lt;/h1&gt;

&lt;p&gt;整个过程预览：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;源代码调用：在高级语言的源代码中使用特定于 AMDGPU 的内置函数，例如就这么写 __builtin_amdgcn_sin(x)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LLVM IR 生成：Clang 编译器在编译过程中将这些内置函数调用转换为 LLVM IR 中的内置函数，例如 %0 = call float @llvm.amdgcn.sin.f32(float %x)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;机器代码生成：LLVM 的后端（例如 AMDGPU 后端）读取 LLVM IR，并根据 IntrinsicsAMDGPU.td 文件中的定义，将这些内置函数映射到具体的机器指令，就是 amd 的 isa 指令。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1--什么情况下会添加这个函数&quot;&gt;1.  什么情况下会添加这个函数？&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://llvm.org/docs/ExtendingLLVM.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在使用 LLVM 的过程中，您可能希望为您的研究项目或实验定制它。此时，您可能会意识到需要向 LLVM 添加一些内容，无论是新的基本类型、新的内部函数还是全新的指令。&lt;/p&gt;

&lt;p&gt;一般情况时有新的 target 添加，或者是支持新的 target，那么才需要，不然似乎需要。&lt;/p&gt;

&lt;p&gt;因为这个需要花费大量的时间，请在社区咨询和是不是已经支持，或者已经有人在做了。&lt;/p&gt;

&lt;h2 id=&quot;2-开始添加&quot;&gt;2. 开始添加&lt;/h2&gt;

&lt;p&gt;向 LLVM 添加新的内部函数比添加新指令要容易得多。几乎所有 LLVM 扩展都应该作为内在函数开始，然后在必要时转换为指令。&lt;/p&gt;

&lt;p&gt;首先，要知道 tablegen 的语法。&lt;/p&gt;

&lt;p&gt;关于 tablegen, 可以看下这篇文章，太多了，死机是记不住的，怎么办？多在实际项目中应用，记不住的再来查字典。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://blog.llvm.org/posts/2023-12-07-tools-for-learning-llvm-tablegen/&lt;/p&gt;

  &lt;p&gt;https://llvm.org/docs/TableGen/&lt;/p&gt;

  &lt;p&gt;https://llvm.org/docs/TableGen/ProgRef.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1--添加定义-builtin-和-intrinsic为了高级语言可以调用&quot;&gt;1.  添加定义 builtin 和 intrinsic，为了高级语言可以调用&lt;/h3&gt;

&lt;p&gt;首先需要了解点，基础的知识。&lt;/p&gt;

&lt;h4 id=&quot;builtin-和-intrinsic-有什么区别&quot;&gt;builtin 和 intrinsic 有什么区别？&lt;/h4&gt;

&lt;p&gt;一开始也不懂，只是啥呀？看名字感觉都是内置函数，确实都是内置函数。&lt;/p&gt;

&lt;p&gt;我理解的有点区别，就是 builtin 是高级语言级别的，而 intrinsic 是 IR 级别的。&lt;/p&gt;

&lt;p&gt;在 llvm 里面他们的命名大概是这样子的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;builtin：__builtin_memcpy()、__builtin_popcount()&lt;/li&gt;
  &lt;li&gt;intrinsic: llvm.memcpy(), llvm.ctpop()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cgbuiltincpp-这个文件干嘛的&quot;&gt;CGBuiltin.cpp 这个文件干嘛的？&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGBuiltin.cpp&lt;/code&gt; 文件是 LLVM 项目的一部分，主要负责生成 LLVM IR 代码以实现内置函数的编译，包括初始化内存、生成内置库函数调用以及处理特定于目标架构的内置函数。&lt;/p&gt;

&lt;p&gt;这个文件里面主要关注 2 个函数：文件包含了初始化内存的函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initializeAlloca&lt;/code&gt;，该函数根据不同的初始化策略（如未初始化、全零初始化或模式初始化）来初始化 alloca 分配的内存。还有就是对齐方式，这个主要取决于硬件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBuiltinLibFunction&lt;/code&gt; 函数负责将高级语言中的内置函数映射到 LLVM IR 的内置函数，这对于生成有效的目标代码至关重要。&lt;/p&gt;

&lt;p&gt;举个例子：比如高级语言是__builtin_fabs，对应的 IR 可能就是 llvm.fabs。&lt;/p&gt;

&lt;p&gt;可以看到很多&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;枚举值&lt;/code&gt;。比如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case RISCV::BI__builtin_riscv_ntl_store:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个枚举值是通过 TargetBuiltins.h 里面通过 namespace 里面的 include 来的。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// AMDGPU builtins&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPU&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LastTIBuiltin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builtin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstTSBuiltin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;#define BUILTIN(ID, TYPE, ATTRS) BI##ID,
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;clang/Basic/BuiltinsAMDGPU.def&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;LastTSBuiltin&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;builtinsdef-是干嘛的&quot;&gt;Builtins*.def 是干嘛的&lt;/h4&gt;

&lt;p&gt;来到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang/Basic/BuiltinsAMDGPU.def&lt;/code&gt;这个文件里面，就可以看到具体的定义 BUILTIN 定义了。&lt;/p&gt;

&lt;p&gt;有必要对这个代码解释下，我看了之后，一头雾水。LastTIBuiltin 和 FirstTSBuiltin 是什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一个是 namespace 这个好理解；&lt;/li&gt;
  &lt;li&gt;enum 枚举值；匿名枚举值；&lt;/li&gt;
  &lt;li&gt;LastTIBuiltin = clang::Builtin::FirstTSBuiltin - 1,：我看了大概是 AMDGPU 内置函数的 ID 值比 clang 内置函数的 ID 值小 1。
LastTIBuiltin：这个枚举成员表示 LLVM/Clang 中最后一个 Target-Independent (TI) 内置函数的编号。Target-Independent 内置函数是不依赖于特定硬件架构的内置函数。LastTIBuiltin 的值是 clang::Builtin::FirstTSBuiltin - 1，其中 FirstTSBuiltin 表示第一个 Target-Specific (TS) 内置函数的编号。这样设置是为了确保 AMDGPU 的内置函数枚举值在数值上紧跟在 TI 内置函数之后。&lt;/li&gt;
  &lt;li&gt;#define BUILTIN(ID, TYPE, ATTRS) BI##ID, 定义了宏，包含 3 个参数；展开后，应该类似 BI1，BI2……&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BUILTIN(__builtin_amdgcn_dispatch_ptr, &quot;v*4&quot;, &quot;nc&quot;)
BUILTIN(__builtin_amdgcn_kernarg_segment_ptr, &quot;v*4&quot;, &quot;nc&quot;)
BUILTIN(__builtin_amdgcn_implicitarg_ptr, &quot;v*4&quot;, &quot;nc&quot;)
BUILTIN(__builtin_amdgcn_queue_ptr, &quot;v*4&quot;, &quot;nc&quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;估计你和我一样，第一眼看到的饿时候，what？这些神秘的 v，n，c 是什么意思？没关系，看文件的顶部，有一个文件，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builtins.def&lt;/code&gt;，跟过去，看一下里面的内容，下面是部分内容。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//https://github.com/llvm/llvm-project/blob/main/clang/include/clang/Basic/Builtins.def

// (result value, then each argument) as follows:
//  v -&amp;gt; void
//  b -&amp;gt; boolean
//  c -&amp;gt; char
//  s -&amp;gt; short
//  i -&amp;gt; int
//  h -&amp;gt; half (__fp16, OpenCL)
//  x -&amp;gt; half (_Float16)
//  y -&amp;gt; half (__bf16)
//  f -&amp;gt; float
//  d -&amp;gt; double
//  z -&amp;gt; size_t
//  w -&amp;gt; wchar_t
//  F -&amp;gt; constant CFString
//  G -&amp;gt; id
//  H -&amp;gt; SEL
//  M -&amp;gt; struct objc_super
//  a -&amp;gt; __builtin_va_list
//  A -&amp;gt; &quot;reference&quot; to __builtin_va_list

……

// Types may be prefixed with the following modifiers:
//  L   -&amp;gt; long (e.g. Li for 'long int', Ld for 'long double')
//  LL  -&amp;gt; long long (e.g. LLi for 'long long int', LLd for __float128)
//  LLL -&amp;gt; __int128_t (e.g. LLLi)
//  Z   -&amp;gt; int32_t (require a native 32-bit integer type on the target)
//  W   -&amp;gt; int64_t (require a native 64-bit integer type on the target)
//  N   -&amp;gt; 'int' size if target is LP64, 'L' otherwise.
//  O   -&amp;gt; long for OpenCL targets, long long otherwise.
//  S   -&amp;gt; signed
//  U   -&amp;gt; unsigned
//  I   -&amp;gt; Required to constant fold to an integer constant expression.
//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看了就知道是什么意思了吧，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v 就是 void，没有返回值&lt;/code&gt;。如果是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Si&lt;/code&gt; signed integer 就是有符号整型。&lt;/p&gt;

&lt;h4 id=&quot;intrinsicstd-是干嘛的&quot;&gt;Intrinsics*.td 是干嘛的&lt;/h4&gt;

&lt;p&gt;最后这个枚举值需要定义在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/IR/Intrinsics*.td&lt;/code&gt; 这个里面，就是第一步我们定义的。&lt;/p&gt;

&lt;p&gt;llvm/include/llvm/IR/Intrinsics*.td:&lt;/p&gt;

&lt;p&gt;用 amdgpu 来举例：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/IntrinsicsAMDGPU.td&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是我为了举例自己构造的，用法不一定正确。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def int_amdgcn_rcp_legacy : ClangBuiltin&amp;lt;&quot;__builtin_amdgcn_rcp_legacy&quot;&amp;gt;,
  DefaultAttrsIntrinsic&amp;lt;[llvm_float_ty], [llvm_i32_ty],
  [IntrNoMem, IntrSpeculatable]
&amp;gt;;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;IntrNoMem 这些就是属性，也是定义在 Intrinsics.td 里面的，有解释，比如这个的定义意思就是：IntrNoMem - The intrinsic does not access memory or have any other side effects.  It may be CSE’d deleted if dead, etc.&lt;/li&gt;
  &lt;li&gt;llvm_i32&lt;em&gt;ty 是定义的一个数据类型属性，llvm&lt;/em&gt; 是命名空间的一部分，用于避免与其他库或框架中的类型名冲突。i32 表示 32 位整数，_ty 表示这是一个类型（type）的定义。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他就去这个上面的链接上看。&lt;/p&gt;

&lt;p&gt;顺便提一下这个 def 是啥和用法。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;def 是定义一个 record：def 的语法
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Def       ::=  &quot;def&quot; [NameValue] RecordBody
NameValue ::=  Value (parsed in a special mode)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里的 intrinsic def 用法这么定义的（这个定义我没有找到，为什么这么约束的？我猜应该是在 Intrinsic.td 里面）&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def &amp;lt;name&amp;gt; &amp;lt;args&amp;gt; &amp;lt;ret&amp;gt; [&amp;lt;attrs&amp;gt;] {
  // Definition body
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;name&amp;gt;：正在定义的实体的名称，例如内部函数、指令或数据类型。&lt;/li&gt;
  &lt;li&gt;args&amp;gt;：实体的参数列表，通常由其数据类型表示。&lt;/li&gt;
  &lt;li&gt;ret&amp;gt;：实体的返回类型（如果适用）。&lt;/li&gt;
  &lt;li&gt;attrs&amp;gt;：实体的可选属性列表，提供附加信息。
{}：包含定义主体，其中包含有关实体的特定详细信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClangBuiltin&amp;lt;&quot;__builtin_amdgcn_rcp_legacy&quot;&amp;gt;&lt;/code&gt;就是 NameValue，就是可以在高级语言直接调用的。
RecordBody 就是后面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultAttrsIntrinsic&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;这个 Clangbuiltin 和 DefaultAttrsIntrinsic 都定义在：https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/Intrinsics.td&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Intrinsic with default attributes (disable_default_attributes = false).
class DefaultAttrsIntrinsic&amp;lt;list&amp;lt;LLVMType&amp;gt; ret_types,
                list&amp;lt;LLVMType&amp;gt; param_types = [],
                list&amp;lt;IntrinsicProperty&amp;gt; intr_properties = [],
                string name = &quot;&quot;,
                list&amp;lt;SDNodeProperty&amp;gt; sd_properties = []&amp;gt;
                : Intrinsic&amp;lt;ret_types, param_types,
                            intr_properties, name,
                            sd_properties, /*disable_default_attributes*/ 0&amp;gt; {}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定义好了，高级语言可以条用的接口，那么接下来就是，后端的实现了。&lt;/p&gt;

&lt;h3 id=&quot;2-把-intrinsic-和指令关联起来&quot;&gt;2. 把 intrinsic 和指令关联起来&lt;/h3&gt;

&lt;p&gt;需要到 llvm 的前端把 builtin 函数转化为 intrinsic，这个是前端实现的，我不太熟悉，我用 AI 搜索下了，回答如下：&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;
1.&lt;/span&gt; 语法分析

首先，LLVM 的前端分析器（如 Clang）会对源代码进行语法分析，将源代码转换为抽象语法树（AST）。AST 包含了代码的结构和语义信息，包括函数声明、函数调用、表达式等。

在 AST 中，intrinsic 函数会被表示为特殊的节点，其中包含了函数名、参数类型和返回值类型等信息。
&lt;span class=&quot;p&quot;&gt;
2.&lt;/span&gt; 语义分析

接下来，LLVM 会进行语义分析，检查代码的语义是否正确。在这个阶段，LLVM 会检查 intrinsic 函数的调用是否合法，例如参数类型是否匹配、函数是否被定义等。

如果语义分析成功，LLVM 会将 AST 转换为 IR。
&lt;span class=&quot;p&quot;&gt;
3.&lt;/span&gt; IR 生成

在 IR 生成阶段，LLVM 会为每个 intrinsic 函数生成对应的 IR 函数。IR 函数由一系列 LLVM IR 指令组成，这些指令描述了函数的具体操作

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后是 intrinsic 和指令的映射。&lt;/p&gt;

&lt;p&gt;这类文件 llvm/lib/Target/AMDGPU/*Instructions.td 就是定义具体的指令的，&lt;/p&gt;

&lt;p&gt;在这个文件里面 https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/AMDGPU/DSInstructions.td 可以看到关于 ds_consume 的多个定义。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_CONSUME&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_0A_RET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ds_consume&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;defm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_CONSUME&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_Real_gfx6_gfx7_gfx10_gfx11_gfx12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x03d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_CONSUME_vi&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_Real_vi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_CONSUME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看一个，就可以看到这个类 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DS_0A_RET&lt;/code&gt;的定义。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DS_0A_RET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_Pseudo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLdStRegisterOperand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VGPR_32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot; $vdst$offset$gds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mayLoad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mayStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_data0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_data1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;里面就是约束了定义时候的用法，其他就没有了，还有一些属性。&lt;/p&gt;

&lt;p&gt;再来看另外一个，类名&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DS_Real_vi&lt;/code&gt;。用的是一个 64 位的寄存器，0~63，每一位代表的是什么，都写了。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DS_Real_vi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DS_Pseudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DS_Real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SIMCInstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PseudoInstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIEncodingFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssemblerPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGFX8GFX9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecoderNamespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GFX8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// encoding&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_offset0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_offset1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_gds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ds prefix&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_gws_data0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_data0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_data1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_vdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vdst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我强行解读下，估计是小尾端编码：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0~15 位，都是表示 offset&lt;/li&gt;
  &lt;li&gt;16 位：是一个 gds 的值，估计是一个 bool 啥的&lt;/li&gt;
  &lt;li&gt;17-24：是一个操作数，opcode，每个指令不一样，是唯一的&lt;/li&gt;
  &lt;li&gt;25：acc 是加速？准确？不装了，确实不懂……&lt;/li&gt;
  &lt;li&gt;32-55 都是 data，应该是 source 之类的 addr&lt;/li&gt;
  &lt;li&gt;56~63 是 destination，&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-用-amdgpu-的来举例&quot;&gt;3. 用 amdgpu 的来举例&lt;/h3&gt;

&lt;p&gt;首先，需要 https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/IntrinsicsAMDGPU.td 里面定义个 intrinsic :: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgcn_div_fixuph&lt;/code&gt; 函数。必须是 int_ 开头。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_amdgcn_div_fixuph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultAttrsIntrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm_anyfloat_ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LLVMMatchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LLVMMatchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LLVMMatchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntrNoMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntrSpeculatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，在 https://github.com/llvm/llvm-project/blob/main/clang/include/clang/Basic/BuiltinsAMDGPU.def 文件里面定义个 builtin 的函数。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TARGET_BUILTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__builtin_amdgcn_div_fixuph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hhhh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;16-bit-insts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，在 https://github.com/llvm/llvm-project/blob/main/clang/lib/CodeGen/CGBuiltin.cpp 里面，然后对应的 intrinsic 函数，这里返回的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intrinsic::amdgcn_div_fixuph&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BI__builtin_amdgcn_div_fixuph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emitTernaryBuiltin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intrinsic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amdgcn_div_fixuph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样前端就可以调用了，但是在 amdgpu 上还没有映射具体的指令。&lt;/p&gt;

&lt;p&gt;这个需要在 intrinsic 里面添加这个定义。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;defm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V_DIV_FIXUP_F16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VOP3Inst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;v_div_fixup_f16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VOP3_Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VOP_F16_F16_F16_F16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AMDGPUdiv_fixup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个对于的指令就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v_div_fixup_f16&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;所以高级语言调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__builtin_amdgcn_div_fixuph&lt;/code&gt; 然后根据参数，会具体映射到定义的指令上面：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v_div_fixup_f16&lt;/code&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;end&lt;/p&gt;

</description>
        <pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2024/05/21/llvm-learning-define-intrinsics/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2024/05/21/llvm-learning-define-intrinsics/</guid>
        
        <category>llvm</category>
        
        <category>编译器</category>
        
        
      </item>
    
      <item>
        <title>如何编译 SHOC（可扩展的异构计算基准套件）</title>
        <description>&lt;h1 id=&quot;什么是-shoc&quot;&gt;什么是 SHOC&lt;/h1&gt;

&lt;p&gt;可扩展异源计算基准套件（SHOC）是一组基准程序，用于测试系统的性能和稳定性。其最初的重点是其最初的重点是包含图形处理器（GPU）和多核和多核处理器的系统，以及 OpenCL（openclspec）编程标准。&lt;/p&gt;

&lt;p&gt;它既可用于集群，也可用于单个主机。&lt;/p&gt;

&lt;p&gt;OpenCL 是一个开放标准，用于对各种类型的计算设备进行编程。&lt;/p&gt;

&lt;p&gt;设备编程的开放标准。OpenCL 规范描述了一种编程语言。&lt;/p&gt;

&lt;p&gt;内核的编程语言，以及用于在支持 OpenCL 的设备上运行的应用编程接口 (API)，用于将数据传输到此类设备并在其上执行内核。
内核的应用编程接口（API）。&lt;/p&gt;

&lt;h1 id=&quot;shoc-可以验证什么&quot;&gt;SHOC 可以验证什么？&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142732.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;稳定测试&quot;&gt;稳定测试&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142513.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spmv&quot;&gt;SpMV&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142534.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;能效&quot;&gt;能效&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142555.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;资源竞争&quot;&gt;资源竞争&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142612.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gpu-api-比较&quot;&gt;GPU api 比较&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811142639.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;如何编译-shoc&quot;&gt;如何编译 SHOC&lt;/h1&gt;

&lt;p&gt;参考文件：https://github.com/vetter/shoc/blob/master/INSTALL.txt&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拉代码 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/vetter/shoc.git&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;进入目录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd shoc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure&lt;/code&gt; 来配置编译选项。这里可以指定一些参数来运行： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--with-cuda, --with-opencl, --with-mpi&lt;/code&gt; ,也可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./configure --help&lt;/code&gt; 查看其他的选项。&lt;/li&gt;
  &lt;li&gt;编译&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make -j 88&lt;/code&gt; 来执行编译。这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-j&lt;/code&gt;参数是指定并行编译的线程数，可以根据自己的机器来设置。&lt;/li&gt;
  &lt;li&gt;可选， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make install&lt;/code&gt; 来安装 bin 到指定目录。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是我的执行命令：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/vetter/shoc.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;shoc
&lt;span class=&quot;c&quot;&gt;# ./configure CPPFLAGS=&quot;-I/usr/local/cuda/include&quot; CUDA_CPPFLAGS=&quot;-gencode=arch=compute_60,code=sm_60&quot; LIBS=&quot;-lcuda -lcudart&quot; LFLAGS=&quot;-l/usr/local/cuda/lib64&quot; --with-cuda&lt;/span&gt;
./configure &lt;span class=&quot;nv&quot;&gt;CPPFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-I/usr/local/cuda/include&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CUDA_CPPFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LIBS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-lcuda -lcudart&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-l/usr/local/cuda/lib64&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-cuda&lt;/span&gt;
make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 88
make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可能遇到的问题：
https://github.com/vetter/shoc/issues/67
CUDA10.0（不含）之后的版本会出现的问题：编译失败
执行 configure 配置时加入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lcuda -lcudart&lt;/code&gt; 参数，指定 cuda 库和 cudart 库。&lt;/p&gt;

&lt;p&gt;也可以参考这个教程，shell 已经写好了：
https://openbenchmarking.org/innhold/db04416737e558c3510d20be04d2574e63e0a548&lt;/p&gt;

&lt;h1 id=&quot;如何执行-shoc&quot;&gt;如何执行 SHOC&lt;/h1&gt;

&lt;p&gt;执行：&lt;/p&gt;

&lt;p&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perl tools/driver.pl -s 1 -d 0 -cuda&lt;/code&gt; 来执行测试。这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt;参数是指定测试的规模，就是节点数量，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt;参数是指定测试的设备，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cuda&lt;/code&gt;参数是指定测试的类型。&lt;/p&gt;

&lt;p&gt;也可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./bin/shocdirver -h&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;结果截图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230811143648.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://blog.csdn.net/babyfacer/article/details/6989093&lt;/li&gt;
  &lt;li&gt;https://openbenchmarking.org/test/pts/shoc&lt;/li&gt;
  &lt;li&gt;https://on-demand.gputechconf.com/gtc/2010/posters/I05-The-Scalable-HeterOgeneous-Computing-(SHOC)-Benchmark-Suite.pdf&lt;/li&gt;
  &lt;li&gt;https://www.jianshu.com/p/9cd6708246c9
(1) shoc/shoc-manual.tex at master · vetter/shoc · GitHub. https://github.com/vetter/shoc/blob/master/doc/shoc-manual.tex
(2) Issues · vetter/shoc · GitHub. https://github.com/vetter/shoc/issues
(3) SHOC: The Scalable HeterOgeneous Computing Benchmark Suite. https://usermanual.wiki/Document/shocmanual.432449542.pdf&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/08/11/how-compiler-shoc/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/08/11/how-compiler-shoc/</guid>
        
        <category>SHOC</category>
        
        <category>benchmark</category>
        
        
      </item>
    
      <item>
        <title>98 -  云南游记</title>
        <description>&lt;p&gt;记录下这次的旅游线路和见闻，路线为：成都 - 大理 - 丽江 - 云南 - 成都，时间总共 9 天。&lt;/p&gt;

&lt;p&gt;第一天：大部分时间实在高铁上，终点是大理才村。8 点成都南站出发，达到广通北，转车到大理，花费时间为 8 个小时左右。&lt;/p&gt;

&lt;p&gt;在广通北，中转的时候，这个站点很小，如果有中转的话，建议在多带一点水和实物，站里面没有卖的。&lt;/p&gt;

&lt;p&gt;经过 1 个小时达到大理，然后打车达到洱海才村名宿，60 左右的打车费，找了一家本地的餐馆，吃的是菌菇类的菜，消费不高，8 个人，7 菜一汤，不到 300 元，年轻人不要点太多，晚点去夜市，还有的吃，不然就吃不爽了。&lt;/p&gt;

&lt;p&gt;吃完之后到 50 来开外的洱海，散步，特别凉快。等天黑了之后，就去夜市，夜市小吃也特别的丰富，价格特别的便宜。&lt;/p&gt;

&lt;p&gt;第二天：包车游览这个洱海一圈，重要景点自己挑，我没有老人和小孩，去了 S 湾、廊桥、喜洲、xx 古城；单个车 500 元左右。早上 9 点出发，晚上 8.30 回到起到。&lt;/p&gt;

&lt;p&gt;时间有限，有好多景点都没有来得及看。&lt;/p&gt;

&lt;p&gt;还间歇性下雨，出门备好雨伞和雨衣，我比较喜欢雨衣，吃东西也不耽搁手。&lt;/p&gt;

&lt;p&gt;由于已经逛了一天了，晚上就找了一家民宿门口的餐馆，吃的石锅烤肉，和烤肉差不多，老板是本地人，有时候听不懂我们说话，经常会叫年轻人过来服务我们。&lt;/p&gt;

&lt;p&gt;第三天：出海一圈，然后去古城（大理大学旁边）&lt;/p&gt;

&lt;p&gt;出海就是在湖中看周围的山和村子的全貌，天气好的话，记得多拍照，美得很。&lt;/p&gt;

&lt;p&gt;打车去古城，有电动三轮车，每人 5 元。这个速度快，其他车估计要堵车。&lt;/p&gt;

&lt;p&gt;之前去过的这些地方（除了喜洲人多外），人都很少，但是到了古城就能看到很多的人，又是旅游旺季，特别多的跟团。我们的节奏就是吃，逛，拍照。&lt;/p&gt;

&lt;p&gt;第四天：早上 10 点出发，12 点高铁出发去往，丽江束河古镇，同样是名宿（便宜）&lt;/p&gt;

&lt;p&gt;到了基本上就是下午了，休息下，就开始逛古镇，找了一家川菜馆（有老人，估计中午饭没好好吃），消费 500 元左右，菜味道一般。&lt;/p&gt;

&lt;p&gt;吃了就往下到一个「四方听音」广场，这个地方晚上可以看篝火，也可以跟着跳。但是是不下雨，下雨就没有了。&lt;/p&gt;

&lt;p&gt;我们走到这个地方就开始下雨，就去了一家旁边楼上的歌吧，点了一壶茶，2 小杯果汁，价格有点贵 200 多。&lt;/p&gt;

&lt;p&gt;第五天：打车去丽江古城&lt;/p&gt;

&lt;p&gt;太大了，从南门进入，逛到下面，边走边吃，吃了午饭。古城太大了，要全部逛完，几乎要一个礼拜吧。这个就像看书，只看自己感兴趣的东西，或者有益的东西，不要想小学生那样，一字一字的全部看完。&lt;/p&gt;

&lt;p&gt;午饭吃的乌鸡米线，其他吃的人特别少，只有这个米线，还要排队，应该是经过筛选的，没有啥问题。&lt;/p&gt;

&lt;p&gt;吃了午饭去木府，这个地方有很多领导人都来过。最好请一个导游，看这种没有导游，基本上就是看个热闹，啥也看不懂。&lt;/p&gt;

&lt;p&gt;网上走，就是万古楼，要单独收门票（35 元），上面就去了一个楼，还有 2 个观景台，观景台就在售票窗口旁边，视野开阔，可以看到整个古城。还是整个古城，一面是砖瓦白灰的古城，一面是现代风格的高楼大厦。&lt;/p&gt;

&lt;p&gt;万古楼有望远镜，可以看到很远的东西，比如看到看到一排墙，墙上有一些象形字体。&lt;/p&gt;

&lt;p&gt;下午返回，休息下，大众点评找了一家不错的排骨汤锅。&lt;/p&gt;

&lt;p&gt;第六天：打车去白沙，惬意&lt;/p&gt;

&lt;p&gt;逛古镇，还有一个壁画的博物馆，吃了一家腊排骨汤锅，下午找了一个地方看玉龙雪山。&lt;/p&gt;

&lt;p&gt;晚上在束河古镇吃的云上鱼，这个吃法很新鲜，但是就是煮的太慢了。&lt;/p&gt;

&lt;p&gt;吃了之后，往下走一点，有一个四方听音，今天天气不错，终于在 8.30 开始了篝火晚会，有专门的人组织这个活动。如果之前在古城没有见到人山人海，那在这里是不会辜负你的期望，特别热闹。&lt;/p&gt;

&lt;p&gt;第七天：早上 10 点，出发去云南城区，也是名宿（一个套 4 房，一天 700 左右）&lt;/p&gt;

&lt;p&gt;到了名宿之后，大概是下午 2 点左右，休息会儿，然后出发吃饭。&lt;/p&gt;

&lt;p&gt;我个亲戚在这边工作，晚上宴请了我们，吃当地的一家野菌皇（宝海店），看了下大众点评的，人均 100 左右。&lt;/p&gt;

&lt;p&gt;一大锅菌菇，一只鸡 + 一个团鱼，还有一些当地的特色小吃，就是菌菇的各种烹饪。&lt;/p&gt;

&lt;p&gt;第八天：滇池，聂耳博物馆，花池古街&lt;/p&gt;

&lt;p&gt;滇池从边上看不咋样，水富营养化了，呈绿色。看多了还有点不舒服。下面也没有什么游览的地方，建议还是做缆车上山看看。&lt;/p&gt;

&lt;p&gt;做缆车上西山，上了西山之后，还有一个龙门景区，需要再次买票，人超级多，就没有去龙门景区。&lt;/p&gt;

&lt;p&gt;大中午的，这个时候放眼望去，黑压压的一片，全是人。就看了免费的聂耳博物馆，然后做大巴车下山，山路崎岖，车程估计 20 分钟左右，但是自己感觉做了一个世纪，天昏地暗的。&lt;/p&gt;

&lt;p&gt;下山的时候，要逛古街，司机会在古街停，但是说的是地铁口，我们就不知道，结果往下去了，然后走回来，热得不行。&lt;/p&gt;

&lt;p&gt;古街，这个地方就是吃，看上喜欢的吃吧，价格也不贵。&lt;/p&gt;

&lt;p&gt;第九天：早上 8 点出发，返回成都。&lt;/p&gt;

&lt;p&gt;从 25°的天气，来到了 43°烤炉，在四川土生土长，43°这样的高温，似乎也觉得就这样，毕竟也只是室外温度，也不是天天都在室外。&lt;/p&gt;

&lt;p&gt;我从事的是程序员，可以做一些远程类的工作。云南四季如春。以为云南很适合我，可以远程办公。&lt;/p&gt;

&lt;p&gt;生活了一周之后，发现并不是现象的那样，在回来的高铁上，我的皮肤开始发痒，这个是在成都冬天经常会出现的情况。难受 ~&lt;/p&gt;

&lt;p&gt;如果要去这个地方长期生活，建议先去这个地方待上一段时间，看看是不是你想要的生活。再做长久打算。可以用到生活上的其他事情上面。&lt;/p&gt;

&lt;p&gt;这次云南之行，有小孩，老人，旅途就是也轻松居多，也不用赶路，整体下来就是一个放松的状态。&lt;/p&gt;

&lt;p&gt;但是对于&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/07/15/yunnan-travel-note/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/07/15/yunnan-travel-note/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>97 -  做确定的事情，长期有益</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;赚几千万，赚一个亿是不确定的，但是爱护好自己的身体，保持健康，这是一个确定的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们生活在一个看重金钱和地位的社会。许多人为了事业奋斗，经常过度工作而忽视了身体健康。我深深理解大家追求成功的渴望，但是我们千万不能忘记生活的本质。&lt;/p&gt;

&lt;p&gt;赚钱只是手段，绝不能成为我们生活的全部。我们要时刻记住，锻炼身体，丰富心智，与家人朋友团聚，这些才是生活和人生的真正意义所在。如果为了赚钱而舍弃了健康和关系，哪怕积累了千万财富，那又有什么意义呢？&lt;/p&gt;

&lt;p&gt;不要本末倒置。&lt;/p&gt;

&lt;p&gt;比如说，你是否能赚到几百万或者几千万，完全是未知数。谁也无法保证一定能赚到巨款。但是，如果你从现在就开始关注身体，养成健康的生活习惯，那就是你能够确定做到的事。&lt;/p&gt;

&lt;p&gt;每天保证睡眠时间，积极运动锻炼，饮食加强营养均衡，这样都有利于你的身心健康。即使最终没能赚到巨款，起码你活得健康快乐。&lt;/p&gt;

&lt;p&gt;相反，如果现在不爱惜自己的身体，将来即使赚了钱，也可能因为疾病而无法享受。比如长期熬夜加班导致身体亏空，到头来发现自己患上了失眠症、胃病等疾病。或者工作压力大，没有时间运动，长期缺乏锻炼，以至患上心血管疾病。届时，即使你已经是一个百万富翁，又有何益呢？&lt;/p&gt;

&lt;p&gt;用本山老师的话说：人最大的悲哀是人走了，钱用完……&lt;/p&gt;

&lt;p&gt;在追求事业的同时，千万不要忽视对自己身体的照顾。保持健康的生活作息，健康饮食，经常进行适量运动，做好心理调适。这对于身体机能的维护，情绪的稳定都非常重要。只有当我们拥有健康的身体和心态，才能更好地享受生活，感受人生的意义。&lt;/p&gt;

&lt;p&gt;让我们一起来关爱自己的身心吧。健康生活，快乐生活，这是我们现在就能够掌握的宝贵财富。即使最终没能赚到巨款，起码我们活得健康、快乐、有尊严。&lt;/p&gt;

&lt;p&gt;请记住，没有任何金钱能够买来健康。&lt;/p&gt;

&lt;h2 id=&quot;读书日记&quot;&gt;读书日记&lt;/h2&gt;

&lt;p&gt;最近在看一本书「终身成长」，我读了之后收货不错，有点后悔读迟了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/YLtemv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无论是在商界、体坛、婚恋关系还是亲子教养中，这种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;成长型思维模式&lt;/code&gt;都至关重要，它决定了我们面对失败时的复原力，面对挑战时的承受力，面对我们需要为之努力的事业时付出努力的多寡。这种思维模式标志着一种诚实的态度，因为真正的成功从来不是偶然的，偶然得来的成功并不可靠。&lt;/p&gt;

&lt;p&gt;比如：龟兔赛跑的故事本想强调努力可以有多重要的意义，却给了努力一个坏名声。它巩固了人们“只有缺乏天赋的人才需要努力”的观念，并让人们以为只有在非常罕见的情况下，当有天赋的人失误时，后进者才有机可乘。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;从这里开始&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/649e79ecba16d4cb98641f02&quot;&gt;我不祝你成功上岸，我祝你选完不后悔&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;近几年，每每看到许多年轻人把考研当成本科后的最佳选择，把考公考编当成自己唯一可能的上岸之路，如鲠在喉——当可能只适合一部分人的「考公考编考研」，渐渐被吹捧成了最具普适性的答案，一个没有多少社会阅历的人，究竟该如何理解这一切？怎么选才不会后悔？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/hsTwbrsdQQVOBlmGiksqKA&quot;&gt;分享三个坚持写作的小技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先说结论，能长时间持续写作的人，基本上都满足这三点：降低写作成本，提升写作效率，持续产生内容&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://claude.ai/chats&quot;&gt;Claude.ai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;官方支持了 PDF 文件上传，结合 100k 的上下文，提供了丝滑的 PDF 问答体验。对整个文档进行理解和分析，而不是使用文本切块。&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/07/09/do-certainly-thing/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/07/09/do-certainly-thing/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>96 - 解决问题为导向 </title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;任务不是列问题，而是解决问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我刚工作的时候，老板安排的事情，总是很抗拒，喜欢自己找事情做，不喜欢被人安排，被人指挥的感觉。&lt;/p&gt;

&lt;p&gt;老板安排的事情，有时候自己搞不定，就会立马提出来，希望有其他来人帮自己搞定。想想那个时候的自己是真的蠢。&lt;/p&gt;

&lt;p&gt;遇到问题不喜欢去深究，总是提出来即可，没有思考过解决办法。如果你也是这样的话，要及时改正。那怎么改喃？&lt;/p&gt;

&lt;p&gt;在市场竞争日益激烈的今天，我们需要成为问题的解决者而非问题的提出者。&lt;/p&gt;

&lt;p&gt;面对挑战，不要沉浸在悲观和牢骚中，要抱着积极进取的势头寻找解决方案。&lt;/p&gt;

&lt;p&gt;刚进职场时，我们常常会列出许多问题。随着工作经验的累积，我们渐渐发现，问题不光在我们身上，而是存在于这份工作、于这个公司、乃至这个市场之中。但问题的存在不应阻碍我们。&lt;/p&gt;

&lt;p&gt;我们需要做的是，质疑不是问题本身，而是我们之前采取的对策是否正确。&lt;/p&gt;

&lt;p&gt;分析问题起因可帮助我们改进。先确定问题的根源，是系统设计不合理？还是我们操作上有缺陷，以后是人的问题，老板还是自己？&lt;/p&gt;

&lt;p&gt;然后，我们该怎么解决？有哪些选择？我们需要权衡各自的利弊。在选择最佳方案时，要客观评估各项指标。&lt;/p&gt;

&lt;p&gt;最后，我们需要执行力。不管选择哪一种方案，都要全身心投入，并持续挖掘改进空间。
善于总结经验教训，不断完善。&lt;/p&gt;

&lt;p&gt;以问题为导向会让我们停滞不前，而以解决问题为目标，我们就能不断创新。不断改进——这才能带来生机。&lt;/p&gt;

&lt;p&gt;你在工作中，有没有这种经历？&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;从这里开始&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ai.stanford.edu/courses/&quot;&gt;斯坦福的 AI 课程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们从 2019 年秋季开始在斯坦福大学的一些人工智能课程中添加了视频介绍 CS229。
请访问 https://ai.stanford.edu/stanford-ai-courses 查看它们&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zongzibinbin/MallChat&quot;&gt;聊天购物商城&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个既能购物又能即时聊天的电商系统。致力于打造互联网企业级项目的最佳实践。
电商该有的购物车、订单、支付、推荐、搜索、拉新、促活、推送、物流、客服、它都必须有。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geohot/tinygrad&quot;&gt;tinygrad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这可能不是最好的深度学习框架，但它是一个深度学习框架。
由于它的极端简单性，它的目标是成为最容易添加新加速器的框架，并支持推理和训练。如果 XLA 是 CISC，那么 tinygrad 就是 RISC。&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/07/02/resolve-problem/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/07/02/resolve-problem/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>95 -  为生活托底</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;保险的本质是为生活托底。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们看到的作战的士兵都是戴了一顶坚固的头盔，这顶头盔可以保护他的头部，让他在遭受枪击或爆炸时，有一定的生存机会。&lt;/p&gt;

&lt;p&gt;不是绝对的，有时候幸运，头盔挡住了致命的一枪，就保住了性命。有时候虽然身上有多处伤口，主要不是头部，没有危及生命。如果没有戴着头盔，他可能容易就会死在战场上。&lt;/p&gt;

&lt;p&gt;有人可能会想到，那全副武装，带一个盔甲上战场，这样就很安全了，但是这样不利于行动，也容易毙命。&lt;/p&gt;

&lt;p&gt;从这个例子中，我们可以看到，保险就像是士兵戴头盔一样，它可以保护我们最重要和最脆弱的部分，让我们在遇到最大的风险时，有一定的抵御能力。我们不需要为自己买满身的保险来应对所有可能发生的事情，那样既不现实也不经济。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;保险是一种风险管理的工具，它可以帮助我们在遇到意外或灾难时，减轻经济损失和心理压力。保险的本质是为生活托底，让我们在面对不确定的未来时，有一份安心和信心。&lt;/p&gt;

&lt;p&gt;有些人认为保险是一种赌博，是在用自己的钱买运气。有些人认为保险是一种负担，是在浪费自己的钱。有些人认为保险是一种奢侈，是在给自己找麻烦。其实，这些观点都是不正确的。&lt;/p&gt;

&lt;p&gt;保险不是赌博，而是一种预防和补偿。我们买保险，并不是希望发生意外或灾难，而是希望能够避免或减少它们对我们的影响。&lt;/p&gt;

&lt;p&gt;我们买保险，并不是期待能够从中获利，而是期待能够在需要时得到帮助。我们买保险，并不是把自己的命运交给别人，而是把自己的风险分散给更多的人。&lt;/p&gt;

&lt;p&gt;保险不是负担，而是一种投资和保障。我们买保险，并不是在浪费自己的钱，而是在为自己和家人建立一个安全网。我们买保险，并不是在减少自己的收入，而是在增加自己的财富。我们买保险，并不是在剥夺自己的自由，而是在赋予自己的选择。&lt;/p&gt;

&lt;p&gt;保险不是奢侈，而是一种必需和责任。我们买保险，并不是在给自己找麻烦，而是在给自己找解决方案。我们买保险，并不是在放弃自己的梦想，而是在实现自己的目标。我们买保险，并不是在逃避自己的责任，而是在履行自己的义务。&lt;/p&gt;

&lt;p&gt;我自己给家人也配备，相对比较齐全的保障。大部分是消费险，等有钱的时候再配置下储蓄险。下面是个人家庭的配置方案&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;家里的老人：医疗险 + 政府的医疗险（这个也是在云里雾里她们播客听到的，马上就买了后者）&lt;/li&gt;
  &lt;li&gt;自己和老婆：医疗险 + 重疾&lt;/li&gt;
  &lt;li&gt;孩子：医疗险 + （重疾计划中）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你对保险不是很了解，可以一起交流。我自己找到一个渠道，可以免费的预约和指定保障计划，脸皮厚点，不一定要买，先咨询看看：&lt;a href=&quot;https://cps.qixin18.com/v3/m/xxd1038390/reservation?createTime=1688431378384&quot;&gt;免费预约咨询&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;从这里开始&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/WA8qOYQMQ0wLn3lEq9LAEg&quot;&gt;一张图看 2023 高考本科录取分数线，哪个省最卷？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在都是采用全国乙卷、3+综合模式、总分一样的 8 个省份中，河南、江西两省的录取分数线大幅领先，如果说分数越高就是越卷的话，这两个省当然就是这八个省之中的卷王了。&lt;/p&gt;

&lt;p&gt;那河南、江西这两个其中谁又更卷呢？&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/questdb/questdb&quot;&gt;questdb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用于快速摄取和 SQL 查询的开源时间序列数据库。&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/06/24/for-life/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/06/24/for-life/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>94 -  出苦力搞副业赚钱</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;主动输出并不仅仅是一个纯利他的行为。它带来的好处是多方面的。&lt;/p&gt;

&lt;p&gt;输出的过程能够帮助我们更清晰地思考和更出色地行动。当我们将自己的想法、知识或经验分享出来时，我们需要对其进行整理和梳理，以便能够准确地传达给他人。这个过程迫使我们反思和总结，从而深化我们对所涉及主题的理解。通过与他人的交流和互动，我们不断修正和完善自己的观点，从而推动个人成长。&lt;/p&gt;

&lt;p&gt;有知有行的孟岩老师和老钱的一起对话里面，老钱想准备播客的目录，但是孟岩没有让他准备。这个就是当你不知道写什么的时候，拿起笔，大脑里面就会有很多的想法，抓住一个抓手，就开始写，太多需要写了内容了。&lt;/p&gt;

&lt;p&gt;主动输出让更多的人有机会看到我们的才华和能力。当我们将自己的作品、见解或成果分享给他人时，我们展示了自己的实力和潜力。这种展示不仅有助于提升自己的名气，也为未来的人生机会创造更多可能。他人可能会注意到我们的才华和独特之处，为我们提供更多合作、学习和发展的机会。&lt;/p&gt;

&lt;p&gt;通过主动输出，我们扩大了自己的影响力和社交圈子，为个人发展打开了更多的门路。&lt;/p&gt;

&lt;p&gt;从一个更深层次的角度来看，主动输出的真诚分享让我们更加自洽。&lt;/p&gt;

&lt;p&gt;如果我们分享的东西都是一些自己都很难给其他人看的内容，心理就过不去。最近在做公众号爆款文章的写作，发现好多人利用 ChatGPT + SD 模型生成一些色图，这样流量很高，但是让我自己去做的话，很难做到自洽，也没有去跟风。&lt;/p&gt;

&lt;p&gt;当我们以诚实和真实的态度分享自己的想法和经验时，我们与自己的内心保持一致。我们不再隐藏自己的才华或担心被他人超越，而是勇敢地展示自己的独特之处。这种真诚的分享让我们更加自信和满足，为我们的内在和外在一致性增添了力量。&lt;/p&gt;

&lt;p&gt;主动输出不仅是一种利他的行为，更是对个人成长和发展有益的过程。通过输出，我们能够思考得更清楚，行动得更出色，同时也能够获得更多的机会和名气。而当我们以真诚的态度分享自己的才华和经验时，我们能够建立内外一致的自洽，获得更深层次的满足感。因此，让我们主动迈出这一步，将自己的想法和才华分享给他人，开启一个更加充实和有意义的人生旅程。&lt;/p&gt;

&lt;p&gt;主动输出并不仅仅是一个纯利他的行为。输出的过程，能帮你想得更清楚，做得更好。同时也能让更多的人看到你，让你以后的人生机会更多，走得更顺。&lt;/p&gt;

&lt;p&gt;自己最近在搞 side project，纯瞎搞，有几个观点给大家分享下。&lt;/p&gt;

&lt;p&gt;在选择圈子和内容时，垂直聚焦是至关重要的。将注意力集中在我们准备或正在从事的事情上，而不是分散精力。&lt;/p&gt;

&lt;p&gt;这种垂直聚焦可以帮助我们更好地专注和深入研究特定领域，从而提高我们在该领域的能力和专业知识。&lt;/p&gt;

&lt;p&gt;我们应该注意借鉴其他商业变现思路，但不盲目跟从。每个人的情况和能力都不同，我们需要结合自己的实际情况来判断何种思路适合我们，以避免盲目决策。&lt;/p&gt;

&lt;p&gt;我们也不应过于相信那些声称只有加班才能成功并表现出过度矫情的人。成功的商业模式不仅仅依赖于加班，而是需要我们灵活地利用资源、创新思考和努力工作。我们应该相信自己的能力，寻找适合自己的副业机会，以通过创造价值来实现收益。&lt;/p&gt;

&lt;p&gt;同时，需要及时总结和复盘自己的选择。我们应该审视自己投入的项目是否具有可行性和前景，如果发现项目没有戏可言，就要及时止损。这种及时的总结和复盘帮助我们不断学习和成长，避免陷入无望的努力中。只有不断调整和优化我们的选择，我们才能更好地实现商业目标和个人发展。&lt;/p&gt;

&lt;p&gt;对于副业你有什么好的建议么？或者你的副业是什么，欢迎分享。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;从这里开始&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Q-3PFOPG8KmH7I9Vvt92nw&quot;&gt;一个青年劳动者的 19 份痛苦肖像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;张伟是个青年劳动者，毕业六年换了 19 份工作。他好像是特殊的。他没有好的收入、没有好的身体、没有好的精神、没有亲密关系，和家人的关系也很紧张。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/godly-devotion/MochiDiffusion&quot;&gt;MochiDiffusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 macOS 上运行的  Stable Diffusion，需要是 M 系列的芯片。&lt;/p&gt;

</description>
        <pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/06/17/make-money-by-sideline/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/06/17/make-money-by-sideline/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>93 -  不要预设</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;最近经过大佬的指点，学到了一个写作的技巧。&lt;/p&gt;

&lt;p&gt;我的公众号很少有人回复，就是反馈很少，不知道哪里做的对不对。直到我分享了一篇文章，得到了大佬的指点。&lt;/p&gt;

&lt;p&gt;我把这一点分享给大家。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果你没有时间的话，请看这个大纲……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里的「如果你没有时间的话」，就是预设。以及你文章里面任何一句话都要说出来它的作用。&lt;/p&gt;

&lt;p&gt;很多人在生活和工作中经常会预设一些不好的结果，这会给自己带来很大的心理压力和负面影响。例如，在写作或学习的时候，常会预设自己没有足够的时间去完成，结果导致自己的效率和质量大打折扣。&lt;/p&gt;

&lt;p&gt;事实上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;这种预设是没有必要的&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;首先，你点击这篇文章，说明你有时间阅读它。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;我不会预设读者没有时间，这会给读者一种负面暗示，影响体验&lt;/code&gt;。其次，预设常来自自卑、不自信和焦虑，但事实上我们的能力和时间往往比预设的更加充足。最后，预设会成为自我实现的预言，使我们误以为它是事实，从而影响我们的思维和行动。&lt;/p&gt;

&lt;p&gt;在生活和工作中，尽量避免预设，特别是那些负面和不好的预设。相反，我们应该以积极和开放的心态面对每一天，相信自己有能力完成需要完成的事情。如果实在担心时间不够，可以事先做好规划，但不要提前就决定“不可能完成”。&lt;/p&gt;

&lt;p&gt;to be honest，不要给自己设限。相信自己的能力，相信时间总是充足的。用积极的心态去面对每一天，你会发现生活和工作都会简单很多。这就是避免预设的力量。&lt;/p&gt;

&lt;p&gt;你觉得写作容易么？&lt;/p&gt;

&lt;p&gt;最近在读一本书「营销笔记」。加入了在生财社群里面，经常小马宋老师的高质量分享，特别好奇什么样的人能如此高产，质量上乘。之前都是看小马宋老师的公众号、小宇宙的播客，没想到这本书也是一个宝藏。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;从这里开始&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ZiKydBHzXH4zeOlWRhLctg&quot;&gt;10+秒，AIGC 炸出抖音小红书爆款！国产 Fashion Diffusion 颠覆时尚行业&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前不久，西湖心辰和知衣科技联合研发了一款面向服装设计行业的 AI 大模型——Fashion Diffusion(简称 FD 模型)。FD 模型可以在 10 秒内生成超过上万套的高质量服装设计图。通过深度学习服装行业的数据，FD 模型有望颠覆传统的服装设计流程，为行业带来革命性变革。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;是专注于人工智能服务研发的科技公司，我们与西湖大学等顶级 AI 研究团队合作，共同探索 AIGC 的未来，积极推动 AI 在内容生产、心理咨询等方面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;商业化、民用化&lt;/code&gt;;推出 AI 绘画、A1 写作、AI 心理咨询等相关产品，希望创造每个人都能享受到 AIGC 带来的智能时代。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在技术上，FD 模型的实现路径是：采衣→识衣→知衣→懂衣→创衣。知衣科技积累了超过 10 亿份服饰数据和 500 个设计标签，对服装行业有深入了解。西湖心辰开发了“识衣”模型，可以过滤低质量图片和优化人像，基于服装美学给图片打分。FD 模型综合知衣科技的行业认知和西湖心辰在自动图文生成的技术，对传统生成模型难以捕捉的服装特征如工艺、材质等进行增强，并对生成人像进行优化，在服装工艺、材质捕捉和人体比例方面具有较强优势。&lt;/p&gt;

&lt;p&gt;FD 模型将推动服装设计行业实现“柔性生产”,提高设计效率，缩短设计周期，让设计师和品牌能快速响应市场需求。借助 FD 模型，设计师和品牌可以在短时间内创作大量设计方案并测试市场反馈，帮助企业优化生产计划和降低库存。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/bpWw1CEFpw3u-OHq108UPQ&quot;&gt;「孩子们对人生一无所知，到底要怎么做呢？」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作为第 75 届戛纳电影节影评人周的闭幕影片，韩国电影《下一个素熙》放映完毕后，收获了现场观众长达 7 分钟的掌声——这是一部特殊的电影，它改编自真实事件，片长达到了 137 分钟，且片中没有出现一段背景音乐。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://meldmerge.org/&quot;&gt;Meld 视觉差异和合并工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你经常需要用到 beyond compare，winmerge 对比文本之类的软件，可以试试这个。&lt;/p&gt;

&lt;p&gt;Meld 帮助你比较文件、目录和版本控制项目。它提供文件和目录的双向和三向比较，并支持许多流行的版本控制系统。Meld 帮助你审查代码变化和理解补丁。它甚至可以帮助你弄清楚你一直回避的合并中发生了什么。&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/06/10/not-preset/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/06/10/not-preset/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>92 -  想要某个东西？</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;芒格说：如果你想获得某样东西，那就让自己配得上它。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话，我想大家都不陌生，纯鸡汤励志。&lt;/p&gt;

&lt;p&gt;让我们在追求目標与理想的过程中时时自我要求，努力让自己成长为配得上理想的人。&lt;/p&gt;

&lt;p&gt;我最近在日更公众号文章，7 天过去了，有一篇阅读量达到了 10W+，人生新成就。&lt;/p&gt;

&lt;p&gt;这句话对我的感悟来说，非常的贴切。&lt;/p&gt;

&lt;p&gt;每天日更，只有 7 天，还能做到 10w+，我想只有自己默默地努力，才配得起这个 10w+。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不要轻易妥协和放弃&lt;/code&gt;。很多时候，我们之所以无法得到心之所向，并不是因为这个目标本身不可及，而是因为我们自己还不够资格与之匹配。&lt;/p&gt;

&lt;p&gt;所谓“天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，…………”，我们必须付出努力，经受磨练，才能成长为配得上目标的人。&lt;/p&gt;

&lt;p&gt;再来看看我平时更新这个 newsletter，虽然没有什么阅读量，但是自己从里面的收获也是不少的，只有自己知道。&lt;/p&gt;

&lt;p&gt;对自己要有自我要求，不断学习和进步。很多人总是抱怨这个社会不公平，机会都被别人捷足先登。然而，问题的关键往往不在于机会的来临，而是自己是否已经具备了抓住机会的资格和能力。作为一个人，我们必须不断充实自己，提高技能和修养，才能在机会来临时立于不败之地。&lt;/p&gt;

&lt;p&gt;如果一位作家如果希望自己的作品能出版并获得读者的认可，那么他就必须不断练习写作，广泛阅读以增强文笔，深入生活寻找素材以丰富自己的创作。&lt;/p&gt;

&lt;p&gt;如果一个人渴望成为一名优秀的教师，那么他就应该不断学习新的教学方法和技巧，并在实践中不断总结和提高。&lt;/p&gt;

&lt;p&gt;要以实际行动来证明自己配得上心目中的目标。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;单纯的空想和妄言是远远不够的&lt;/code&gt;，我们必须通过行动和实践来让自己真正成长为配得上理想的人。&lt;/p&gt;

&lt;p&gt;天下没有免费的午餐，要想获得某样东西，就必须付出等价的努力。许多时候，目标之所以难以实现，是因为我们过于空想，缺乏实际行动来推动自己的成长。&lt;/p&gt;

&lt;p&gt;心生理想，感到它如此高不可登时，我们就应该放慢脚步，静下来思考自己现在是否已具备与之匹配的资格与实力，然后付诸努力，一步一步地提高自己，最终成为理想中配得上的那个人。&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;希望今天的分享对你有帮助。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;从这里开始&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/FqgNlXWFsprhYpcV0_sUNg&quot;&gt;生孩子的人少了，产科的寒冬也快到了&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“原来全国每年的出生人口数量最多是 2000 多万，后来降到 1000 多万，开放生育之后最多的时候也回升到 1400-1500 万，现在连 1000 万都不到了，在一妇婴，我们前些年最多的时候，年分娩量是接近 3.4 万，现在分娩量大概是年 2.5 万，少了近 1 万。”对于产科接诊量变化，上海一妇婴的前院长，春田医管创始人段涛如是描述。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dibrale/samist&quot;&gt;samist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;分割任何模型 (SAM) 图像分割工具-SAMIST。由 Meta AI 使用 SAM 进行图像分割的 Python 图形用户界面。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bravekingzhang/flutter_chat_box&quot;&gt;flutter 开发的 chat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flutter 开发的和 ChatGPT 聊天的 App，全平台支持&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/etrobot/CNStockGPT/blob/main/us.py&quot;&gt;GPT 炒股&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于 GPT 的人工智能炒股程序。可以用 ChatGPT 免费版的 session。&lt;/p&gt;

&lt;p&gt;用同花顺问财 AI 进行技术面筛选；使用 akshare；询网上最新资料；ChatGPT 进行分析并打分&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Jun 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/06/03/want-to-sth/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/06/03/want-to-sth/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
  </channel>
</rss>
