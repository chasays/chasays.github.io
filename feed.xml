<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>人生就是干</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 09 Jul 2022 10:56:31 +0000</pubDate>
    <lastBuildDate>Sat, 09 Jul 2022 10:56:31 +0000</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>45 - 流行歌曲</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/2CIW3_XoV4oIKZaYICd1kg&quot;&gt;采访了49个自由职业者，发现这跟我想的也太不一样了&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实我在换当下工作之前，是考虑从事远程工作的，搬到云南，或者是沿海的地方。我为什么这么痴迷赤道附近的城市，或者是找一个比较温和和舒适的城市？&lt;/p&gt;

&lt;p&gt;主要是个人的皮肤，冬天冷的时候，皮肤就会瘙痒，特别难受。我是一个怕冷不怕热。&lt;/p&gt;

&lt;p&gt;之前调研的远程工作，大部分是加密货币，或者是海外的公司，这部分公司大部分是互联网前端(我在从事芯片之前，前端就只有类似 html 这种，发现还有编译器 llvm 这种前端。)这种岗位以及 app 开发。&lt;/p&gt;

&lt;p&gt;由于疫情，国外的上班效率低，成本还高，有远见或者预算不足的老板们，就找东亚，比如我们和隔壁的印度，作为远程员工。推荐一个网站「电鸭社区」。&lt;/p&gt;

&lt;p&gt;想从事自由职业者，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最好是找一个你想做的那个职业的前辈，很深入地聊一下&lt;/code&gt;，除了聊你这个职业哪些让你很开心之外，你要更注意去问哪些让他不开心的地方，最痛苦的地方是什么，然后去衡量一下这个事情你能不能接受。对，我们一定是看到了一个职业的 AB 面之后，再做选择会更好一些。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/3PbQ8PBefWesa8tvIk8exQ&quot;&gt;小孩子为啥集体痴迷《孤勇者》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/OuUGNT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你是一个爱刷视频的爱好者，应该看过这样的视频，一群小孩唱「孤勇者」。连所长都很吃惊，发现自己居然有一首儿歌。&lt;/p&gt;

&lt;p&gt;一个人的喜欢，渐渐发展为更多人的喜欢。加上词、曲与这个年龄段的小孩子相贴合，「孤勇者」在儿童世界里实现了现象级的传播。在湖北黄冈，一个常住人口近600万的普通的中部城市里，我想你应该也真切感受到了这种传播的力量。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/faster-cpython/ideas/blob/main/main-vs-310.rst&quot;&gt;Python 3.11和 3.10的性能比较&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在空和变量分配的循环中，Py311比Py38、Py39和Py310#，慢10-20%。如果是做重复和对时间有要求的，这时间还是有影响的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://musicforprogramming.net/latest/&quot;&gt;程序员音乐网站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/2beZ5N.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我上班的时候喜欢听音乐，主要是自己不太 Focus，我试了一下，大部分是纯音乐，没有太多的人声，这样就不会太打搅自己。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/NiAxnNMNJ5bWtlS3C_U3vw&quot;&gt;把写作和写程序结合起来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/CcMqP7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;腾讯的 TK 教主把写作和程序结合起来，大家可以试试。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/4JHd_FG-xzyruPawxFdP6w&quot;&gt;亦仁：生财有术背后的运营逻辑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;我理解的生财有术，是一个互联网创业聚集地，身边好多人在里面找到的 side project。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;值得细读，里面提到了好几个点。当我觉得一个事情特别困难的时候，会把复杂的事情简单化，立刻开始去干这个事情。&lt;/p&gt;

</description>
        <pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/07/09/song-is-popular/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/07/09/song-is-popular/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>44 - 经痛喝热水有用么？</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/66ZAIFRK3QWdyEVtczy60g&quot;&gt;高考志愿，谁的志愿&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;年轻人可以向年长者咨询，年长者也可以提供视野，经验和教训上的分享，可以给与一定的建议，警示和引导。但是！尊重年轻人的兴趣和热爱，不要越俎代庖，更不要自以为自己就一定知道什么是对的。还有，以“我这样都是为了你好”剥夺年轻人的选择，无视年轻人的喜好，是非常他妈的腐朽的思想。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/k5VxvM.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;评论区非常热闹，我个人也是觉得，每个人的经历和内心的爱好不一样，自己的路只有自己选，真正选择去做自己喜欢做的事情。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://markgreville.ie/2022/06/22/book-summary-how-to-know-everything-by-elke-wiss/&quot;&gt;书：如何了解一切&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/ob93zO.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这本书是关于什么的？——最简单的是，这本书涉及提问的艺术。实际上，这是关于苏格拉底哲学的。这是我们愿意敞开心扉，闭上嘴听。这个概念超级地简单，但时最深的从那以后我提问的时候基本上都问自己几个问题，这个问题互联网能找到吗？你找这个问题你是想知道什么东西？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.woodpecker.org.cn/moin/AskForHelp&quot;&gt;提问的智慧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同样推荐下，在自己学习 Python 的是时候，无意之间在啄木鸟社区发现了这一篇文章。在你打算向某个论坛或者某个maillist请教时，请好好看看下面这张图谱，呵呵。尽快提高自己的能力是也。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/QtZ2Kv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theverge.com/2022/7/1/23191634/nvidia-amd-gpu-shortage-over-3080-3070-3060-radeon-rx-6900-6800&quot;&gt;GPU短缺暂时不短缺&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/YojXuN.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本文研究了不同市场的GPU价格，影响这些价格的因素，以及当前市场上是否值得购买GPU。近两年来，显卡一直难以获得。他们现在又上架了，经销商价格已经达到了MSRP。价格下跌的原因之一是，这些GPU上的芯片现在已经用了两年了。由于崩溃，许多加密矿工正在出售他们的二手卡。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/78IKOnN2IItBC3TpI4EDKA&quot;&gt;中文排版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/hBKzFh.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;中文和数字之间，比如中文和 123 混排的时候，数字左右也应该留有空白。数字和单位之间，比如「20 元」，也应该留有空白。看完这篇文章之后，我去设置了下 Sogou 的输入法，瞬间就好多了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Zi0xZMgpXGLyPLRDB8MBEQ&quot;&gt;原来来大姨妈多喝热水是有科学依据的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/uPic/JsbzsG.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;痛经一来，热水袋和暖贴简直就是救命神器，先不说能不能止痛，只是抱着热水袋，就能舒服一点。&lt;/p&gt;

</description>
        <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/07/02/keep-good-health/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/07/02/keep-good-health/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>Do You Like K Pop</title>
        <description>
&lt;hr /&gt;
&lt;p&gt;layout: post
title: “43 - 换一种轻快的方式”
subtitle: ‘K-pop歌曲，你喜欢吗’ 
author: “叉叉敌”
header-style: text
tags:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;这一期的 newsletter 换一种方式，用简短的推荐文章和资源的方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphics.reuters.com/USA-SPELLINGBEE/GRAPHIC/klvykoogzvg/index.html?&quot;&gt;英语单词为什么拼写这么难&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;英语单词，不只是我们国人发现难，而且是母语的人也觉得特别难。&lt;/p&gt;

&lt;p&gt;对许多美国人来说，拼写比赛是他们在美国成长的一部分。从孩子们开始学习阅读的那一刻起，单词的发音和拼写就有了明显的区别。那些把英语作为第一语言的人可能没有意识到，这在主要的字母语言中实际上是独一无二的。“英语拼写是一个悲剧性的意外，它让我们远离嘴里正在发生的事情。”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://thequibbler.zhubai.love/posts/2153051145206697984&quot;&gt;newsletter 是什么形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;概念不重要，形式不重要，重要的是人，是便捷程度，是想走就走。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dkb.show/post/life-is-not-short&quot;&gt;慢慢长路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有什么比某些人吹嘘自己的远见更愚蠢的吗？为了改善自己的生活，他们总是专心致志地工作; 他们把一生都花在组织自己的生活上。他们着眼于遥远的未来来确定自己的目标。但是拖延是生命中最大的浪费: 它夺走每一天的到来，并且通过承诺未来来拒绝我们的现在。生活的最大障碍就是期望，期望寄托在明天，而失去了今天。你在安排命运掌控的事情，却放弃了自己掌控的事情。你在看什么？你的目标是什么？整个未来都充满不确定性: 立即生活。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=31764696&quot;&gt;程序员的副业&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个黑客新闻帖子讨论了人们没有公开谈论过的有利可图的副业项目。顶级回复包括鼠标手部震颤消除软件、Adsense博客、游戏在线市场和3D第一人称创意写作RPG。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://margin.re/blog/pulling-mikrotik-into-the-limelight.aspx&quot;&gt;路由器系统ROS的破解思路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ROS又是一款MikroTik路由器，最近自己也帮朋友破解一个路由器，发现了一个思路，最后成功绕过，拿到了root用户密码，可以参考这个文章。&lt;/p&gt;

&lt;p&gt;这个路由器是一款软路由，非常的稳定，功能特别强大，发现一家欧洲的名营企业，成立在1997年，相当的赚钱。各位不妨去网上搜一下资料，做自媒体的、刷单等应该都需要。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shottr.cc&quot;&gt;macOS录屏小程序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shottr是一个小型、快速、人为大小的屏幕截图应用程序，专为那些关心像素的人而设计。它使用Swift制作，针对M1进行了优化，目前完全免费。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;p&gt;最后来一个音乐链接&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mashable.com/article/best-kpop-songs-2022&quot;&gt;今年的K-pop最佳歌曲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随着K-pop在全球的影响力不断扩大，它的表演产生的音乐比以往任何时候都多。从电吉他和80年代的合成器到陷阱摇滚乐和R&amp;amp;B低吟，今年的K-pop发行版对每个人都有意义，2022年甚至还没有结束。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;最近没有读书，没有发现有好的书籍，你有推荐的么？谢谢&lt;/li&gt;
  &lt;li&gt;最近英语口语练习，耽搁了一段时间&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/06/25/do-you-like-k-pop/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/06/25/do-you-like-k-pop/</guid>
        
        
      </item>
    
      <item>
        <title>42 - 侪：知道这个字，念什么吗</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;今天的newsletter，延迟了一天，周五下班就走了，去乡下办点事，走得急，忘了带充电器，其实是以为家里的给手机充电的Type-C充电器，也能给笔记本充电，实际上没用，囧~&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h2 id=&quot;同侪&quot;&gt;同侪&lt;/h2&gt;

&lt;p&gt;我看这个字，第一眼以为是tongqi，其实不是。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;拼音是tóng chái，意思是辈份相同的人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就说我同事吧，大部分都是研究生甚至还有博士生，而我是一个普普通通的二本学校，还是很渣的毕业生，所以我怎么和人家比较。&lt;/p&gt;

&lt;p&gt;自尊心本身就很强的我，生怕别人知道我的是普通的本科生，这下好了，把秘密都说出来，让大家都知道，就不再有秘密了。&lt;/p&gt;

&lt;p&gt;说来也很奇怪，有的公司就是看你学校不好，还非要当面给你说出来。之前我曾经投递了一家银行的简历，对面一家银行对我学校的一个评价就是：学校太差。&lt;/p&gt;

&lt;p&gt;不是我妄自菲薄，可以想象一下身边大部分同事都是研究生，而且是911、285学校毕业的，他们的学习能力一定是很强很强的。&lt;/p&gt;

&lt;p&gt;…………&lt;/p&gt;

&lt;p&gt;有句话说的好，不和世界冠军去比较，不和世界最有钱的去比较谁有钱，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;因为你这是自找麻烦，自寻苦恼。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这句话就是鸡汤，但是它能在你低谷的时候，支撑着你。&lt;/p&gt;

&lt;p&gt;但是又不得不面对这个问题，只要是个人，他&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;肯定会有嫉妒心，也注定会有缺陷&lt;/code&gt;，我觉得我要面对我自己的缺陷。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/629e25089670852dace80c74?s=eyJ1IjogIjYwZGU4ZDZlZTBmNWU3MjNiYmI0MzlhZCJ9i&quot;&gt;这个播客&lt;/a&gt;提到了,甄嬛传里面2个角色，沈眉庄和甄嬛他们两个是同一个目标，肯定会有竞争也会有嫉妒，那同时他们是怎么去处理这个问题的，我觉得是值得我们在这样困境中去思考和借鉴。&lt;/p&gt;

&lt;h2 id=&quot;烦躁&quot;&gt;烦躁&lt;/h2&gt;

&lt;p&gt;分身乏术，每天有太多的事情要做，而且没用做完，心情特别烦躁不安。&lt;/p&gt;

&lt;p&gt;当你自己同时在做多件事情分身乏术的时候，你们是怎么处理的？可以分享一下吗？直接回信就可以，期待你的回信。&lt;/p&gt;

&lt;p&gt;最近有个问题，发现这个东西我一直没有解决，技术难题没有解决的时候，我心里放不下，有时候晚上会做到很晚，去把这个问题给解决。&lt;/p&gt;

&lt;p&gt;这种感觉特别烦，第1，自己不能控制，第二很无力，我很很久很久没有这种感觉了。&lt;/p&gt;

&lt;p&gt;导致我中午睡个午觉，都被惊醒了……&lt;/p&gt;

&lt;p&gt;这和我个人的个性有关，我性格是属于一个急性子，就希望遇到一个问题，立马就有答案去把它给搞定，不要拖着，或者是把这个问题转移到别人能找人及时的去搞定。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;我想会不会说出来，就会有了答案，或者用前端时间读过了一本书「福格行为模型」来解决这个问题喃？&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;定位&quot;&gt;定位&lt;/h2&gt;

&lt;p&gt;最近有个网友(先称呼为网友)，对我之前的一篇文章有一个评论，大概意思就是不知道这个公众号定位是什么。&lt;/p&gt;

&lt;p&gt;回头几年过去，我的公众号有时候在写技术性的文章，有时候在写自己的感悟，自己的思考，目前主要是发自己的newsletter。&lt;/p&gt;

&lt;p&gt;会发现我自己的一个定位确实，没有很明确，说是技术，谈不上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;没有一个垂直的定位&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;发现自己就是在广度上去扩展自己的兴趣爱好，但是对一个深度没有聚焦，我自己的问题，包括很多人都说过，我有这个问题，对一个方向没有去聚焦，不可能达到一个行业的一个有深度见解、专业的人士。&lt;/p&gt;

&lt;p&gt;同时这位大佬对我的文章，做了个评价，透传链接：&lt;a href=&quot;https://mp.weixin.qq.com/s/lwjahLcWwhg9ejH_EYo8MQ&quot;&gt;知衣：知道这家公司么？&lt;/a&gt;，可以到下方的评论区查看详情。&lt;/p&gt;

&lt;p&gt;我自己之前也了解了点关于产品相关的知识，大概思路是这样的，万事开头难，如何找到这样一个突破口，去迎合市场的一个需求之前。我看过这方面很多赚钱的例子，比如说去搜索引擎下面去搜索一个东西，它最底部就会弹出用户大概的一个需求是什么样的，比如说你在最顶部搜索U盘，那相关的一些关于U盘的信息，它会在最底部呈现出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/SFQKE3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这你搜索的信息是你关注的那底部推荐的一些搜索有大部分网友的一个诉求，那通过这个信息呢，你可以找到大部分人的一个诉求是什么？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;通过市场人对这个方面的一个诉求，然后再结合技术来驱动，然后和商业结合。有人来买单，提供有价值的产品。同时就能借助杠杆，积累大量的财富。&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://eugeneyan.com/writing/writing-docs-why-what-how&quot;&gt;如何用“为什么”、“什么”、“如何”框架写得更好&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里有一个关于早期 Amazon Web 服务的故事: 在编写任何代码之前，工程师们花了18个月的时间来思考和编写关于如何最好地为客户服务的文档。亚马逊认为，这是最快的工作方式ーー在执行这一经过严格改进的愿景之前，要深入思考客户的需求。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://arstechnica.com/gadgets/2022/06/developers-get-linux-up-and-running-on-old-ipad-air-2-hardware/&quot;&gt;在iPad上运行Linux系统&lt;/a&gt;
如果您有一台2013年或2014年时代的iPad闲置，因为它不再从苹果获得更新，并且已经停止运行您需要的应用程序，一些开发人员正在为您开发替代软件解决方案。开发人员的Linux爱好者合作，在旧的iPad Air 2上启动Linux内核5.18版本，对于一个设计从未运行苹果以外的任何操作系统的设备来说，这是一个重大壮举。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/digitalocean/nginxconfig.io&quot;&gt;nginxconfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大家配置 nginx  的时候是不是都很抓瞎，一大堆的参数非常费力，digital ocean开源了一款可视化工具，可以使用图形界面生成配置文件，试了一下，还是很方便的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;p&gt;千万不要试图给杠精解释。&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书最重要的就是定好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;固定的时间&lt;/code&gt;，比如每天早起20分钟，那这个时间就可以用阅读，可以做自己喜欢事情，就可以避免日后每天纠结到底啥时候读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;如何提高孩子的一个上进心？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/59538696&lt;/p&gt;

&lt;p&gt;要做到四点内容：一是放大孩子的优点，二是合理定义成功，三是给孩子创设挑战性环境，四是帮孩子建立自我评价体系。上进心是孩子在生活中形成的发自内心的渴望，它不依赖于我们的期望，所以多让孩子实践才是王道。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;技术相关的书，大部分是电子书，因为可以随时的show me code。&lt;/li&gt;
  &lt;li&gt;方法、理论类的书籍，一般会停下来思考，提出问题、或者沉淀为自己的知识。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/06/17/improve-youself/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/06/17/improve-youself/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>41 - 保命重要</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;我发现有个奇怪的现象，订阅人数不是很多，才3位数，但是阅读量有时候4k+，难道是是转发阅读量很大？&lt;/p&gt;

&lt;p&gt;在此感谢大家的转发和帮助。&lt;/p&gt;

&lt;p&gt;本周的 newsletter 轻松一点，内容相对就少一点。主要是自己也想偷个懒，今天去陪孩子去参加了学校的足球比赛，被晒得像个红苹果一样。&lt;/p&gt;

&lt;p&gt;足球这个运动，不是根据人数来决定的，比如这种很无知的问题：我们14亿人口，居然选不出11个人来踢足球。&lt;/p&gt;

&lt;p&gt;拿领国日本来说，他们的足球在亚洲至少是数一数二的。他们为什么那么优秀？我觉得有一些文化影响也是非常重要的，从小就培养孩子们对这个运动的热爱。比如「足球小将」这种动漫，至少影响了不少80、90这一批人吧。&lt;/p&gt;

&lt;p&gt;一定是热爱，才能做的足够的优秀。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h2 id=&quot;认怂&quot;&gt;认怂&lt;/h2&gt;

&lt;p&gt;看了唐山打人事件之后，下面是大概的一个过程，网上也有很多视频和图片，我就不放了，太暴戾了……&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;事情发生的时间是6月10日凌晨2点多，地点在河北唐山的一个烧烤店。监控视频显示，四名女子正在吃东西聊天，像是姐妹聚餐，有说有笑。这时店外走进来一名穿绿色夹克的男子，先是走到白衣女子身旁，摸背骚扰，当即被女子推开和质问，“干嘛呀你”、“有病啊”。夹克男又上来想有身体接触，女子好像甩出一句：去你妹。然后3个女孩和4个壮汉互殴起来了……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之前也有好多这样的事件，遇到这样的事情之后，如果我是当事人&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;大声呼叫「救命」&lt;/li&gt;
  &lt;li&gt;指一个现场的其他男性，一定要指明他，喊他帮你或者帮你「报警」&lt;/li&gt;
  &lt;li&gt;认怂，这种烧烤、啤酒场合，就是打架的好地方，建议先「认怂」，事后报警&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望患者能早日康复……&lt;/p&gt;

&lt;p&gt;上周家里来了好多亲戚，在桌上就说，今天我回来的路上，差点和一个司机干起来了。我以为是最近没有休息好，导致自己心情不好，脾气非常的大。&lt;/p&gt;

&lt;p&gt;桌上的年轻人都笑了一下，因为大家都经历过这样的事情，在那个时候基本上很难控制自己的情绪。各种脏话都能脱口而出，还有时候会出手。&lt;/p&gt;

&lt;p&gt;如果你有好的建议，可以给我分享下么？谢谢~&lt;/p&gt;

&lt;p&gt;但是老人们接着说，他们经常在手机等媒体上看到，万一对方车把事态升级，下来几个壮汉，把你毒打一顿，那怎么办？老人们怕我们吃亏，该忍就忍到起，但是确实忍不到呀……&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theverge.com/2022/6/9/23161292/google-chrome-machine-learning-notification-phishing-preferences&quot;&gt;Chrome浏览器内置ML通知&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google Chrome内置了网络钓鱼检测功能，可以扫描页面，看看它们是否与已知的虚假或恶意网站匹配（不仅使用URL，因为骗子旋转这些网站的速度比它跟上的速度要快）。而且，现在，这项技术正在变得更好。谷歌还表示，在Chrome 102中，它将使用完全在浏览器内运行的机器学习（不向谷歌或其他地方发送数据），以帮助识别主动通知许可请求的网站，并在弹出之前对其进行静音]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/629cbe3a5cc037a5c6a7f6c3?s=eyJ1IjogIjYwZGU4ZDZlZTBmNWU3MjNiYmI0MzlhZCJ9&quot;&gt;大内密探，9周年的鬼故事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;恐怖故事，做工精良，恐怖故事也是一种释放压力的不错方法。我之前没有关注他们，是大数据给我推送的，如果一个节目可以做9年，那真的是太厉害了……牛x&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://3dicons.co/&quot;&gt;3dicons&lt;/a&gt;
精心制作的开源3D 图标100% 免费供商业和个人使用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://nomadlist.com/fire?age=33&amp;amp;interest=4&amp;amp;savings=50k&amp;amp;debt_rate=4&amp;amp;current_city=Gran+Canaria&amp;amp;current_city_latitude=28.1235459&amp;amp;current_city_longitude=-15.4362574&amp;amp;return_rate=1.04&amp;amp;income=3000&amp;amp;tax_rate=30&amp;amp;spending=1500&quot;&gt;财务自由的计算器&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以算算自己在对应的地方，挣多少钱，可以实现财务自由。目前济南排在第7位，往下就还是海口，成都没有上榜。&lt;/p&gt;

&lt;p&gt;如果自己在理财，应该可以提前退休。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;p&gt;最近有多个事情一起做。而且做的不开心，有时间就开始放空自己，刷几个短视频。没有用来开拓自己的阅读……&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书最重要的就是定好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;固定的时间&lt;/code&gt;，比如每天早起20分钟，那这个时间就可以用阅读，可以做自己喜欢事情，就可以避免日后每天纠结到底啥时候读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;莫言 那些奇奇怪怪的事 - 20%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;适合和小孩一起阅读~&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;技术相关的书，大部分是电子书，因为可以随时的show me code。&lt;/li&gt;
  &lt;li&gt;方法、理论类的书籍，一般会停下来思考，提出问题、或者沉淀为自己的知识。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/06/11/life-is-important/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/06/11/life-is-important/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>40 - 朋友多好，还是少好？</title>
        <description>&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h2 id=&quot;本周话题&quot;&gt;本周话题&lt;/h2&gt;

&lt;p&gt;朋友，别看我平时像个逗比一样，其实我是很内向的。&lt;/p&gt;

&lt;p&gt;我的朋友很少，我个人感觉不超过一桌人，一年吃饭的话就更少了，不超过10次。&lt;/p&gt;

&lt;p&gt;我老婆经常说我没什么朋友，确实我身边朋友比较少，然后能约出来一起吃饭的，那就更少了。&lt;/p&gt;

&lt;p&gt;我是这么看待的，如果你要维持这个朋友关系，那可能要经常去维系这个关系，花时间去打点，然后这个时间我觉得花的不是很值，有那么几个知己已经足以。&lt;/p&gt;

&lt;p&gt;不过我和我老婆就形成鲜明的对比，他身边就有非常多的朋友。从我个人感觉来，这种人应该是比较寂寞的，因为他如果没有那样热闹的氛围，他可能很难沉浸下来去做某些东西。&lt;/p&gt;

&lt;p&gt;反而我感觉我更耐得住寂寞，也没有什么个人的生日宴会，个人的宝宝宴会……，我不喜欢和不熟的人一起吃饭，一起出去玩。这就是我的社交恐惧症。&lt;/p&gt;

&lt;p&gt;也有可能是个人的性格决定的。&lt;/p&gt;

&lt;h2 id=&quot;心胸宽广&quot;&gt;心胸宽广&lt;/h2&gt;

&lt;p&gt;我刚毕业出来工作的时候，老是跟老板对着干，想到能活到现在也是命大呀&lt;/p&gt;

&lt;p&gt;小领导叫我做什么，心想这还用你教我，我知道怎么做。&lt;/p&gt;

&lt;p&gt;当有人指出我的问题或者批判我，我当时第一反应可能会是怎么去对立的去反驳这个问题不去接纳，还有可能是更严重的是报复他。&lt;/p&gt;

&lt;p&gt;经过这些年的一个成长，对某人有益和无益的提出这个问题，我在心里面不可能是之前那种想法了，而是我有没有这种问题，然后如何去改变这个问题。&lt;/p&gt;

&lt;p&gt;我想想之前自己真的好low，不仅命大，而且命硬&lt;/p&gt;

&lt;h2 id=&quot;感悟&quot;&gt;感悟&lt;/h2&gt;

&lt;p&gt;喜剧是什么？&lt;/p&gt;

&lt;p&gt;包括旨在通过引发笑声来表现幽默或有趣的话语或作品，尤其是在戏剧、电影、单口喜剧、电视、广播、书籍或任何其他娱乐媒介中。&lt;/p&gt;

&lt;p&gt;来自维基百科，喜剧是一种作品，意思就是作者用劳动换来的，所以我看到的舞台上，演员的表演都是一种呈现的结果。所以喜剧和幽默，以及这个人在线下的表现是不一样的。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/SQ5xa6gPtYqCfaHLJikTCA&quot;&gt;给女儿的投资计划&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先，投资到底是投什么？&lt;/p&gt;

&lt;p&gt;买一家公司的股票，就是买入它的一部分所有权，成为了小股东，这家公司赚钱了，你也就能分到相应的一部分。&lt;/p&gt;

&lt;p&gt;最重要的我觉得是找到好的公司，然后有足够的耐心来等待。后面这一步我能做到，前面哪一步说实话是挺难的。&lt;/p&gt;

&lt;p&gt;股票的价值是这家公司未来现金流的折现，这个现金流跟公司的利润正相关。买股票最终能不能赚到钱，本质上是看这家公司在你买入之后余下的生命里能不能持续地赚钱。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kristerw.github.io/2022/05/24/branchless/&quot;&gt;编译器里面的move和branch指令的解释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者是做GPU编译器的，可以关注一下。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.shalerb.org/&quot;&gt;Shale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shale 是用于 JSON、 YAML 和 XML 的 Ruby 对象映射器和序列化器。允许您解析 JSON、 YAML 和 XML 数据，并将其转换为 Ruby 数据结构，以及将数据结构序列化为 JSON、 YAML 或 XML。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mazzo.li/posts/fast-pipes.html&quot;&gt;Linux 管道的速度优势&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文探讨了Linux如何实现Unix管道。它首先使用吞吐量约为3.5GiB/s的程序，然后对其进行优化，直到其性能提高二十倍。需要具备C语言的基本知识。链接了包含文章代码的GitHub存储库。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;过去一周&quot;&gt;过去一周&lt;/h1&gt;

&lt;p&gt;本周的思考时刻：如何计划自己的行动？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写下自己要完成的计划&lt;/li&gt;
  &lt;li&gt;在自己放松的时候就嫩刚看到的这个提醒(比如设置为屏保，当玩耍手机的是就可以看到)&lt;/li&gt;
  &lt;li&gt;然后每天进步一点，给自己一个反馈，有多巴胺更能坚持下去&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下周思考：NA&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书最重要的就是定好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;固定的时间&lt;/code&gt;，比如每天早起20分钟，那这个时间就可以用阅读，可以做自己喜欢事情，就可以避免日后每天纠结到底啥时候读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;莫言 - 奇奇怪怪的那些事 - 5%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要是培养孩子的读书习惯，一种以故事的方式来培养习惯，我个人觉得是一种不错的方式。&lt;/p&gt;

&lt;p&gt;如果有你有好的方式，可以给我回信分享一下么？谢谢~&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;技术相关的书，大部分是电子书，因为可以随时的show me code。&lt;/li&gt;
  &lt;li&gt;方法、理论类的书籍，一般会停下来思考，提出问题、或者沉淀为自己的知识。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/06/04/what-is-friend/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/06/04/what-is-friend/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>用谷歌云服务器免费跑 cuda 代码</title>
        <description>&lt;h2 id=&quot;什么是-cuda&quot;&gt;什么是 CUDA？&lt;/h2&gt;

&lt;p&gt;CUDA 是 Nvidia 为并行计算平台和应用程序编程接口创建的一个模型。CUDA 是 NVIDIA 的并行计算架构，通过利用 GPU 的能力，可以大幅度提高计算性能。&lt;/p&gt;

&lt;p&gt;CUDA 代码不会在 AMD CPU 或者 Intel HD Graphics 上运行，除非你的机器里有 NVIDIA 的硬件。在 Colab 上，你可以利用 NVIDIA 的 GPU，以及一个预装了 Tensorflow 和其他 ML/DL 工具的功能齐全的 Jupyter note。&lt;/p&gt;

&lt;h3 id=&quot;第1-打开colab&quot;&gt;第1: 打开colab&lt;/h3&gt;

&lt;p&gt;然后在runtime-&amp;gt; change type里面修改硬件加速为GPU。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://colab.research.google.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/OXy9Wi.png&quot; alt=&quot;OXy9Wi&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第二检测nvcc版本&quot;&gt;第二：检测nvcc版本&lt;/h3&gt;

&lt;p&gt;一般都是安装了cuda的，直接执行nvcc来查看版本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/SzsWT1.png&quot; alt=&quot;SzsWT1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-安装插件&quot;&gt;3. 安装插件&lt;/h3&gt;

&lt;p&gt;为了nvcc能运行，需要安装一个插件，识别为cuda代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/5pgVlU.png&quot; alt=&quot;5pgVlU&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!pip install git+https://github.com/andreinechaev/nvcc4jupyter.git
%load_ext nvcc_plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-运行cuda&quot;&gt;4. 运行cuda&lt;/h3&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cu&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__global__&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cuda_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World from GPU!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cuda_hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;cudaDeviceSynchronize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/VGzSId.png&quot; alt=&quot;VGzSId&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://gist.github.com/chasays/81994504fe154f6cd9f799323e331ca8&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/06/02/run-cuda-with-free-cloud/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/06/02/run-cuda-with-free-cloud/</guid>
        
        <category>cuda</category>
        
        
      </item>
    
      <item>
        <title>LLVM LibFuzzer介绍和实践</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;下面是自己学习libFuzzer过程中，记录的文档，欢迎交流和指正。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fuzzing 是一种软件测试方法，包括将格式不正确的数据作为输入传递给程序，并监视其是否存在不正确的行为。今天 fuzzing 是发现软件安全问题的最有效的方法之一。2014年第一个覆盖引导模糊器Fuzzy Lop。这开创了现代市场上的模糊解决方案和技术。&lt;/p&gt;

&lt;h2 id=&quot;什么是libfuzzer&quot;&gt;什么是LibFuzzer&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;LibFuzzer is in-process, coverage-guided, evolutionary fuzzing engine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;LibFuzzer与被测库链接，并通过特定的模糊化入口点（又称“目标函数 target function”）将模糊化输入提供给库；然后，模糊器跟踪到达的代码区域，并在输入数据的主体上生成不同的参数组合，以最大限度地提高代码覆盖率。libFuzzer的代码覆盖率信息由LLVM的SanitizerCoverage工具提供。&lt;/p&gt;

&lt;p&gt;提供：&lt;/p&gt;

&lt;p&gt;简单来说就是通过与要进行fuzz的库连接，并将libfuzzer生成的输入通过模糊测试进入点(fuzz target)喂给要fuzz的库进行fuzz testing。同时fuzzer会跟踪哪些区域的代码已经被测试过的，并且根据种料库的输入进行变异来使得代码覆盖率最大化。代码覆盖率的信息是由LLVM’s SanitizerCoverage插桩提供的&lt;/p&gt;

&lt;p&gt;需要注意的是这几个libfuzzer的特性：in-process指进程内。即libfuzzer在fuzz时并不是产生出多个进程来分别处理不同的输入，而是将所有的测试数据放入进程的内存空间中。coverage-guided指覆盖率指导的。即会进行代码覆盖率的计算，正如定义所说的使得不断增大代码覆盖率。evolutionary是指libfuzzer是进化型的fuzz，结合了产生和变异两种形式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/5e2siO.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;举例-fuzzing-test&quot;&gt;举例 fuzzing-test&lt;/h2&gt;

&lt;p&gt;创建一个文件，fuzz_target.cc, 这个内容如下，记得不要使用使用main等作为函数名。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// fuzz_target.cc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LLVMFuzzerTestOneInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DoSomethingInterestingWithMyAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Non-zero return values are reserved for future use.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LLVMFuzzerTestOneInput&lt;/code&gt; 函数是我们要实现的接口函数，他的两个参数Data(libfuzzer的测试样本数据)，size(样本数据的大小)。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DoSomethingInterestingWithMyAPI&lt;/code&gt; 函数即我们实际要进行fuzz的函数。&lt;/p&gt;

&lt;p&gt;编译这个文件，命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang++ -g -O1 -fsanitize=fuzzer,address fuzz_target.cc -o fuzzer_target&lt;/code&gt; ，这里的clang是我们用llvm编译出来的，如果用的其他方式会报错。&lt;/p&gt;

&lt;p&gt;参数的意思：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;-g 可选参数，保留调试符号。&lt;/li&gt;
  &lt;li&gt;-O1 指定优化等级为1，对应的还有O0 (optimize 0,1,2)，以及OS(optimize size)使用后binary大小会变小。&lt;/li&gt;
  &lt;li&gt;-fsanitize 指定sanitize， 值有几种：fuzzer,address，memory(单独使用，检查内存)，undefined(移除、未定义等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这一步骤整体过程就是通过clang的-fsanitize=fuzzer选项可以启用libFuzzer，这个选项在编译和链接过程中生效，实现了条件判断语句和分支执行的记录，通过生成不同的测试样例然后能够获得代码的覆盖率情况，最终实现所谓的fuzz-testing。&lt;/p&gt;

&lt;p&gt;注意：编译的选项会影响fuzzer的效率，比如下面就是一个点。我也不知道有哪些，遇到问题就在网上搜吧，一定会有结果的。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;clang编译的时候，参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-fno-omit-frame-pointer &lt;/code&gt;对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不需要栈指针的函数就不在寄存器中保存指针&lt;/code&gt;，因此可以忽略存储和检索地址的代码，同时对许多函数提供一个额外的寄存器。所有”-O”级别都打开它，但仅在调试器可以不依靠栈指针运行时才有效。在AMD64平台上此选项默认打开，但是在x86平台上则默认关闭。建议显式的设置它。&lt;/li&gt;
  &lt;li&gt;gline-tables-only:表示使用采样分析器， 在应用程序执行时，抽样探查器用于收集运行时信息(如硬件计数器)。它们通常非常有效，并且不会引起大量的运行时开销。分析器收集的示例数据可用于编译期间，以确定代码中执行最多的区域是什么，在编译器可以使用分析信息之前，代码需要在分析器下执行。这也对提高我们fuzz效率很重要。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如常用的编译命令：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang++ -g -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link test.cc -o test&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;写一个fuzz-测试函数&quot;&gt;写一个fuzz 测试函数&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;准备被测文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如有一个头文件， test.h, 里面有一个FuzzFunction1的函数&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FuzzFunction1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'F'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'U'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'Z'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'Z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;写测试函数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在要对着头里面里面的FuzzFunction1函数进行测试，编一个测试接口,test.cc，&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;test.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LLVMFuzzerTestOneInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FuzzFunction1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是，data和size和头文件里面的类型是一致的。如果是bool类型的，记得false和true，都要遍历&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool bool_flag[] = {true, false}&lt;/code&gt;。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;编译测试函数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;只有就完成了，然后编译下面的测试接口函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang++ -g -std=c++11 -fsanitize=fuzzer,address test.cc  -o test&lt;/code&gt;.,生成一个test的执行文件&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建一个corpus(语料库，可以想象为一个函数的参数，各种参数的组合)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在未使用语料库的情况下就得到了crash实属意料之外，如果我们在使用字典的下情况仍然暂时未得到crash，另一个方法可以去寻找一些有效的输入语料库。因为libfuzzer是进化型的fuzz，结合了产生和变异两个发面。如果我们可以提供一些好的seed，虽然它本身没法造成程序crash，但libfuzzer会在此基础上进行变异，就有可能变异出更好的语料，从而增大程序crash的概率。具体的变异策略需要我们去阅读libfuzzer的源码或者些相关的论文。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;corpus
./test corpus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;corpus 是我们提供的语料库。理想情况下，该语料库应该为被测代码提供各种有效和无效的输入，模糊器基于当前语料库中的样本输入生成随机组合。&lt;/p&gt;

&lt;p&gt;如果组合触发了测试代码中先前未覆盖的路径的执行，则该组合参数将保存到语料库中以供将来变更。&lt;/p&gt;

&lt;p&gt;当然LibFuzzer也可以没有任何初始seed的情况下工作，但如果受测试的库接受复杂的结构化输入，则会因为随机产生的样例不易符合导致效率降低。&lt;/p&gt;

&lt;p&gt;合并corpus，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./test -merge=1 corpus_min corpus&lt;/code&gt;, 这样，corpus_min和corpus将会存放到新的corpus精简后的输入样例。&lt;/p&gt;

&lt;p&gt;执行的时候，我们一般会看到如下信息&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  04 Rik:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ ./test corpus
INFO: Seed: 2222548757
INFO: Loaded 1 modules   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;35 inline 8-bit counters&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 35 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x7f7120, 0x7f7143&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 
INFO: Loaded 1 PC tables &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;35 PCs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 35 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x5b7a68,0x5b7c98&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 
INFO:        0 files found &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;corpus1
INFO: &lt;span class=&quot;nt&quot;&gt;-max_len&lt;/span&gt; is not provided&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; libFuzzer will not generate inputs larger than 4096 bytes
INFO: A corpus is not provided, starting from an empty corpus
&lt;span class=&quot;c&quot;&gt;#2    INITED cov: 3 ft: 3 corp: 1/1b exec/s: 0 rss: 27Mb&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#3    NEW    cov: 4 ft: 4 corp: 2/4b lim: 4 exec/s: 0 rss: 27Mb L: 3/3 MS: 1 CMP- DE: &quot;\x00\x00&quot;-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#1190    NEW    cov: 5 ft: 5 corp: 3/7b lim: 14 exec/s: 0 rss: 27Mb L: 3/3 MS: 2 ChangeBinInt-CMP- DE: &quot;F\x00&quot;-&lt;/span&gt;
……………………
&lt;span class=&quot;nv&quot;&gt;artifact_prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Test unit written to ./crash-0eb8e4ed029b774d80f2b66408203801cb982a60

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Seed 这个seed，就是./test -seed=xxx可以指定的随机seed&lt;/li&gt;
  &lt;li&gt;max_len  测试输入的最大长度&lt;/li&gt;
  &lt;li&gt;cov  代码覆盖率，我们的语料库达到的代码块总数&lt;/li&gt;
  &lt;li&gt;corp   语料库中的文件数量及其总大小&lt;/li&gt;
  &lt;li&gt;exec/s  每秒模糊迭代次数(在运行时间长于 &amp;lt; = 1秒的情况下有用)&lt;/li&gt;
  &lt;li&gt;rss  存储在物理内存中的进程内存量&lt;/li&gt;
  &lt;li&gt;./crash-xxx 这个就是用来复现问题的文件，方便吧&lt;/li&gt;
  &lt;li&gt;INITED fuzzer已完成初始化，其中包括通过被测代码运行每个初始输入样本。&lt;/li&gt;
  &lt;li&gt;READ fuzzer已从语料库目录中读取了所有提供的输入样本。&lt;/li&gt;
  &lt;li&gt;NEW fuzzer创建了一个测试输入，该输入涵盖了被测代码的新区域。此输入将保存到主要语料库目录。&lt;/li&gt;
  &lt;li&gt;pulse fuzzer已生成 2的n次方个输入（定期生成以使用户确信fuzzer仍在工作）。&lt;/li&gt;
  &lt;li&gt;REDUCE fuzzer发现了一个更好（更小）的输入，可以触发先前发现的特征（设置-reduce_inputs=0以禁用）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后的一个crash文件， 这样我们就可以有针对性的对程序进行动态调试，利用造成crash的输入回溯出漏洞的细节。&lt;/p&gt;

&lt;h3 id=&quot;如何理解fuzzer的输出结果&quot;&gt;如何理解fuzzer的输出结果&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#17458 REDUCE cov: 7 ft: 7 corp: 5/14b lim: 170 exec/s: 0 rss: 29Mb L: 4/4 MS: 1 EraseBytes-&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;指尝试了17458个输入，成功发现了5个样本（放入语料库）大小为14b，共覆盖了7个代码块，占用内存29mb，变异操作为EraseBytes-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/chasays/mdPicGo@master/uPic/dgLG09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;要使用libfuzzer的功能&quot;&gt;要使用libfuzzer的功能&lt;/h2&gt;
&lt;p&gt;就需要再llvm里面变异compiler-rt，然后可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang++ -fsanitizer=Address xx.cc&lt;/code&gt; 在compiler-rt目录下有一些example cc的文件&lt;/p&gt;

&lt;h2 id=&quot;编译llvm-mc-assemble-fuzzer&quot;&gt;编译llvm-mc-assemble-fuzzer&lt;/h2&gt;

&lt;p&gt;这个是汇编器的，还有其他的，
编译这个用之前的编译的llvm里面的clang，就需要替换为这个，用flag=cmake_c_compiler=xxx/clang
而且目录不能是同一个，不然cmake会失败。&lt;/p&gt;

&lt;h2 id=&quot;fuzzer的dict&quot;&gt;fuzzer的dict&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;提高我们fuzz的效率&lt;/code&gt;，这其中一个办法就是使用字典。&lt;/p&gt;

&lt;p&gt;我们知道基本上所有的程序都是处理的数据其格式是不同的，比如 xml文档， png图片等等。这些数据中会有一些特殊字符序列 （或者说关键字）， 比如在xml文档中就有CDATA，&amp;lt;!ATTLIST等，png图片就有png 图片头。如果我们事先就把这些字符序列列举出来吗，fuzz直接使用这些关键字去组合，就会就可以减少很多没有意义的尝试，同时还有可能会走到更深的程序分支中去。&lt;/p&gt;

&lt;p&gt;比如下面就是xml.dict里面的内容，xml一般有encoding、version、href等，用这些来组合，比其他的组合更高效，用例少，速度快，更精准。&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;attr_encoding=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; encoding=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;attr_generic=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; a=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;attr_href=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; href=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;attr_standalone=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; standalone=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;attr_version=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; version=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行的时候指定dict，用参数-dict &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./test -max_total_time=60 -print_final_stats=1 -dict=./xml.dict corpus&lt;/code&gt;,如果corpus太多，可以用merge来精简为一个。&lt;/p&gt;

&lt;p&gt;文章太长了。主要是这个工具太强大了。&lt;/p&gt;

&lt;h2 id=&quot;最后的进阶&quot;&gt;最后的进阶&lt;/h2&gt;

&lt;p&gt;下面是关于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;一些链接库的选择以及插桩编译时的一些参数的设置，还有max_len的设置对我们最后fuzz结果的影响&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;编译的插桩参数&quot;&gt;编译的插桩参数&lt;/h3&gt;

&lt;p&gt;插桩的参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-fno-omit-frame-pointer -gline-tables-only&lt;/code&gt;，这2个前面提到过了，再来介绍一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fuzzer-no-link&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果修改大型项目的CFLAGS，它也需要编译自己的主符号的可执行文件，则可能需要在不链接的情况下仅请求检测，即fuzzer-no-link强制在链接阶段不生效。&lt;/p&gt;

&lt;p&gt;介绍一些新的参数，是关于ld的。&lt;/p&gt;

&lt;p&gt;比如编译命令：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clang -O2 -fno-omit-frame-pointer -gline-tables-only \
-fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope test.cc \
 -Wl,--whole-archive xxx/.libs/libpcre2-8.a xx/.libs/libpcre2-posix.a \
 -Wl,-no-whole-archive -fsanitize=fuzzer -o test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参数：–whole-archive和–no-whole-archive是ld专有的命令行参数，clang++并不认识，要通过clang++传递到ld，需要在他们前面加-Wl。–whole-archive可以把 在其后面出现的静态库包含的函数和变量输出到动态库，–no-whole-archive则关掉这个特性。&lt;/p&gt;

&lt;h3 id=&quot;执行的max_len的参数&quot;&gt;执行的max_len的参数&lt;/h3&gt;

&lt;p&gt;max_len一般情况下，越大获得的corpus就越多，就越容易挖掘出bug。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./test ./corpus1 -print_final_stats=1 -max_len=500 -max_total_time=100&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;解释，运行test，长度为500，并打印最后的结果，执行事假哪位100s，执行的corpus保存到corpus1里面。&lt;/p&gt;

&lt;p&gt;编译llvm fuzz参考：https://github.com/google/oss-fuzz/blob/master/projects/llvm/build.sh&lt;/p&gt;

&lt;p&gt;cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=On -DLLVM_ENABLE_WERROR=On -DLLVM_USE_SANITIZER=Address -DLLVM_USE_SANITIZE_COVERAGE=On -DCMAKE_C_COMPILER=/usr/local/bin/clang ../llvm&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake &lt;span class=&quot;nt&quot;&gt;-GNinja&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Release ../&lt;span class=&quot;nv&quot;&gt;$LLVM&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DLLVM_ENABLE_PROJECTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clang;libcxx;libcxxabi;compiler-rt;lld;clang-tools-extra&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DLLVM_ENABLE_ASSERTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DCMAKE_C_COMPILER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DCMAKE_CXX_COMPILER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DCMAKE_C_FLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DCMAKE_CXX_FLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_FUZZING_CONFIG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DLLVM_NO_DEAD_STRIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DLLVM_USE_SANITIZER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LLVM_SANITIZER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;WebAssembly &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DCOMPILER_RT_INCLUDE_TESTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;OFF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://llvm.org/docs/LibFuzzer.html&lt;/p&gt;

&lt;p&gt;https://blog.haboob.sa/blog/applying-fuzzing-techniques-against-pdftron-part-2&lt;/p&gt;

&lt;p&gt;https://www.moritz.systems/blog/an-introduction-to-llvm-libfuzzer/&lt;/p&gt;

&lt;p&gt;https://github.com/Dor1s/libfuzzer-workshop&lt;/p&gt;

&lt;p&gt;https://www.anquanke.com/post/id/224823&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/06/01/llvm-fuzz/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/06/01/llvm-fuzz/</guid>
        
        <category>LLVM</category>
        
        
      </item>
    
      <item>
        <title>安装WSL错误0x80072f7d，解决办法</title>
        <description>&lt;h2 id=&quot;现象&quot;&gt;现象&lt;/h2&gt;

&lt;p&gt;wsl2安装ubuntu的时候，提示错误0x80072f7d&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:&lt;span class=&quot;se&quot;&gt;\W&lt;/span&gt;indows&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;ystem32&amp;gt;wsl &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt;
Installing: Windows Subsystem &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Linux
Windows Subsystem &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Linux has been installed.
Downloading: WSL Kernel
A error was encountered during installation, but installation may &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; Component: &lt;span class=&quot;s1&quot;&gt;'WSL Kernel'&lt;/span&gt; Error Code: 0x80072f7d
Downloading: Ubuntu
The requested operation is successful. Changes will not be effective &lt;span class=&quot;k&quot;&gt;until &lt;/span&gt;the system is rebooted.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;解决&quot;&gt;解决&lt;/h2&gt;

&lt;p&gt;网上找到的解决方案都是先安装wsl linux kernel，就可以解决，我安装之后，还是提示错误，进度条卡在某一个点50%+，网上看一了下，有卡在不同位置的.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先是安装 wsl2 linux-kernel，下面是x86的安装包，
    &lt;blockquote&gt;
      &lt;p&gt;https://docs.microsoft.com/en-us/windows/wsl/install-manual#step-4—download-the-linux-kernel-update-package&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;然后是开启虚拟化&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;直接在powershell 执行下面的命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All&lt;/code&gt;，记得启动完了，之后会提示重启.&lt;/p&gt;

&lt;p&gt;也可以通过windows 功能里面来手动安装和启动，参考下面的页面&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;下载wsl安装包&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在某些情况下，你可能无法（或不想）使用 Microsoft Store 安装 WSL Linux 发行版。 你可能正在运行不支持 Microsoft Store 的 Windows Server 或长期服务 (LTSC) 桌面操作系统 SKU，或者你的公司网络策略和/或管理员不允许在你的环境中使用 Microsoft Store。 在这些情况下，虽然 WSL 本身可用，但你可能需要直接下载 Linux 发行版。&lt;/p&gt;

&lt;p&gt;下面是Ubuntu18.04的发行包&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://aka.ms/wsl-ubuntu-1804&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;安装发行包&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下载了发行版后，导航到包含下载内容的文件夹，并在该目录中运行以下命令，其中 app-name 是 Linux 发行版 .appx 文件的名称。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add-AppxPackage .\app_name.appx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者是Appx 包下载完成后，可以通过双击 appx 文件开始运行新发行版。 （命令 wsl -l 不会在此步骤完成之前显示发行版已安装）。&lt;/p&gt;

&lt;p&gt;祝你使用wsl愉快，有时候GPU driver等，导致你的cuda代码在wsl跑步起来，也有可能是这个导致的.&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;https://superuser.com/questions/1678737/component-wsl-kernel-error-code-0x80072f7d-on-wsl-install&lt;/p&gt;

&lt;p&gt;https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#downloading-distributions&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/30/wsl-install-error-0x80072f7d/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/30/wsl-install-error-0x80072f7d/</guid>
        
        <category>wsl</category>
        
        
      </item>
    
      <item>
        <title>Linux 配置 xx search history</title>
        <description>&lt;p&gt;这个是为我自己记录配置的，因为我换了环境之后，总是忘记怎么配置.&lt;/p&gt;

&lt;p&gt;喜欢linux、unix的终端，非常的方便.&lt;/p&gt;

&lt;p&gt;但是快速的的找到某一个历史命令，有很多种途径，有没有更快速的方法喃&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;history&lt;/td&gt;
          &lt;td&gt;grep xxx 这个太慢了&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;ctrl+r 输入之前输入过的命令，会有提示&lt;/li&gt;
  &lt;li&gt;输入之前命令的前半部分，然后按向上、向下箭头来快速找到&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我喜欢最后一种，配置方式如下，加到自己的inputrc里面即可.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[A&quot;&lt;/span&gt;: history-search-backward
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[B&quot;&lt;/span&gt;: history-search-forward
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-p&quot;&lt;/span&gt;: history-search-backward
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-n&quot;&lt;/span&gt;: history-search-forward

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面配置的意思是： 箭头向上、下或者ctrl+p、n也可以用. p和n的是previous、next的缩写.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2022/05/30/config-linux-forward-history-search/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2022/05/30/config-linux-forward-history-search/</guid>
        
        <category>linux</category>
        
        
      </item>
    
  </channel>
</rss>
