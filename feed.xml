<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>察说花园</title>
    <description>人生就是干</description>
    <link>https://blog.chiphub.top/</link>
    <atom:link href="https://blog.chiphub.top/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 15 Mar 2023 01:21:52 +0000</pubDate>
    <lastBuildDate>Wed, 15 Mar 2023 01:21:52 +0000</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>GCC 编译器优化 - ThinLTO</title>
        <description>&lt;h2 id=&quot;lto&quot;&gt;LTO&lt;/h2&gt;

&lt;p&gt;LTO（Link Time Optimization）是一种通过整个程序分析和跨模块优化来实现更好的运行时性能的方法。在编译阶段，clang会发出LLVM位码而不是对象文件。链接器会识别这些位码文件，并在链接过程中调用LLVM，以生成构成可执行文件的最终对象。LLVM实现加载所有输入的比特码文件，并将它们合并在一起以产生一个单一的模块。程序间分析（IPA）和程序间优化（IPO）在这个单体模块上连续进行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230313170728.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LTO有个缺点：这在实践中意味着LTO经常需要大量的内存（以一次容纳所有的IR），而且速度非常慢。而在通过-g启用调试信息的情况下，IR的大小和由此产生的内存需求会明显增大。即使没有调试信息，这对于非常大的应用程序，或者在内存受限的机器上进行编译，也是令人望而却步的。这也使得增量构建不那么有效，因为当任何输入源发生变化时，从LTO步骤开始的一切都必须重新执行。&lt;/p&gt;

&lt;h2 id=&quot;thinlto&quot;&gt;ThinLTO&lt;/h2&gt;

&lt;p&gt;ThinLTO 是一种新的方法，旨在像非LTO构建那样进行扩展，同时保留了全LTO的大部分性能成就。
在ThinLTO中，串行步骤是非常薄和快速的。这是因为它不是加载比特码和合并一个单一的单体模块来进行这些分析，而是利用每个模块的紧凑摘要来进行串行链接步骤中的全局分析，以及为后来的跨模块导入的函数位置索引。当模块在完全并行的后端进行优化时，函数导入和其他IPO转换将在以后进行。&lt;/p&gt;

&lt;p&gt;由ThinLTO全局分析实现的关键转换是函数导入，其中只有那些可能被内联的函数被导入到每个模块。这最大限度地减少了每个ThinLTO后端的内存开销，同时最大化了最有影响的跨模块优化机会。因此，IPO转换是在每个模块上用其导入的函数进行扩展。
ThinLTO的过程分为3个阶段。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;编译：与完全的LTO模式一样生成IR，但用模块摘要进行扩展。&lt;/li&gt;
  &lt;li&gt;thin link:thin 链接器插件层，结合摘要并进行全局分析&lt;/li&gt;
  &lt;li&gt;ThinLTO后端: 具有基于摘要的导入和优化的并行后端&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230313171121.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个过程的关键因素是在第一阶段发出的摘要。这些摘要是使用比特码格式发布的，但设计成可以单独加载，而不涉及LLVMContext或任何其他昂贵的结构。每个全局变量和函数在模块摘要中都有一个条目。一个条目包含元数据，对它所描述的符号进行抽象。例如，一个函数被抽象为它的链接类型，它所包含的指令数量，以及可选的剖析信息（PGO）。此外，对另一个全局的每一个引用（采取的地址，直接调用）都被记录下来。这些信息可以在Thin link阶段建立一个完整的引用图，并利用全局总结信息进行后续快速分析。&lt;/p&gt;

&lt;p&gt;下面图片是LTO和ThinLTO的编译对比图；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230314084435.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ipo&quot;&gt;IPO&lt;/h2&gt;

&lt;p&gt;过程间分析（inter-procedural analysis）是一个多步骤的过程，是LTO分析过程中的重要部分，也是一个跨模块的分析过程。跨模块的优化功能实现最早在1987年（Link time optimization - MIPS），后来相继出现了过程间分析和转换，动态链接程序的优化（IPA + LTO）。&lt;/p&gt;

&lt;p&gt;GCC中的IPA包含的操作有： increase alignment、devirtualization、constant propagation、inline、pure/const analysis等。&lt;/p&gt;

&lt;p&gt;ICC中的IPO（Interprocedural Optimization）包含众多的优化，例如：Array dimension padding、Alias analysis、Constant propagation、Dead call deletion、Dead function elimination、Inlining、Structure splitting and field reordering、Whole program analysis等重要优化过程。优化选项配置为-ipo。&lt;/p&gt;

&lt;p&gt;比如inline内联优化。&lt;/p&gt;

&lt;h3 id=&quot;inline内联优化&quot;&gt;inline内联优化&lt;/h3&gt;

&lt;p&gt;内联（inline）优化就是把调用的函数放到调用的地方，避免函数调用和寄存器的分配，增加指令的数量。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 内联优化后&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;优化后，取消函数调用的好处&lt;/p&gt;

&lt;p&gt;1.它消除了函数调用过程中所需的各种指令：包括在堆栈或寄存器中放置参数，调用函数指令，返回函数过程，获取返回值，从堆栈中删除参数并恢复寄存器等。&lt;/p&gt;

&lt;p&gt;2.由于不需要寄存器来传递参数，因此减少了寄存器溢出的概率。当使用引用调用（或通过地址调用或通过共享调用）时，它消除了必须传递引用然后取消引用它们。&lt;/p&gt;

&lt;p&gt;除了有点，也有缺点：优化后的执行程序包变大。还有一些特定情况，内联将会造成很严重的后果，如递归函数的内联可能造成代码的无限inline循环。所以编译器在这些特殊情况下会拒绝内联，常见的包括虚调用，函数体积过大，有递归，可变数目参数，通过函数指针调用，调用者异常类型不同，declspec宏、使用alloca、使用setjump等。&lt;/p&gt;

&lt;p&gt;可以通过关键字：inline来实现内联优化。&lt;/p&gt;

&lt;p&gt;其实内联inline只是建议性的关键字，编译器并不一定会听你的，毕竟他比你更了解你的代码编译后是什么样子的，而所谓的内联也不单单是指inline这个关键字了，他本质上是一种编译器的优化方式。另外，在windows上平台我还经常能看到【forceinline】（GCC上的【always_inline】）这样的关键字，字面意思是强制内联。不过经过查阅，发现一般只是对代码体积不做限制了，或者说在Debug模式（不不开启优化的情况）下也会尽量按照开发者的意愿去内联。无论如何，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最终的决定权还是交给编译器去处理&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;更多阅读&quot;&gt;更多阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36287943/article/details/103930336&quot;&gt;编译优化之 - 过程间优化(IPA/IPO)入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/50812510&quot;&gt;被知乎大佬嘲讽后的一个月，我重新研究了一下内联函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://llvm.org/docs/LinkTimeOptimization.html#example-of-link-time-optimization&quot;&gt;example-of-link-time-optimization&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html&quot;&gt;thinlto-scalable-and-incremental-lto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/03/13/GCC-process/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/03/13/GCC-process/</guid>
        
        <category>gcc</category>
        
        <category>compiler</category>
        
        
      </item>
    
      <item>
        <title>80 - 适者生存</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;今天看到冯大的一篇文章，&lt;a href=&quot;https://mp.weixin.qq.com/s/zN8vBAjrPh9nA0Q-kjnBWA&quot;&gt;我是这么看腾讯 T13 技术大佬被裁这事儿的&lt;/a&gt;，一个腾讯T13技术大佬被裁事件。&lt;/p&gt;

&lt;p&gt;技术专家在公司工作很多年而被裁，换了谁心里头都不舒服。对于当事人总结的被裁原因，往往又不是真正的原因，这就是所谓的当局者迷。&lt;/p&gt;

&lt;p&gt;作者给出了几个职场建议，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;包括低头干活，抬头看路，改变自己适应环境，以及让个人和公司相忘于江湖&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最近恰好听播客，接触到了一本书「高效能人士的7个习惯」,听名字就很鸡汤，但是里面对于职场新人来说，干货满满，豆瓣评分8.5。&lt;/p&gt;

&lt;p&gt;什么是彼得原理喃？&lt;/p&gt;

&lt;p&gt;指出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;一个人在组织内部会得到晋升，直到不能胜任为止&lt;/code&gt;。也就是说，某个人在组织内部的管理层级，最终会达到自己无法胜任的位置。这意味着，即使一个人已经得到了晋升，但如果没有适当的培训和支持，他将无法胜任他晋升到的职位，会成为他的天花板。&lt;/p&gt;

&lt;p&gt;比如有一个程序员，他很擅长编写代码，并且在编写小型项目时表现优异。但是，当他被提升为高级软件工程师时，他可能会发现自己无法对应复杂和较大规模的项目，并且无法与团队进行沟通，或者无法承担管理职责。&lt;/p&gt;

&lt;p&gt;尽管他在代码方面很优秀，但是他可能会陷入自己的无能之境。他的上司可能会意识到他不能完成高级软件工程师的工作，并将他排除在项目外，或者将他降回到程序员或其他适合他的职位。&lt;/p&gt;

&lt;p&gt;但是在这里，有时候这个程序员可能也会变得太重要，团队已经习惯了他的存在，不能失去他，于是他就会继续留在这个职位上，直到他自己离开或者公司以某种方式解决这个问题。&lt;/p&gt;

&lt;p&gt;这个例子说明了在职场上，员工可能会被升迁到他们的无能之境，这不仅对他们本人不利，而且还对公司和团队产生负面影响。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/5cW_LyfGRBoiYZYKi-eB4g&quot;&gt;想让我的方法更容易持续、更容易参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者的第六个年头的财务自由计划，她每年会整理过去的有价值的内容并定期更新分享给读者。文章重点在于如何获得10%的年度投资收益，从而达到财务自由的目标。作者强调了专业人士的专业知识的重要性，比如基金经理的投资建议等等。她建议投资者进行分散投资，使用能够跟踪表现最佳股票型基金平均收益的基金。作者还分享了她使用投资顾问和FOF来跟踪投资回报的经历和体验。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/E2KnibkYlVT4cgmd3QH1Kw&quot;&gt;无痛分娩，为什么还有 70% 产妇用不上？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;胡佳（化名）是一线城市三甲综合医院的麻醉科医生。和大家普遍想象的不同，胡佳所在的医院，产妇选择无痛分娩的比例是 100%。&lt;/p&gt;

&lt;p&gt;而在 19 年前，这个数据还只有 1%。据不完全统计，2004 年前仅有不足 1% 的国内产妇享受到分娩镇痛，即使在较发达地区分娩镇痛率仍不足 10%，而在边疆偏远地区，分娩镇痛更是一片空白。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwODQ3NjU5Ng==&amp;amp;mid=2247483986&amp;amp;idx=1&amp;amp;sn=995667b91c52664c265e5f65e2a8f59a&amp;amp;scene=58&amp;amp;subscene=0&quot;&gt;阿强买基金，为啥没人能卷走他的钱？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;把枯燥无趣的金融知识，用漫画的新式来传达，我觉得太有趣了。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cocktailpeanut.github.io/dalai/#/&quot;&gt;自动安装LLM模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在你的电脑上运行LLaMA的简单方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/camenduru/stable-diffusion-webui-colab&quot;&gt;stable diffusion的webui colab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过一个草图的形式就可以自动生成一个漂亮的图片，结合google colab,免费部署和使用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shots.so/&quot;&gt;shots截图工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各种样式的截图边框。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/visual-chatgpt&quot;&gt;visual-chatgpt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微软自家的Visual ChatGPT连接了ChatGPT和一系列的Visual Foundation模型，以便在聊天过程中发送和接收图像。&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/03/11/Survival-of-the-fittest/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/03/11/Survival-of-the-fittest/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>79 -  技能速成</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;去年成都由于疫情，还有就是高温的原因，work from home，在家办公的日子就是舒服，不用考虑通勤时间，起床就可以开电脑，然后再去洗漱……&lt;/p&gt;

&lt;p&gt;慢慢的觉得在家办公特别爽，主要是我现在每天的通勤时间在1个小时。之前出门比较晚，出门就开始堵车，一天通勤时间在2~3个小时。用这个时间来做点自己喜欢的事情，应该是不错的。&lt;/p&gt;

&lt;p&gt;很久以前，关注过远程工作的时候，顺便推荐一个远程工作的社区：电鸭社区。发现里面前端岗位是最多的，后来就学习了一段时间的前端工程，诠释了什么是从入门到放弃。最主要的还是没有实际的工程来搞，就没那么容易记住。俗话说得好： talk is cheap, show me code.&lt;/p&gt;

&lt;p&gt;最近自己捣鼓一个前端工程，不管多晚，多累，就喜欢调试出来结果才罢休，一度我以为自己是不是真的兴趣爱好是这个做前端开发。&lt;/p&gt;

&lt;p&gt;前端是一个变化特别快，技术栈更新迭代快，如果自己不是一个爱学习，按钻研的性格，很难做的优秀。为了学习前端js用法，最近自己找了一个项目用js实现一个编译器流程的项目，找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;项目结合当前学习的东西，这样才更容易掌握和速成&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面是chatGPT的回答，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;关于如何使前端开发变得有趣？格式为：观点1、观点2&lt;/code&gt;  （chatgpt的prompt非常重要，你看我把格式都给出来了，结果也不会差太远了，所以后面会不会有prompt engineer，不好说呀。）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作为一个前端开发人员，有很多方法可以使工作更有趣：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;学习新技能和工具 - 不断学习新的技术和工具可以使前端开发总是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;保持新鲜感&lt;/code&gt;，同时也可以提高自己的技能水平。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参加社区活动 - 参加线下或者线上的前端开发社区活动可&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;以认识更多志同道合的人&lt;/code&gt;，扩展自己的人脉，同时也可以学习到最新的前端技术发展趋势。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实战练习 - 通过完成一些实际项目的练习，可以让自己的技能更快地提高，同时也可以增加对前端开发的兴趣和热情。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;做自己感兴趣的项目 - 在自己的空闲时间，可以做一些自己感兴趣的前端开发项目，例如搭建自己的博客网站、构建一个自己喜欢的应用等等，这样可以让自己更加投入到前端开发中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;加入开源社区 - 加入一些开源社区可以得到更广泛的技术交流和学习经验，同时也可以通过提交自己的代码或者修复别人的缺陷来积累自己的经验。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;与其他开发人员合作 - 与其他开发人员合作可以让前端开发更有趣，可以借鉴其他人的经验和技能，并且在合作中加深人际关系，增加团队协作和创造的乐趣。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我发现自己特别着迷的就是，自己撸一个后端的接口，然后前端拿到数据之后渲染那个感觉，太爽了。说不上来为啥。&lt;/p&gt;

&lt;p&gt;关于后端接口，不用掌握Java，Python里面有一个fastapi就可以在10行代码内完成，以及熟悉各种接口的调用方式和数据传递方式。如果你熟练地掌握了这些技能，你可以很容易地开发出健壮的接口，并且灵活地应对客户端的需求变化。另外，你也可以关注一些有关接口相关的博客、技术文章等渠道，了解行业最新的接口开发趋势，不断提升自己的技能水平。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learningpromt.wiki/&quot;&gt;chatGPT提示工程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;里面提到的几个小技巧，已经在使用了，非常好用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://catcoding.me/p/apple-perf/&quot;&gt;苹果：为了安全让 M2 吃灰&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文介绍了苹果计算机在运行Rust编译器项目上的性能问题，以及它的根源 - System Integrity Protection（SIP）。SIP是苹果操作系统的一项安全技术，目的是阻止未经授权的代码执行，从而保护系统完整性。然而，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIP会在执行任意代码之前对其进行校验，并可能发送网络请求以确保文件的安全性&lt;/code&gt;。这对于需要执行大量代码的开发人员来说可能会产生问题，因为SIP会降低系统的性能，并导致长时间运行的代码在苹果计算机上速度较慢。虽然可以通过禁用SIP来解决这个问题，但这也会降低计算机的安全性。作者认为，苹果公司在这个问题上没有给出一个充分的解决方案，这可能表明苹果对于开发者的重视程度已经不如以前了。&lt;/p&gt;

&lt;p&gt;文章还提供一些bypass的策略。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/5JnKZ4MTnk8Hl_Jiz3DF4A&quot;&gt;关于南极旅游 - 王叔特别篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;王叔就是一个典范，无所畏惧，勇于尝试，才能拥有更大，更广阔的舒适区，让自己可以更好的去欣赏世界，享受人生。&lt;/p&gt;

&lt;p&gt;这其实无关财富，语言能力。王叔用自己的经历证明，用极为克制的预算，极为有限的语言能力，一样可以做到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://glarity.app/google-summary&quot;&gt;谷歌总结内容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;输入视频，可以直接总结视频的内容， 还有一个链接：https://youtu.be/5Lh4qiB3STo&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/why-did-google-close-its-coding-competitions&quot;&gt;为什么谷歌关闭了代码竞赛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google 关闭持续了 20 年的编程比赛。这些比赛每年吸引近 30 w 开发者。这些年，Goolge 员工数目从 2004 年的 3000 人翻了 60 倍，而编程比赛是招人的一个重要手段，也开启了 IT 行业面试刷题的时代。最近因为减成本，组织比赛的员工很多被开了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://citw.dev/tutorial/create-your-own-compiler&quot;&gt;创建自己的编译器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将对杰米·凯尔的《超级小编译器》进行指导演练。超级微型编译器是一个用Javascript编写的简单编译器，我们将从头开始逐步编写它。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lxgw/LxgwWenkaiTC&quot;&gt;开源字体wenkai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本字體的字形調整參考 一點字坊「傳承字形標準化文件」，但並不追求完全遵循之，有些部件會視情況做出取捨（如「曰」部件、「艹」部件等，由於涉及的漢字數量較多，故並未按照「檢校表」做改動；此外本字體中的部分部件採用了「檢校表」中收錄的一些稍爲遷就美觀需要的常見字形，如「蔑」「益」「亟」「老」「殳」等部件）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swc-project/swc/tree/main/crates&quot;&gt;swc-project小项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS、JavaScript、HTML 的 Parser 都手动实现了一遍。&lt;/p&gt;

&lt;p&gt;这个项目里面的子项目多得令人发指！且每个子项目的代码量都不少。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/03/04/quick-skill/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/03/04/quick-skill/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>78 -  继续搞钱</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;我有一个小习惯，就是每次用了不管是多少钱，都会记录一下。&lt;/p&gt;

&lt;p&gt;之前记账只记录金额，没有具体的花销事项，导致时间一长就可能忘记。现在几张都会记录具体每一笔的用途是什么，买了什么。&lt;/p&gt;

&lt;p&gt;在开始阅读之前，大家先思考下，记账的好处是什么？&lt;/p&gt;

&lt;p&gt;我自己记账的时间，我看了下快有 5 年了。发现去年的支出比前年支出上浮了 10%，不知道是不是物价上涨的原因。去年全年支出 143,824 元，不包含房贷和其他贷款，基本上就是为了生活的开支。&lt;/p&gt;

&lt;p&gt;从去年的饼状图来看，依次是发红包 &amp;gt; 房贷 &amp;gt; 医疗 &amp;gt; 数码 &amp;gt; 三餐 &amp;gt; 孩子，没有想到三餐居然在数码之后，这部分要好好的反思下，有些数码的东西，如果是刚需才购买。&lt;/p&gt;

&lt;p&gt;看到有个方法，我&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;不喜欢「克制」自己的消费，更喜欢理想的消费&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;就是把自己喜欢的东西加入到购物车，过一段时间再来看看，是不是自己想要的，如果是想要的，那说明当时不是冲动消费。&lt;/p&gt;

&lt;p&gt;2023 年的开支争取不增加，这个做到不是特别难，因为在数码这一块已经换的才换不久。但是由于大家都知道前不久，我们国家老人越来越多了，所以要准备点钱买入作为以后养老使用。&lt;/p&gt;

&lt;p&gt;医疗险、重疾险、储蓄养老有合适的产品可以再补充部分。&lt;/p&gt;

&lt;p&gt;除了开支外，还有一个重要反向节省的地方就是开源。&lt;/p&gt;

&lt;p&gt;「保持通话」播客里面有提到一个清单，除了支出外，还得有多个收入，大家都懂，不要把鸡蛋放在同一个篮子里面，这样的风险高。&lt;/p&gt;

&lt;p&gt;我除了上班，几乎没有其他的收入来源。收入单一，哪一天被裁员，或者毕业，就很危险。&lt;/p&gt;

&lt;p&gt;也要搞一搞 side project，你们有没有好的副业推荐的呀。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDU1Mzg3Mw==&amp;amp;mid=2651483959&amp;amp;idx=1&amp;amp;sn=f4d3fa555806fc8e2bfc619e0cac7126&amp;amp;chksm=bdbdcd498aca445f90195daa4c0e0b430a86979f6a8dc6b17fe7dde60f117299393a6a4c82d4&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0227zBHxofXi1YOw21BMlpwo&amp;amp;sharer_sharetime=1677468259838&amp;amp;sharer_shareid=e73f8d7af2e8f1807ea7886e4c9a51c0&amp;amp;key=4b2e4dea11a1f06c147f211fbf1a783927b64bd2796389c6dc37d85a788c39438d73b4e19d5636e0205b7a8c3b17877cc9910f7d4374f7514313c6a9c0113c693abd5bb7d7e5de34fd252743054d7e0a210faf593b7c50d057ab52219dc2224058a4cc695f9d80ac85747a6d2bf1ac5cfa7ad6570aa8d1bfab94fa60a6f7cb7d&amp;amp;ascene=1&amp;amp;uin=NDA3MDQzMDU%3D&amp;amp;devicetype=Windows+11+x64&amp;amp;version=6309001c&amp;amp;lang=zh_CN&amp;amp;countrycode=CN&amp;amp;exportkey=n_ChQIAhIQKwubYTHDbvfedvvOlw9EsBLmAQIE97dBBAEAAAAAANi3Es09oWkAAAAOpnltbLcz9gKNyK89dVj0ln5yEK%2BqqT4DlE7Yor2j7sS2OfyEawJkDGDimfSrBJYW8A8wYueumgWLIePTadu%2F%2FTwsNcm3AABWbK1L2FuSVMSUR2hd5cZmjc4ifhzL2QFlahi4OYz1IaYbrnYodqKFwRZ6aZnsCbVvjLi4r7HZt09QKVMJ5PhbZ76SqvxUFXqYI6v63HGVkDl%2FkFZoO5qI1RruP0EsQDswxZ5njMSdvXijyUm1NoQGlxfIO2FjDBDokndeAxW7SadaCBcVndIt&amp;amp;acctmode=0&amp;amp;pass_ticket=DpZtvWuZp0su4Ublg8CIcroF2PGsiOxMjS%2F79ndbjarXh%2BcmFYK3sGTzKdStauJMQnp2RzA0JmaqZeFNrBmHKA%3D%3D&amp;amp;wx_header=1&amp;amp;fontgear=2&quot;&gt;教师过剩、高校关停，人口如何影响教育？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;与在校生数变化趋势类似，2020~2035年我国义务教育阶段专任教师需求量总体减少，按现行生师比标准，到2035年全国将有约150万小学教师、37万初中教师过剩，小学教师需求量过剩较大，初中教师先短缺后过剩。
为应对这些过剩，除缩小班级规模、降低生师比外，未来应在稳定部属和省属师范大学招生计划的同时，逐步减少师专和高职高专的师范生招生，保持一定的师资规模和质量。另外，师资培养体系也要调整，调整师范专业设置，扩大音、体、美、劳、通用技术、学前、托育和特教等学科招生人数，减少文化科目招生计划。实际上，现在的师资供给存在较为严重的结构性缺编，语数等大课类老师相对容易过剩，而艺术、体育、科学等小课类老师更为短缺。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/5cZkmPICwj3RM3PlfUM7rg&quot;&gt;首轮关停潮已来，幼儿园“一孩难求”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;往年3月到8月，她每天都会接到大量咨询和报名电话，很多家长还要给孩子排队等位。&lt;/p&gt;

&lt;p&gt;希望，国家能尽快出台一个关于托育的细化政策，列出收费等方面的参考标准，目前仍是以各地摸索为主。“我们一定注意不要走幼儿园走过的弯路，应尽快把托育机构的性质有个明确的定位。”柳倩说。另外，托育老师的专业性和综合性要求很高，国内还缺乏一套成系统的托育教师培养体系，这方面也应进一步加强。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/liupan1890/aliyunpan/issues/714&quot;&gt;阿里云盘个人开发者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者前几天刚刚确认找到了新工作（之前回老家被隔离就是在办这个事），以后不跑美团了，新工作是做出纳，嗯，现金出纳&lt;/p&gt;

&lt;p&gt;从程序员转到外卖员转到出纳，这个跨度有点大，所以接下来一段时间需要从零开始学出纳，这个比较耗精力。为了避免因为啥也不会被开除，因此会暂时停止v3的开发工作，等我熟悉了出纳的工作事宜，再继续开发&lt;/p&gt;

&lt;p&gt;程序是爱好，不会停止，也无法割舍
出纳是生活，我已经穷的到了一定地步了，要养家，要想我媳妇问我今天超市搞活动一瓶2L可乐活动价5.5元买不买。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OwO-Network/DeepLX&quot;&gt;DeepLX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用Golang编写的永久免费的DeepL API，在mac上配合bob，就很方便的使用deepl的精准翻译功能。
https://github.com/clubxdev/bob-plugin-deeplx&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cfortuner/promptable&quot;&gt;promptable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Promptable是一个库，它可以让你用LLMS和嵌入提供商(如OpenAI、Huging Face、Cohere和Anthropic)构建强大的AI应用程序。它提供了灵活且可扩展的API，使您可以轻松地将LLM与数据和工具组合在一起，从而快速轻松地构建复杂的应用程序。&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/02/25/make-more-money/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/02/25/make-more-money/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>77 - 亲情</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230221082556.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近《狂飙》已经更新完了，我开始刷剧了，每天5集左右，1.5~2倍速度观看，观感上没有什么问题，一个礼拜就可以看完。&lt;/p&gt;

&lt;p&gt;对于本周的主题，我一开始也不知道写什么，要不就写一个我对亲情的认知。&lt;/p&gt;

&lt;p&gt;亲情，是有血缘关系的人之间存在的特殊感情。不管对方怎样也会爱对方，无论贫穷或富有，无论健康或疾病，你愿意嫁给……&lt;/p&gt;

&lt;p&gt;稍等，在这个充满诱惑和危机的世界里，亲情有时也会被利益、欺骗、背叛所蒙蔽，甚至导致家庭的崩溃和悲剧的发生。别说贫穷富有、健康疾病了，有时候连善恶，身边人都会失去理智，站在亲情这一边。&lt;/p&gt;

&lt;p&gt;我看过的美剧：《绝命毒师》和《越狱》是两部以亲情为主题的，它们都展示了主角&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;为了保护家人而走上违法的道路，最终陷入了无法自拔的困境&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;再来看国内这部剧，又何尝不是喃？从一个卖鱼的小商贩到一方恶霸黑势力。用黑暗、激烈、惊心动魄的手法来描绘亲情在极端环境下的变化和考验。&lt;/p&gt;

&lt;p&gt;他利用自己在的天赋，逐渐成为了一名冷酷无情、权势滔天的黑势力大佬。他不惜与警察、黑帮发生冲突和对抗，最后付出了沉重的代价，这个结尾，符合社会主义价值观。&lt;/p&gt;

&lt;p&gt;要不上点价值？&lt;/p&gt;

&lt;p&gt;亲情是无价之宝，但也需要正确地表达和维护。我们不能因为盲目地爱而做出错误或伤害别人。&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wFAqIByK_d3Ks70dARtzUw&quot;&gt;醒醒！先别看ChatGPT，AI绘画突破性进展&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ChatGPT现在非常火爆，但是我在前面的系列文章都反复强调过，这一次AIGC浪潮必须看GPT系列和Diffusion系列（AI绘画背后的技术）。
从内容生成的角度，文+图+多模态（音频、视频、3D等）才是全部的方向，目前来看GPT负责文，而Diffusion扛起来图+多模态的大旗。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md&quot;&gt;so，whats next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;core-js 的作者是奇人，很多人应该都听说过，他的库每月有2亿5000万次下载，他在 npm 安装信息中发求职信息然后被很多人黑，他开车撞死一个醉鬼差点坐牢，他现在一个月靠捐赠只能拿 $400。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/N7rcT_d-1eN_zkqsZl3C0A&quot;&gt;因为 ChatGPT，未来十年中国会新增五亿程序员&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;王建硕老师的文章我比较喜欢，都是一些浅显易懂的，而且很会用类举法，让深奥的问题轻松就能理解。&lt;/p&gt;

&lt;p&gt;有人说因为 ChatGPT 可以写程序了，所以程序员要失业了。但是，在程序员的世界里面，生产效率一夜提升 100 倍的事情几乎天天都就会发生。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mirror.xyz/coolberwin.eth/4Cqe0yewBGB-nmYD27m2TW442RrnDjOPue9M1cjL2Gs&quot;&gt;GhatGPT的AI版Bing搜索申请攻略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微软推出了整合 ChatGPT-4 的全新必应（Bing）搜索引擎，并且48小时内 申请用户就已经达到百万，国内访问bing都会跳转到国内的版本，通过修改一些请求头来达到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.checklyhq.com/how-to-bypass-totp-based-2fa-login-flows-with-playwright/&quot;&gt;playwright绕过2次验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yihong0618/xiaogpt&quot;&gt;小米和chatgpt结合起来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;小米和chatgpt结合起来，跑起来之后就可以问小爱同学问题了，“帮我回答开头的问题” 会发送一份给 ChatGPT 然后小爱同学用 tts 回答&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://f-droid.org/en/packages/com.carriez.flutter_hbb/&quot;&gt;远程桌面软件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你没有这个烦恼？给家里的老人手机设置，我试了市面上的大部分软件，好像都不太好用，主要是收费，这个功能就一年用一次都不到，如果是付费感觉不是很值，可以试试这个。&lt;/p&gt;

&lt;p&gt;一个开源的远程桌面应用，开源的TeamViewer替代品。为了让远程设备通过鼠标或触摸来控制你的安卓设备，你需要允许RustDesk使用 “Accessibility “服务，RustDesk使用AccessibilityService API来实现Addroid远程控制。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ScoopInstaller/Scoop&quot;&gt;windows 软件包管理工具 Scoop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scoop是一个用于Windows的命令行安装程序。类似linux下面的apt、apt-get、yum等，就是软件管理包工具。如果习惯了linux，切换到windows，可以试试这个软件，非常的好用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tool.browser.qq.com/&quot;&gt;QQ 工具助手&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;轻松办公，工具助你一臂之力，功能一应俱全、简单好用的线上工具宝。有几个语言识别的，语音转文字的还不错了，我试了下，成功率不是很高，但是还可以将就着用。&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/02/18/relationship/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/02/18/relationship/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>GCC编译优化流程</title>
        <description>&lt;h2 id=&quot;开篇&quot;&gt;开篇&lt;/h2&gt;

&lt;p&gt;由于自己对编译器比较感兴趣，开始准备学习一些编译器相关的知识，目前学习路径是编译器原理、gcc编译器优化、cuda编程基础、（重点是掌握编译流程，执行流程、优化流程）。&lt;/p&gt;

&lt;p&gt;由于没有相关的人的指点，是自己在网上找的学习资料，如果有不对的，请多多留言，谢谢~&lt;/p&gt;

&lt;h2 id=&quot;小插曲&quot;&gt;小插曲&lt;/h2&gt;

&lt;p&gt;我开始在网上搜了下，关于这个博主的博客，真的解释了什么是从入门到放弃，从这一篇文章&lt;a href=&quot;https://blog.csdn.net/wenpeng_lu/article/details/71036517&quot;&gt;GCC学习笔记（一）–编译流程&lt;/a&gt;，到第二篇文章，然后就没有然后了，估计是作者已经从事其他职业了吧。&lt;/p&gt;

&lt;p&gt;可以查看这个&lt;a href=&quot;https://blog.csdn.net/qq_36287943/category_9614491.html&quot;&gt;大佬的博客&lt;/a&gt;，连续性比较高，从编译器的开发和优化文章来看，属于大佬了。&lt;/p&gt;

&lt;p&gt;这里还找一个高校的&lt;a href=&quot;https://github.com/chyyuu/compiler_course_info&quot;&gt;编译器原理课程&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;学习路径&quot;&gt;学习路径&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;了解基本概念&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先需要了解 gcc 的基本概念，如编&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;译过程、编译器前端和后端、语言前端和后端、优化器&lt;/code&gt;等。 你需要了解 gcc 的基本原理和工作流程，并明确你了解的自身瓶颈。 推荐&lt;a href=&quot;https://github.com/iBreaker/book/blob/master/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86(%E9%BE%99%E4%B9%A6)%20%E7%AC%AC%E4%BA%8C%E7%89%88.pdf&quot;&gt;《编译原理》&lt;/a&gt;一书进行了解。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学习熟悉 LLVM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GCC是一款成熟的编译器，与基于 LLVM 的编译器类似，它也有类似的优化器（GCC优化器）。因此，为了更好的理解和学习GCC优化器，建议先学习LLVM。 LLVM是一种现代的编译器架构，并且与GCC类似，具有一个优化器。对于有一定经验的开发人员来说，学习 LLVM 可能更加容易。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;了解GCC优化器&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;理解G&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CC优化器功能极其重要&lt;/code&gt;，从而可以更好的编写更高质量，更快的代码。这部分主要学习GCC优化器、如何告诉GCC优化器做什么。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学习跟踪优化(追踪 GCC 优化器)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;追踪GCC优化器的方法将帮助你了解优化器如何处理你的代码。 在跟踪期间，你应该看到优化器在各个阶段执行的转换，以及如何影响生成的机器代码。 Gcov优化器会打印日志，可通过可视化工具Visualization Tools for GCC（Vtgcc）来直观的看到 GCC 优化器如何执行。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用较小的项目进行实践&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于初学 GCC 优化器的开发人员，我建议使用小软件项目，如 smallcc 等小型 C 编译器进行实践。 首先您需要实现一个较简单的编译器，以便于由此了解 GCC 代码库中的特定部分，如前端、后端和优化器等。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;参考GCC文档&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GCC的官方文档是个极好的参考，可以获得示例代码、WIKI文档、网页等。&lt;/p&gt;

&lt;p&gt;以上列举的学习路径中，建议分配50%的时间用于实际练习。找到相关的开源项目，并尝试更改或添加代码之类的操作。通常，掌握编译器优化会涉及到编写各种插件，并尝试不同的编译器选项和标志，仅有经验，才能更好的发展技能。&lt;/p&gt;

&lt;h2 id=&quot;编译流程&quot;&gt;编译流程&lt;/h2&gt;

&lt;p&gt;下面这个是最基础的，不好记，没关系，直接看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc --help&lt;/code&gt;就可以看到了。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;-B&lt;/span&gt; &amp;lt;directory&amp;gt;           Add &amp;lt;directory&amp;gt; to the compiler&lt;span class=&quot;s1&quot;&gt;'s search paths.
  -v                       Display the programs invoked by the compiler.
  -###                     Like -v but options quoted and commands not executed.
  -E                       Preprocess only; do not compile, assemble or link.
  -S                       Compile only; do not assemble or link.
  -c                       Compile and assemble, but do not link.
  -o &amp;lt;file&amp;gt;                Place the output into &amp;lt;file&amp;gt;.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里是编译过程的基本流程：&lt;/p&gt;

&lt;p&gt;预处理（Preprocessing）：cpp 命令产生原始代码，它会根据预处理指令（如 #include 或 #define 等）替换掉代码的部分部分，最终生成一个调整后的 .c 文件。&lt;/p&gt;

&lt;p&gt;编译（Compilation）： gcc -S 命令将 .c 文件转换成一个 .s 的汇编代码文件。&lt;/p&gt;

&lt;p&gt;汇编（Assembling）：as 命令将 .s 文件转换成一个 .o 的目标文件，它包含着目标计算机可以执行的机器语言代码。&lt;/p&gt;

&lt;p&gt;链接（Linking）：ld 命令把所有目标文件，以及必要的库文件连接在一起，生成可执行文件。&lt;/p&gt;

&lt;h2 id=&quot;编译优化&quot;&gt;编译优化&lt;/h2&gt;

&lt;p&gt;GCC 编译器的优化点通常包括：&lt;/p&gt;

&lt;p&gt;使用不同级别的优化选项：GCC 支持不同级别的优化选项，从 O0(无优化) 到 O3(高度优化)。优化级别越高，生成的可执行代码性能越好，但是可能会导致编译时间变慢。&lt;/p&gt;

&lt;p&gt;使用不同的优化器策略：GCC 有几种优化器策略，如快速优化(-O1)、基本优化(-O2) 和生成最优代码(-O3)。选择正确的优化器策略可以提高编译后优化后程序的性能。&lt;/p&gt;

&lt;p&gt;使用 inline 关键字：inline 关键字告诉编译器将这个函数内联展开，它会自动选择最佳策略，并尝试减少函数调用的开销，从而提高程序性能。&lt;/p&gt;

&lt;p&gt;避免不必要的中间代码：它使用了 ISO/IEC 14882规范的C++语言。在进行指令优化时，它的三个最基本的原则是提供初始化的自动变量、使用指针分析技术以及通过加了随机标签的单向链表来存储表示内存对象的情况。&lt;/p&gt;

&lt;h2 id=&quot;show-me-the-code&quot;&gt;show me the code&lt;/h2&gt;

&lt;p&gt;下面是一段c代码：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sum is %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对这段代码编译和执行：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc -O3 -o test test.c&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;就可以看到运行结果&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20&lt;/code&gt;了。&lt;/p&gt;

&lt;h2 id=&quot;更多阅读&quot;&gt;更多阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/fps2tao/p/10935817.html&quot;&gt;GCC编译流程及常用编辑命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/02/16/learn-gcc-compiler-optimzation/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/02/16/learn-gcc-compiler-optimzation/</guid>
        
        <category>gcc</category>
        
        <category>compiler</category>
        
        
      </item>
    
      <item>
        <title>用宝塔部署 flask 应用</title>
        <description>&lt;h1 id=&quot;安装宝塔&quot;&gt;安装宝塔&lt;/h1&gt;

&lt;p&gt;这个是最新的地址：https://www.bt.cn/bbs/thread-19376-1-1.html。&lt;/p&gt;

&lt;p&gt;ubuntu的安装脚本是：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh &amp;amp;&amp;amp; sudo bash install.sh 12f2c1d72&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其他系统的安装脚本参见上面的网页的，非常全面。一键安装。&lt;/p&gt;

&lt;p&gt;安装好之后，就可以通过显示的用户名和密码登录，以及网址url就可以访问到后台。&lt;/p&gt;

&lt;p&gt;为了更好的开发，可以安装vscode remote，这里就不展开说细节了。&lt;/p&gt;

&lt;h1 id=&quot;安装flask&quot;&gt;安装flask&lt;/h1&gt;

&lt;p&gt;安装flask的restful即可。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Flask==2.2.2
Flask-RESTful==0.3.9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;准备好自己的应用程序，没有路径要求。&lt;/p&gt;

&lt;h1 id=&quot;运行flask-app&quot;&gt;运行flask app&lt;/h1&gt;

&lt;p&gt;安装之前需要先安装2个软件，在bt里面的软件商店里面可以看到。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230227093710.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;进程守护管理器 2.4	
基于Supervisor开发的进程守护工具，可以让进程开机启动，异常关闭自动重启，这个软件是为了安装的flask是守护进程。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python项目管理器 2.1
快速部署Python项目，当前仅支持Centos7.x（我用的ubuntu20也可以），可部署框架有flask,django,sanic。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来就参考这个教程。https://www.bt.cn/bbs/thread-90005-1-1.html&lt;/p&gt;

&lt;p&gt;按照上面的修改完了之后，有可能post的data太长会运行失败，建议修改配置文件
&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230227094106.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;添加ssh&quot;&gt;添加ssh&lt;/h1&gt;

&lt;p&gt;网站-&amp;gt;创建其他网站，输入域名，主要是申请ssl证书。&lt;/p&gt;

&lt;p&gt;然后到软件商店里面找到Python项目管理器，里面映射到这个IP既可以通过https访问了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://chasays.github.io/&quot;&gt;github博客&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;微信公众号：cdtfug， 欢迎关注一起吹牛逼，也可以加微信号「xiaorik」朋友圈围观。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/02/16/deploy-flask-with-bt/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/02/16/deploy-flask-with-bt/</guid>
        
        <category>flask</category>
        
        <category>bt</category>
        
        
      </item>
    
      <item>
        <title>76 -  兴趣和特长</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;如果把自己的兴趣爱好和事业结合起来？这个是多么美好的一份工作呀。&lt;/p&gt;

&lt;p&gt;你是这样的？或者你身边有这样的朋友么？&lt;/p&gt;

&lt;p&gt;早几年，有爱的人、有喜欢的工作，没有担心过这个问题，但是随着时间的推移，发现工作这个参数，不受自己控制，老板可以改变、市场行情可以改变……&lt;/p&gt;

&lt;p&gt;找到一个自己喜欢的工作，而且可以变成金钱，那想想就有多么美好。&lt;/p&gt;

&lt;p&gt;我最近用chatGPT来回答这个问题，提供了许多的问题，找一个空闲、安静的时间，写出这些问题的答案，或许就可以找到自己的兴趣。&lt;/p&gt;

&lt;p&gt;找到自己的兴趣的点，不是一蹴而就的，可能是1个月，可能是几年。要有这个心理准备，但是这个时间是非常值得投入。&lt;/p&gt;

&lt;p&gt;下面都是比较简单的英语问题，就直接粘贴过来了，没有任何的改动。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Explore your hobbies and pastimes: What do you enjoy doing in your free time? What activities bring you the most joy and fulfillment? Consider trying new hobbies and activities to see if they spark a new interest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reflect on your values: What is important to you? What values do you hold dear? What do you believe in and want to stand for? Understanding your values can help you identify activities and causes that align with your beliefs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Think about your skills and strengths: What are you naturally good at? What tasks do you find effortless and enjoyable? Consider pursuing activities and careers that allow you to use and develop these skills.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Take a personality test: There are many online personality tests that can help you understand your unique traits, values, and interests. Taking a test can provide you with a new perspective and insights into your personality and what might be the best fit for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try new things: Don’t be afraid to step outside of your comfort zone. Try new activities, attend events, and meet new people. You never know what you might discover about yourself and what you enjoy.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这篇&lt;a href=&quot;https://mp.weixin.qq.com/s/Ush0Z1UErrcZkFPfb_NZxQ&quot;&gt;如何找到自己的长处&lt;/a&gt;里面提到了，可以用：要发现自己的长处，唯一途径就是反馈分析法（feedback analysis）。&lt;/p&gt;

&lt;p&gt;要找到兴趣和特长的工作或者是职业，完成这个过程大概需要5年左右的时间。看上去，这个时间不短。事实上，把五年放到你漫长的一生，只是一小段时间，而这段时间可以帮助你找到一生中最重要的东西，难道不值得一试？&lt;/p&gt;

&lt;p&gt;祝你早日找到自己喜欢的工作。&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;慢慢变富，之前港股开户后，存了一部分钱到里面，用来打新，近段时间发现有新的用途了。&lt;/p&gt;

&lt;p&gt;最近几年的行情不好，打新经常都会破发。所以闲置了一段时间了，最近看到「也谈钱」提到港股有一只恒生高股息率指数，在市场GX恒生高股息率ETF就是用来跟踪前者的，主要是每年的股息派发比较多，用来做长久投资，看了下年化益在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7%~10%&lt;/code&gt;，这个已经收益不错了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230208110324.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多详细信息，可以参考这个链接：https://www.globalxetfs.com.hk/zh-hant/campaign/hang-seng-high-dividend-yield&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/xlrRPpvFgtg8x1-L1SC5OA&quot;&gt;连更2年&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;人总是会有虚荣心，总是会有好胜心，会在意一篇用心写出来的文章是否受欢迎。于是会去区分什么是我喜欢的文章，什么是读者会喜欢的文章，而且会忍不住多创作一点后者。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://three-recorder-52a.notion.site/OpenAI-Chatgpt-12-5-88e7b6a77db74d41b038440b824d7f9f&quot;&gt;与Chatgpt沟通方式一览&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个notion网页提到了一些chatgpt常用的技巧和调教手段。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waylaidwanderer/node-chatgpt-api&quot;&gt;BingAIClient&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BingAIClient是Bing的GPT-4版本ChatGPT的实验性客户端。它的工作原理与ChatGPT很相似，但它是由GPT-4而不是GPT-3驱动的。有关其功能和限制的更多信息，请参见Reddit的评论。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zhayujie/chatgpt-on-wechat&quot;&gt;ChatGPT的微信聊天机器人&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于ChatGPT的微信聊天机器人，通过 OpenAI 接口生成对话内容，使用 itchat 实现微信消息的接收和自动回复，有些优秀的网友通过这个已经赚到几十万了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wnma3mz/wechat_articles_spider&quot;&gt;微信公众号文章的爬虫&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以学习下爬虫的思路，从微信公众号平台获取微信公众所有文章的url，登录微信PC端或移动端获取文章的阅读数、点赞数、评论信息。&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/02/11/interest-stength/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/02/11/interest-stength/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>75 - 番外篇 找到自己的兴趣</title>
        <description>&lt;p&gt;朋友，您好，由于最近比较惆怅，就多了这一次的番外篇 ~&lt;/p&gt;

&lt;p&gt;如果把自己的兴趣爱好和事业结合起来？这个是多么美好的一份工作呀。&lt;/p&gt;

&lt;p&gt;你是这样的？或者你身边有这样的朋友么？&lt;/p&gt;

&lt;p&gt;早几年，有爱的人、有喜欢的工作，没有担心过这个问题，但是随着时间的推移，发现工作这个参数，不受自己控制，老板可以改变、市场行情可以改变……&lt;/p&gt;

&lt;p&gt;找到一个自己喜欢的工作，而且可以变成金钱，那想想就有多么美好。&lt;/p&gt;

&lt;p&gt;我最近用chatGPT来回答这个问题，提供了许多的问题，找一个空闲、安静的时间，写出这些问题的答案，或许就可以找到自己的兴趣。&lt;/p&gt;

&lt;p&gt;找到自己的兴趣的点，不是一蹴而就的，可能是1个月，可能是几年。要有这个心理准备，但是这个时间是非常值得投入。&lt;/p&gt;

&lt;p&gt;下面都是比较简单的英语问题，就直接粘贴过来了，没有任何的改动。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Explore your hobbies and pastimes: What do you enjoy doing in your free time? What activities bring you the most joy and fulfillment? Consider trying new hobbies and activities to see if they spark a new interest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reflect on your values: What is important to you? What values do you hold dear? What do you believe in and want to stand for? Understanding your values can help you identify activities and causes that align with your beliefs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Think about your skills and strengths: What are you naturally good at? What tasks do you find effortless and enjoyable? Consider pursuing activities and careers that allow you to use and develop these skills.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Take a personality test: There are many online personality tests that can help you understand your unique traits, values, and interests. Taking a test can provide you with a new perspective and insights into your personality and what might be the best fit for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try new things: Don’t be afraid to step outside of your comfort zone. Try new activities, attend events, and meet new people. You never know what you might discover about yourself and what you enjoy.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这篇&lt;a href=&quot;https://mp.weixin.qq.com/s/Ush0Z1UErrcZkFPfb_NZxQ&quot;&gt;如何找到自己的长处&lt;/a&gt;里面提到了，可以用：要发现自己的长处，唯一途径就是反馈分析法（feedback analysis）。&lt;/p&gt;

&lt;p&gt;要找到兴趣和特长的工作或者是职业，完成这个过程大概需要5年左右的时间。看上去，这个时间不短。事实上，把五年放到你漫长的一生，只是一小段时间，而这段时间可以帮助你找到一生中最重要的东西，难道不值得一试？&lt;/p&gt;

&lt;p&gt;如果您喜欢这份 Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;欢迎转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/02/09/extra-story/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/02/09/extra-story/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
      <item>
        <title>75 -  不慌不忙</title>
        <description>&lt;p&gt;朋友，您好 ~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230207123106.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图片由 Deepai 自动生成&lt;/p&gt;

&lt;p&gt;周末晚上睡不着，打开 Spotify，点击播放我标记喜欢歌曲：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;慌慌张张 匆匆忙忙
为何生活总是这样
难道说 我的理想 
就是这样度 过一生的时光&lt;/p&gt;

  &lt;p&gt;不卑不亢 不慌不忙
也许生活应该这样
难道说 60岁以后再去寻找
我想要的自由&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;没错，就是郝云的活着。歌词朴实无华，人人都能看懂，但是却听了有种无名的伤感。&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youzhiyouxing.cn/n/materials/1400&quot;&gt;E73《财富自由之路》：这本书是大忽悠，还是行动指南？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;李笑来的财务自由之路，我看过这本书，是后来看了相关的理财书，有了一定的理财知识，才接触到这本书，这本书文字简单，不像论文那样高深，看完了根据自己的经验去实践。&lt;/p&gt;

&lt;p&gt;我理解的财务自由，是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;指某个人再也不用为了满足生活而出售自己的时间&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;推荐一个小技巧，AirPods pro 听歌曲可以使用背景音乐，比如可以开启溪水，雨声等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chasays/mdPicGo/master/win2022/20230207123009.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果您喜欢这份Newsletter，&lt;a href=&quot;https://chasays.zhubai.love/&quot;&gt;请转发给您朋友，&lt;/a&gt;，这是对我最大的帮助，继续进步，继续给大家带来有价值的分享。&lt;/p&gt;

&lt;h1 id=&quot;文章推荐&quot;&gt;文章推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/l1PhOdB2wP-7HeTkv9P5CQ&quot;&gt;2023 年，产品经理的成长，从破除迷信开始&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者尝试把多端的微信聊天记录合并到新购买的设备上，合并完成的那一刻，新设备原本空荡荡的对话列表，一个个熟悉的头像又出现了。随便挑了几个最新的对话检查了一下，滑动一下列表看了看对话总量，没发现什么问题。于是把老旧的设备都格式化了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theverge.com/2023/2/3/23584675/microsoft-ai-bing-chatgpt-screenshots-leak&quot;&gt;Bing结合chatgpt的搜索&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微软正在通过将AI聊天机器人集成到其搜索引擎Bing中来利用ChatGPT的成功。几个用户短暂地看到人工智能辅助搜索引擎的一个版本。据报道，它能够引用其消息来源。预计微软将在未来几周内发布关于新必应的公告。AI驱动的必应的屏幕截图可在文章中找到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/05h1y5i3hsAOzFopTyubxw&quot;&gt;当我决定从苹果辞职&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者才三十岁，心里还有一团火，想再投身于洪流中探索一番，想做更有价值、更有意义的事情。&lt;/p&gt;

&lt;h1 id=&quot;工具资源推荐&quot;&gt;工具、资源推荐&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openai.com/blog/chatgpt-plus/&quot;&gt;chatgpt plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;openai 正在为ChatGPT推出一项试点订阅计划，这是一种对话型人工智能，可以与你聊天，回答后续问题，并挑战不正确的假设。新的订阅计划，ChatGPT Plus，将以20美元/月的价格提供，用户将获得一些好处。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PlexPt/awesome-chatgpt-prompts-zh&quot;&gt;chatgpt中文调教版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ChatGPT模型是由OpenAI训练的大型语言模型，能够生成类人文本。通过向它提供提示，它可以生成继续对话或扩展给定提示的响应。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://blog.chiphub.top/2023/02/04/no-hurry-no-busy/</link>
        <guid isPermaLink="true">https://blog.chiphub.top/2023/02/04/no-hurry-no-busy/</guid>
        
        <category>Newsletter</category>
        
        
      </item>
    
  </channel>
</rss>
